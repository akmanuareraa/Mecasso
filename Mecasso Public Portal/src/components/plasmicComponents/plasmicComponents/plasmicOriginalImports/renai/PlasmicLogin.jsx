// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: nFqLLykb74N
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Button1SignUpPage from "../../../Button1SignUpPage"; // plasmic-import: MUJ328zB3I/component
import Button1SignUpPageDisabled from "../../../Button1SignUpPageDisabled"; // plasmic-import: EGeBYu4JO0/component
import Fbplasmicbutton from "../../../Fbplasmicbutton"; // plasmic-import: tOZMt_Mp39/component
import Button2SignUpPage from "../../../Button2SignUpPage"; // plasmic-import: d6xbjF1TjG/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: nFqLLykb74N/css
import Ethereum1Icon from "./icons/PlasmicIcon__Ethereum1"; // plasmic-import: uCAdxxq_BFp/icon
import SocialLogo1Icon from "./icons/PlasmicIcon__SocialLogo1"; // plasmic-import: yAYsIikJDbL/icon
import GoogleLogosvgIcon from "./icons/PlasmicIcon__GoogleLogosvg"; // plasmic-import: Ee4q6b6ruj/icon
import mailConfirmation1SvgKUhRueDRju from "./images/mailConfirmation1Svg.svg"; // plasmic-import: kUhRueDRju/picture

export const PlasmicLogin__VariantProps = new Array(
  "emailverified",
  "emailnotverified"
);

export const PlasmicLogin__ArgProps = new Array(
  "onClick",
  "errormessage",
  "facebookbuttonslot"
);

function PlasmicLogin__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <p.Stack
        as={"div"}
        data-plasmic-name={"signUpPageRoot"}
        data-plasmic-override={overrides.signUpPageRoot}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_tokens,
          sty.signUpPageRoot,
          {
            [sty.signUpPageRootemailnotverified]: hasVariant(
              variants,
              "emailnotverified",
              "emailnotverified"
            ),

            [sty.signUpPageRootemailverified]: hasVariant(
              variants,
              "emailverified",
              "emailverified"
            )
          }
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"signUpPage"}
          data-plasmic-override={overrides.signUpPage}
          hasGap={true}
          className={classNames(projectcss.all, sty.signUpPage, {
            [sty.signUpPageemailnotverified]: hasVariant(
              variants,
              "emailnotverified",
              "emailnotverified"
            ),

            [sty.signUpPageemailverified]: hasVariant(
              variants,
              "emailverified",
              "emailverified"
            )
          })}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <TopNavBar
              data-plasmic-name={"topNavBar"}
              data-plasmic-override={overrides.topNavBar}
              className={classNames("__wab_instance", sty.topNavBar)}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"headingText"}
              data-plasmic-override={overrides.headingText}
              hasGap={true}
              className={classNames(projectcss.all, sty.headingText)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nIpJh
                )}
              >
                {"Mecasso"}
              </div>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"signupbuttonstack"}
              data-plasmic-override={overrides.signupbuttonstack}
              hasGap={true}
              className={classNames(projectcss.all, sty.signupbuttonstack)}
            >
              <Button1SignUpPage
                data-plasmic-name={"emailbutton"}
                data-plasmic-override={overrides.emailbutton}
                className={classNames("__wab_instance", sty.emailbutton)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e8Kpc
                  )}
                >
                  {"Login with Email"}
                </div>
              </Button1SignUpPage>

              <Button1SignUpPage
                data-plasmic-name={"webthreebutton"}
                data-plasmic-override={overrides.webthreebutton}
                className={classNames("__wab_instance", sty.webthreebutton)}
                slot={
                  <Ethereum1Icon
                    className={classNames(projectcss.all, sty.svg__o3R)}
                    role={"img"}
                  />
                }
              >
                {"Connect with Web3"}
              </Button1SignUpPage>

              {false ? (
                <Button1SignUpPage
                  data-plasmic-name={"socialmediabutton"}
                  data-plasmic-override={overrides.socialmediabutton}
                  className={classNames(
                    "__wab_instance",
                    sty.socialmediabutton
                  )}
                  slot={
                    <SocialLogo1Icon
                      className={classNames(projectcss.all, sty.svg__zcIR)}
                      role={"img"}
                    />
                  }
                >
                  {"Login with Social Media"}
                </Button1SignUpPage>
              ) : null}
            </p.Stack>
          ) : null}

          <Button1SignUpPageDisabled
            data-plasmic-name={"button1SignUpPageDisabled"}
            data-plasmic-override={overrides.button1SignUpPageDisabled}
            className={classNames(
              "__wab_instance",
              sty.button1SignUpPageDisabled
            )}
            slot={
              <SocialLogo1Icon
                className={classNames(projectcss.all, sty.svg___0Vf0N)}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k08M7
              )}
            >
              {"Login with Social Media"}
            </div>
          </Button1SignUpPageDisabled>

          <p.Stack
            as={"div"}
            data-plasmic-name={"socialButtonStack"}
            data-plasmic-override={overrides.socialButtonStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.socialButtonStack)}
          >
            {true ? (
              <div
                data-plasmic-name={"facebookbuttonslot"}
                data-plasmic-override={overrides.facebookbuttonslot}
                className={classNames(projectcss.all, sty.facebookbuttonslot)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Fbplasmicbutton
                      className={classNames(
                        "__wab_instance",
                        sty.fbplasmicbutton__yq5Aa
                      )}
                    />
                  ),

                  value: args.facebookbuttonslot
                })}
              </div>
            ) : null}

            <Button2SignUpPage
              data-plasmic-name={"googlebutton"}
              data-plasmic-override={overrides.googlebutton}
              className={classNames("__wab_instance", sty.googlebutton)}
            >
              <GoogleLogosvgIcon
                className={classNames(projectcss.all, sty.svg___04X64)}
                role={"img"}
              />
            </Button2SignUpPage>
          </p.Stack>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___9Zvie)}>
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wim3D
                  )}
                >
                  {
                    "An email has been sent to you. Please confirm your email address."
                  }
                </div>
              ) : null}
              {true ? (
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"118px"}
                  loading={"lazy"}
                  src={{
                    src: mailConfirmation1SvgKUhRueDRju,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(variants, "emailnotverified", "emailnotverified")
              ? true
              : hasVariant(variants, "emailverified", "emailverified")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__ysnAh, {
                [sty.freeBoxemailnotverified__ysnAhqwv62]: hasVariant(
                  variants,
                  "emailnotverified",
                  "emailnotverified"
                ),

                [sty.freeBoxemailverified__ysnAhnMrMk]: hasVariant(
                  variants,
                  "emailverified",
                  "emailverified"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID to proceed",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage, {
                  [sty.slotTargetErrormessageemailnotverified]: hasVariant(
                    variants,
                    "emailnotverified",
                    "emailnotverified"
                  ),

                  [sty.slotTargetErrormessageemailverified]: hasVariant(
                    variants,
                    "emailverified",
                    "emailverified"
                  )
                })
              })}
            </div>
          ) : null}
        </p.Stack>
      </p.Stack>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  signUpPageRoot: [
    "signUpPageRoot",
    "signUpPage",
    "topNavBar",
    "screenAlert",
    "headingText",
    "signupbuttonstack",
    "emailbutton",
    "webthreebutton",
    "socialmediabutton",
    "button1SignUpPageDisabled",
    "socialButtonStack",
    "facebookbuttonslot",
    "googlebutton",
    "img"
  ],

  signUpPage: [
    "signUpPage",
    "topNavBar",
    "screenAlert",
    "headingText",
    "signupbuttonstack",
    "emailbutton",
    "webthreebutton",
    "socialmediabutton",
    "button1SignUpPageDisabled",
    "socialButtonStack",
    "facebookbuttonslot",
    "googlebutton",
    "img"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  headingText: ["headingText"],
  signupbuttonstack: [
    "signupbuttonstack",
    "emailbutton",
    "webthreebutton",
    "socialmediabutton"
  ],

  emailbutton: ["emailbutton"],
  webthreebutton: ["webthreebutton"],
  socialmediabutton: ["socialmediabutton"],
  button1SignUpPageDisabled: ["button1SignUpPageDisabled"],
  socialButtonStack: [
    "socialButtonStack",
    "facebookbuttonslot",
    "googlebutton"
  ],

  facebookbuttonslot: ["facebookbuttonslot"],
  googlebutton: ["googlebutton"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogin__ArgProps,
      internalVariantPropNames: PlasmicLogin__VariantProps
    });

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "signUpPageRoot") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("signUpPageRoot"),
  {
    // Helper components rendering sub-elements
    signUpPage: makeNodeComponent("signUpPage"),
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    headingText: makeNodeComponent("headingText"),
    signupbuttonstack: makeNodeComponent("signupbuttonstack"),
    emailbutton: makeNodeComponent("emailbutton"),
    webthreebutton: makeNodeComponent("webthreebutton"),
    socialmediabutton: makeNodeComponent("socialmediabutton"),
    button1SignUpPageDisabled: makeNodeComponent("button1SignUpPageDisabled"),
    socialButtonStack: makeNodeComponent("socialButtonStack"),
    facebookbuttonslot: makeNodeComponent("facebookbuttonslot"),
    googlebutton: makeNodeComponent("googlebutton"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
