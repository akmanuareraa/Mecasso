// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: EEZbiOYEIeX
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicNavfeed.module.css"; // plasmic-import: EEZbiOYEIeX/css
import SocialFeedsvgIcon from "./icons/PlasmicIcon__SocialFeedsvg"; // plasmic-import: UHPLS1RgB/icon

export const PlasmicNavfeed__VariantProps = new Array(
  "lbtoggle",
  "feedtoggle",
  "portfoliotoggle",
  "txntoggle",
  "proposaltoggle"
);

export const PlasmicNavfeed__ArgProps = new Array();

function PlasmicNavfeed__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__iu6H3)}
      >
        <SocialFeedsvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgfeedtoggle]: hasVariant(
              variants,
              "feedtoggle",
              "feedtoggle"
            ),

            [sty.svglbtoggle]: hasVariant(variants, "lbtoggle", "lbtoggle"),
            [sty.svgportfoliotoggle]: hasVariant(
              variants,
              "portfoliotoggle",
              "portfoliotoggle"
            ),

            [sty.svgproposaltoggle]: hasVariant(
              variants,
              "proposaltoggle",
              "proposaltoggle"
            ),

            [sty.svgtxntoggle]: hasVariant(variants, "txntoggle", "txntoggle")
          })}
          role={"img"}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textfeedtoggle]: hasVariant(
                variants,
                "feedtoggle",
                "feedtoggle"
              ),

              [sty.textlbtoggle]: hasVariant(variants, "lbtoggle", "lbtoggle"),
              [sty.textportfoliotoggle]: hasVariant(
                variants,
                "portfoliotoggle",
                "portfoliotoggle"
              ),

              [sty.textproposaltoggle]: hasVariant(
                variants,
                "proposaltoggle",
                "proposaltoggle"
              ),

              [sty.texttxntoggle]: hasVariant(
                variants,
                "txntoggle",
                "txntoggle"
              )
            }
          )}
        >
          {"Feed"}
        </div>
      </p.Stack>

      <div
        className={classNames(projectcss.all, sty.freeBox___5HEn, {
          [sty.freeBoxfeedtoggle___5HEnb61OV]: hasVariant(
            variants,
            "feedtoggle",
            "feedtoggle"
          ),

          [sty.freeBoxlbtoggle___5HEnvprb]: hasVariant(
            variants,
            "lbtoggle",
            "lbtoggle"
          ),

          [sty.freeBoxportfoliotoggle___5HENvtoPi]: hasVariant(
            variants,
            "portfoliotoggle",
            "portfoliotoggle"
          ),

          [sty.freeBoxproposaltoggle___5HEnLApo]: hasVariant(
            variants,
            "proposaltoggle",
            "proposaltoggle"
          ),

          [sty.freeBoxtxntoggle___5HEn6H31Z]: hasVariant(
            variants,
            "txntoggle",
            "txntoggle"
          )
        })}
      />
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavfeed__ArgProps,
      internalVariantPropNames: PlasmicNavfeed__VariantProps
    });

    return PlasmicNavfeed__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavfeed";
  } else {
    func.displayName = `PlasmicNavfeed.${nodeName}`;
  }
  return func;
}

export const PlasmicNavfeed = Object.assign(
  // Top-level PlasmicNavfeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicNavfeed
    internalVariantProps: PlasmicNavfeed__VariantProps,
    internalArgProps: PlasmicNavfeed__ArgProps
  }
);

export default PlasmicNavfeed;
/* prettier-ignore-end */
