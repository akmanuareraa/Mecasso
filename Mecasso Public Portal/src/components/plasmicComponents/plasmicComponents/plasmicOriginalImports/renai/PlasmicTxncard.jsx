// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: x_VY91N3mL4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicTxncard.module.css"; // plasmic-import: x_VY91N3mL4/css
import image2YOuiknZ8 from "./images/image2.png"; // plasmic-import: yOuiknZ-8/picture

export const PlasmicTxncard__VariantProps = new Array("send");

export const PlasmicTxncard__ArgProps = new Array(
  "profilepic",
  "tokenname",
  "tokensymbol",
  "amount",
  "children",
  "timestamp"
);

function PlasmicTxncard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__w0PyL)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__uZjyc)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ty6Kk)}
                    displayHeight={"38px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"38px"}
                    loading={"lazy"}
                    src={{
                      src: image2YOuiknZ8,
                      fullWidth: 500,
                      fullHeight: 750,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.profilepic
              })}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jMq4H)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__noIa6)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9CkJc)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Pablo",
                      value: args.tokenname,
                      className: classNames(sty.slotTargetTokenname)
                    })}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__sej2V)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "PBO",
                      value: args.tokensymbol,
                      className: classNames(sty.slotTargetTokensymbol)
                    })}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4VeCv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rr8Vz,
                      {
                        [sty.textsend__rr8Vz60LDr]: hasVariant(
                          variants,
                          "send",
                          "send"
                        )
                      }
                    )}
                  >
                    {hasVariant(variants, "send", "send") ? "-" : "+"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___9G6Um)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "1200",
                      value: args.amount,
                      className: classNames(sty.slotTargetAmount)
                    })}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5NoPw)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___7G8Sp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__puPwl,
                  {
                    [sty.textsend__puPwl60LDr]: hasVariant(
                      variants,
                      "send",
                      "send"
                    )
                  }
                )}
              >
                {hasVariant(variants, "send", "send") ? "To" : "From"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__tX0S)}>
                {p.renderPlasmicSlot({
                  defaultContents: "0xf45c6...",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__thr6M)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tdAnL,
              {
                [sty.textsend__tdAnL60LDr]: hasVariant(variants, "send", "send")
              }
            )}
          >
            {hasVariant(variants, "send", "send") ? "SEND" : "BUY"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__zziKg)}>
            {p.renderPlasmicSlot({
              defaultContents: "12-02-2022",
              value: args.timestamp,
              className: classNames(sty.slotTargetTimestamp)
            })}
          </div>
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTxncard__ArgProps,
      internalVariantPropNames: PlasmicTxncard__VariantProps
    });

    return PlasmicTxncard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTxncard";
  } else {
    func.displayName = `PlasmicTxncard.${nodeName}`;
  }
  return func;
}

export const PlasmicTxncard = Object.assign(
  // Top-level PlasmicTxncard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTxncard
    internalVariantProps: PlasmicTxncard__VariantProps,
    internalArgProps: PlasmicTxncard__ArgProps
  }
);

export default PlasmicTxncard;
/* prettier-ignore-end */
