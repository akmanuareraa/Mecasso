// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: fwFhbTT3LFO
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicBasickycalert.module.css"; // plasmic-import: fwFhbTT3LFO/css
import arrow233Png1Ht3Ij9Y from "./images/arrow233Png.png"; // plasmic-import: 1-HT3Ij9y/picture
import maleUser480Pxpng2EH7EoyOk2 from "./images/maleUser480Pxpng2.png"; // plasmic-import: eH7eoyOK2/picture

export const PlasmicBasickycalert__VariantProps = new Array("profileoverlay");

export const PlasmicBasickycalert__ArgProps = new Array(
  "overlaycreatorname",
  "overlaycategory",
  "overlaycreatortype",
  "errormessage",
  "overlayuserprofilepic",
  "uploadbuttonslot"
);

function PlasmicBasickycalert__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootprofileoverlay]: hasVariant(
                variants,
                "profileoverlay",
                "profileoverlay"
              )
            }
          )}
        >
          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />

          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__n9Nup)}>
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage)
              })}
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___2EoV)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__y0Ih8)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p5Shy
                  )}
                >
                  {"Basic KYC"}
                </div>
              </p.Stack>
            ) : null}
          </div>

          {(
            hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__d8Cen, {
                [sty.freeBoxprofileoverlay__d8CeniEq8C]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__yj1J, {
                    [sty.freeBoxprofileoverlay__yj1JiEq8C]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <button
                      data-plasmic-name={"backbutton"}
                      data-plasmic-override={overrides.backbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.backbutton,
                        {
                          [sty.backbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img, {
                          [sty.imgprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"37px"}
                        loading={"lazy"}
                        src={{
                          src: arrow233Png1Ht3Ij9Y,
                          fullWidth: 640,
                          fullHeight: 640,
                          aspectRatio: undefined
                        }}
                      />
                    </button>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__qZwBl, {
                    [sty.freeBoxprofileoverlay__qZwBLiEq8C]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yqNiJ,
                        {
                          [sty.textprofileoverlay__yqNiJiEq8C]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {"Manu Areraa"}
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__nLoWa, {
                      [sty.freeBoxprofileoverlay__nLoWaiEq8C]: hasVariant(
                        variants,
                        "profileoverlay",
                        "profileoverlay"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Manu Areraa",
                      value: args.overlaycreatorname,
                      className: classNames(sty.slotTargetOverlaycreatorname, {
                        [sty.slotTargetOverlaycreatornameprofileoverlay]:
                          hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                      })
                    })}
                  </div>

                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__mXpsm,
                        {
                          [sty.freeBoxprofileoverlay__mXpsmiEq8C]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hqTlf,
                          {
                            [sty.freeBoxprofileoverlay__hqTlFiEq8C]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Cooking",
                          value: args.overlaycategory,
                          className: classNames(sty.slotTargetOverlaycategory, {
                            [sty.slotTargetOverlaycategoryprofileoverlay]:
                              hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                          })
                        })}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lSpC,
                          {
                            [sty.textprofileoverlay__lSpCIEq8C]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {" | "}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nzLj7,
                          {
                            [sty.freeBoxprofileoverlay__nzLj7IEq8C]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Influencer",
                          value: args.overlaycreatortype,
                          className: classNames(
                            sty.slotTargetOverlaycreatortype,
                            {
                              [sty.slotTargetOverlaycreatortypeprofileoverlay]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )
                        })}
                      </div>

                      {(
                        hasVariant(variants, "profileoverlay", "profileoverlay")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aiKD,
                            {
                              [sty.textprofileoverlay__aiKDiEq8C]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {"|  Young Stars"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox__sv1ZW, {
                  [sty.freeBoxprofileoverlay__sv1ZWiEq8C]: hasVariant(
                    variants,
                    "profileoverlay",
                    "profileoverlay"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mif3Y)}
                      displayHeight={"290px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"290px"}
                      loading={"lazy"}
                      src={{
                        src: maleUser480Pxpng2EH7EoyOk2,
                        fullWidth: 480,
                        fullHeight: 480,
                        aspectRatio: undefined
                      }}
                    />
                  ),

                  value: args.overlayuserprofilepic
                })}
              </div>

              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x1Ysc, {
                    [sty.freeBoxprofileoverlay__x1YsciEq8C]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"loginbutton"}
                      data-plasmic-override={overrides.loginbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.loginbutton,
                        {
                          [sty.loginbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lFcWk,
                          {
                            [sty.textprofileoverlay__lFcWKiEq8C]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"signupbutton"}
                      data-plasmic-override={overrides.signupbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.signupbutton,
                        {
                          [sty.signupbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fcBwz,
                          {
                            [sty.textprofileoverlay__fcBwziEq8C]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__q1HeR, {
                      [sty.freeBoxprofileoverlay__q1HeRiEq8C]: hasVariant(
                        variants,
                        "profileoverlay",
                        "profileoverlay"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <p.Stack
                          as={"button"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            sty.button___1FV47
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zl6Rz
                            )}
                          >
                            {"Upload Profile Photo"}
                          </div>
                        </p.Stack>
                      ),

                      value: args.uploadbuttonslot
                    })}
                  </div>

                  <p.Stack
                    as={"button"}
                    data-plasmic-name={"logoutbutton"}
                    data-plasmic-override={overrides.logoutbutton}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      sty.logoutbutton,
                      {
                        [sty.logoutbuttonprofileoverlay]: hasVariant(
                          variants,
                          "profileoverlay",
                          "profileoverlay"
                        )
                      }
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nMkbt,
                        {
                          [sty.textprofileoverlay__nMkbtiEq8C]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {"Logout"}
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ntBCr)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bHsa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qFh4W
                )}
              >
                {"Please Complete Basic KYC to proceed"}
              </div>

              <button
                data-plasmic-name={"kycproceed"}
                data-plasmic-override={overrides.kycproceed}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.kycproceed
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kz322
                  )}
                >
                  {"Complete Basic KYC"}
                </div>
              </button>
            </div>
          </p.Stack>

          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox__oavks)}>
              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : true
              ) ? (
                <Navbartwo
                  data-plasmic-name={"navbartwo"}
                  data-plasmic-override={overrides.navbartwo}
                  className={classNames("__wab_instance", sty.navbartwo, {
                    [sty.navbartwoprofileoverlay]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                  lbtoggle={true}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "screenAlert",
    "backbutton",
    "img",
    "loginbutton",
    "signupbutton",
    "logoutbutton",
    "kycproceed",
    "navbartwo"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  backbutton: ["backbutton", "img"],
  img: ["img"],
  loginbutton: ["loginbutton"],
  signupbutton: ["signupbutton"],
  logoutbutton: ["logoutbutton"],
  kycproceed: ["kycproceed"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBasickycalert__ArgProps,
      internalVariantPropNames: PlasmicBasickycalert__VariantProps
    });

    return PlasmicBasickycalert__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBasickycalert";
  } else {
    func.displayName = `PlasmicBasickycalert.${nodeName}`;
  }
  return func;
}

export const PlasmicBasickycalert = Object.assign(
  // Top-level PlasmicBasickycalert renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    backbutton: makeNodeComponent("backbutton"),
    img: makeNodeComponent("img"),
    loginbutton: makeNodeComponent("loginbutton"),
    signupbutton: makeNodeComponent("signupbutton"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    kycproceed: makeNodeComponent("kycproceed"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicBasickycalert
    internalVariantProps: PlasmicBasickycalert__VariantProps,
    internalArgProps: PlasmicBasickycalert__ArgProps
  }
);

export default PlasmicBasickycalert;
/* prettier-ignore-end */
