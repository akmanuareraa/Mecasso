// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: mLSdJqxaDOP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicMyportfoliocardone.module.css"; // plasmic-import: mLSdJqxaDOP/css
import image2YOuiknZ8 from "./images/image2.png"; // plasmic-import: yOuiknZ-8/picture

export const PlasmicMyportfoliocardone__VariantProps = new Array();

export const PlasmicMyportfoliocardone__ArgProps = new Array();

function PlasmicMyportfoliocardone__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__v5KIy)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__uzOy)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"30px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                src={{
                  src: image2YOuiknZ8,
                  fullWidth: 500,
                  fullHeight: 750,
                  aspectRatio: undefined
                }}
              />
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__c1RDc)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dXqYx
              )}
            >
              {"PBO"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__erQa6
              )}
            >
              {"Pablo"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__hqIbJ)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__opgJu
          )}
        >
          {"BAL"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mvDoV
          )}
        >
          {"1120"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__odW9L)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__kt0Wr)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__n9Pll
            )}
          >
            {"BUY"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__iraYq)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iQjW
            )}
          >
            {"SEND"}
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMyportfoliocardone__ArgProps,
      internalVariantPropNames: PlasmicMyportfoliocardone__VariantProps
    });

    return PlasmicMyportfoliocardone__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyportfoliocardone";
  } else {
    func.displayName = `PlasmicMyportfoliocardone.${nodeName}`;
  }
  return func;
}

export const PlasmicMyportfoliocardone = Object.assign(
  // Top-level PlasmicMyportfoliocardone renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicMyportfoliocardone
    internalVariantProps: PlasmicMyportfoliocardone__VariantProps,
    internalArgProps: PlasmicMyportfoliocardone__ArgProps
  }
);

export default PlasmicMyportfoliocardone;
/* prettier-ignore-end */
