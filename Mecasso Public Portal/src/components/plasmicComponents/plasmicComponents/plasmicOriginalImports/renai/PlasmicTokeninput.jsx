// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: YryvDymI0QD
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicTokeninput.module.css"; // plasmic-import: YryvDymI0QD/css

export const PlasmicTokeninput__VariantProps = new Array();

export const PlasmicTokeninput__ArgProps = new Array();

function PlasmicTokeninput__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootFocus, triggerRootFocusProps] = useTrigger("useFocused", {});
  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: true
    }
  );

  const triggers = {
    focusActiveHoverFocusVisible_root:
      isRootFocus && isRootActive && isRootHover && isRootFocusVisible
  };

  return (
    <input
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.input,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.root___focused__pressed__hover__focusVisible__notDisabled]:
            triggers.focusActiveHoverFocusVisible_root
        }
      )}
      placeholder={"Token Amount to Buy"}
      size={1}
      type={"text"}
      data-plasmic-trigger-props={[
        triggerRootFocusProps,
        triggerRootActiveProps,
        triggerRootHoverProps,
        triggerRootFocusVisibleProps
      ]}
    />
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTokeninput__ArgProps,
      internalVariantPropNames: PlasmicTokeninput__VariantProps
    });

    return PlasmicTokeninput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTokeninput";
  } else {
    func.displayName = `PlasmicTokeninput.${nodeName}`;
  }
  return func;
}

export const PlasmicTokeninput = Object.assign(
  // Top-level PlasmicTokeninput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTokeninput
    internalVariantProps: PlasmicTokeninput__VariantProps,
    internalArgProps: PlasmicTokeninput__ArgProps
  }
);

export default PlasmicTokeninput;
/* prettier-ignore-end */
