// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: 4p-b-v7RCd
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import LbCategoryTypeButton1 from "../../../LbCategoryTypeButton1"; // plasmic-import: CsRG6SHUQl/component
import LbCategoryTypeButton2 from "../../../LbCategoryTypeButton2"; // plasmic-import: 15szqV_nv6/component
import Categoryscrollbar from "../../../Categoryscrollbar"; // plasmic-import: oTgTnp5r1lc/component
import LbIndividualCard from "../../../LbIndividualCard"; // plasmic-import: Kbrkie5P0-A/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicHomePage.module.css"; // plasmic-import: 4p-b-v7RCd/css
import image2YOuiknZ8 from "./images/image2.png"; // plasmic-import: yOuiknZ-8/picture
import image3X81IJz2XM from "./images/image3.png"; // plasmic-import: x81iJZ2xM/picture
import image4KtHsu0HVu from "./images/image4.png"; // plasmic-import: KTHsu0hVU/picture
import image6NOWvjv1Ix from "./images/image6.png"; // plasmic-import: nOWvjv1Ix/picture
import image7T28Zbh57F from "./images/image7.png"; // plasmic-import: T28Zbh57F/picture
import image8Ha19JMDvt from "./images/image8.png"; // plasmic-import: HA19jMDvt/picture
import image9Gn5CLoXiu from "./images/image9.png"; // plasmic-import: gn5cLoXIU/picture
import image10MpIdmHnq from "./images/image10.png"; // plasmic-import: MpIdmHNQ-/picture
import image11SGlvfvWa7 from "./images/image11.png"; // plasmic-import: sGlvfvWa7/picture
import image12Ll3Hd0Qfu from "./images/image12.png"; // plasmic-import: Ll3hd0qfu/picture
import image13Nqwrsak57 from "./images/image13.png"; // plasmic-import: Nqwrsak57/picture
import image14DxTEqnrA from "./images/image14.png"; // plasmic-import: dxTEqnrA_/picture
import image15RUtFXzAwV from "./images/image15.png"; // plasmic-import: RUtFXzAwV/picture
import arrow233Png1Ht3Ij9Y from "./images/arrow233Png.png"; // plasmic-import: 1-HT3Ij9y/picture
import maleUser480Pxpng2EH7EoyOk2 from "./images/maleUser480Pxpng2.png"; // plasmic-import: eH7eoyOK2/picture

export const PlasmicHomePage__VariantProps = new Array(
  "profileoverlay",
  "authoverlay",
  "loggedin",
  "notloggedin",
  "emailnotverified"
);

export const PlasmicHomePage__ArgProps = new Array(
  "imagetwo",
  "leaderboardstack",
  "imageone",
  "imagethree",
  "contentcreatorslot",
  "overlaycreatorname",
  "overlaycategory",
  "overlayuserprofilepic",
  "errormessage",
  "uploadbuttonslot"
);

function PlasmicHomePage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootauthoverlay]: hasVariant(
                variants,
                "authoverlay",
                "authoverlay"
              ),

              [sty.rootemailnotverified]: hasVariant(
                variants,
                "emailnotverified",
                "emailnotverified"
              ),

              [sty.rootloggedin]: hasVariant(variants, "loggedin", "loggedin"),
              [sty.rootnotloggedin]: hasVariant(
                variants,
                "notloggedin",
                "notloggedin"
              ),

              [sty.rootprofileoverlay]: hasVariant(
                variants,
                "profileoverlay",
                "profileoverlay"
              )
            }
          )}
        >
          {(
            hasVariant(variants, "emailnotverified", "emailnotverified")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__z6FpN, {
                [sty.freeBoxemailnotverified__z6FpNZt0O3]: hasVariant(
                  variants,
                  "emailnotverified",
                  "emailnotverified"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage)
              })}
            </div>
          ) : null}
          {true ? (
            <TopNavBar
              data-plasmic-name={"topNavBar"}
              data-plasmic-override={overrides.topNavBar}
              className={classNames("__wab_instance", sty.topNavBar, {
                [sty.topNavBaremailnotverified]: hasVariant(
                  variants,
                  "emailnotverified",
                  "emailnotverified"
                ),

                [sty.topNavBarloggedin]: hasVariant(
                  variants,
                  "loggedin",
                  "loggedin"
                ),

                [sty.topNavBarnotloggedin]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                )
              })}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              className={classNames("__wab_instance", sty.screenAlert__mtPv)}
            />
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__vYqyq)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0AdXk)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dy1GD
                    )}
                  >
                    {"Leaderboard"}
                  </div>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cVnH, {
                [sty.freeBoxnotloggedin__cVnHbxvu]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                )
              })}
            >
              <LbCategoryTypeButton1
                data-plasmic-name={"categorywisebutton"}
                data-plasmic-override={overrides.categorywisebutton}
                className={classNames(
                  "__wab_instance",
                  sty.categorywisebutton,
                  {
                    [sty.categorywisebuttonloggedin]: hasVariant(
                      variants,
                      "loggedin",
                      "loggedin"
                    ),

                    [sty.categorywisebuttonnotloggedin]: hasVariant(
                      variants,
                      "notloggedin",
                      "notloggedin"
                    )
                  }
                )}
                selected={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2WAgN,
                    {
                      [sty.textloggedin___2WAgN4FPZ]: hasVariant(
                        variants,
                        "loggedin",
                        "loggedin"
                      ),

                      [sty.textnotloggedin___2WAgNbxvu]: hasVariant(
                        variants,
                        "notloggedin",
                        "notloggedin"
                      )
                    }
                  )}
                >
                  {"Category-wise"}
                </div>
              </LbCategoryTypeButton1>

              <LbCategoryTypeButton2
                data-plasmic-name={"creatorwisebutton"}
                data-plasmic-override={overrides.creatorwisebutton}
                className={classNames("__wab_instance", sty.creatorwisebutton, {
                  [sty.creatorwisebuttonloggedin]: hasVariant(
                    variants,
                    "loggedin",
                    "loggedin"
                  ),

                  [sty.creatorwisebuttonnotloggedin]: hasVariant(
                    variants,
                    "notloggedin",
                    "notloggedin"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3X7KZ
                  )}
                >
                  {"Creator-wise"}
                </div>
              </LbCategoryTypeButton2>
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox__muEpd)}>
              <Categoryscrollbar
                data-plasmic-name={"catscrollbar"}
                data-plasmic-override={overrides.catscrollbar}
                className={classNames("__wab_instance", sty.catscrollbar, {
                  [sty.catscrollbarloggedin]: hasVariant(
                    variants,
                    "loggedin",
                    "loggedin"
                  ),

                  [sty.catscrollbarnotloggedin]: hasVariant(
                    variants,
                    "notloggedin",
                    "notloggedin"
                  )
                })}
                creatormode={true}
                loggedin={
                  hasVariant(variants, "loggedin", "loggedin")
                    ? true
                    : undefined
                }
              />
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ygqAt, {
                [sty.freeBoxloggedin__ygqAt4FPZ]: hasVariant(
                  variants,
                  "loggedin",
                  "loggedin"
                ),

                [sty.freeBoxnotloggedin__ygqAtBxvu]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                )
              })}
            >
              {true ? (
                <div
                  data-plasmic-name={"secondpodium"}
                  data-plasmic-override={overrides.secondpodium}
                  className={classNames(projectcss.all, sty.secondpodium)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iEEx)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hfIcz)}
                          displayHeight={"87px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"87px"}
                          loading={"lazy"}
                          src={{
                            src: image2YOuiknZ8,
                            fullWidth: 500,
                            fullHeight: 750,
                            aspectRatio: undefined
                          }}
                        />
                      ),

                      value: args.imagetwo
                    })}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__pzZn7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wTp5K
                      )}
                    >
                      {"2"}
                    </div>
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"firstpodium"}
                  data-plasmic-override={overrides.firstpodium}
                  className={classNames(projectcss.all, sty.firstpodium)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hzX3O)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__riZs2)}
                          displayHeight={"129px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"129px"}
                          loading={"lazy"}
                          src={{
                            src: image3X81IJz2XM,
                            fullWidth: 500,
                            fullHeight: 333,
                            aspectRatio: undefined
                          }}
                        />
                      ),

                      value: args.imageone
                    })}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__x9HAf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sytFa
                      )}
                    >
                      {"1"}
                    </div>
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"thirdpodium"}
                  data-plasmic-override={overrides.thirdpodium}
                  className={classNames(projectcss.all, sty.thirdpodium)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tLUr)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__shV8P)}
                          displayHeight={"87px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"87px"}
                          loading={"lazy"}
                          src={{
                            src: image4KtHsu0HVu,
                            fullWidth: 500,
                            fullHeight: 750,
                            aspectRatio: undefined
                          }}
                        />
                      ),

                      value: args.imagethree
                    })}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__jBCjk)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wJp8O
                      )}
                    >
                      {"3"}
                    </div>
                  </div>
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nzkoh, {
                [sty.freeBoxloggedin__nzkoh4FPZ]: hasVariant(
                  variants,
                  "loggedin",
                  "loggedin"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <LbIndividualCard
                      className={classNames(
                        "__wab_instance",
                        sty.lbIndividualCard__ckGIu
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__m5Xhg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ybW9W
                        )}
                      >
                        {"▲"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__lGcwS)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image6NOWvjv1Ix,
                          fullWidth: 500,
                          fullHeight: 750,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__obuzK
                        )}
                      >
                        {"Andres Iniesta"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n7D5V
                        )}
                      >
                        {"INI"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u8JQt
                        )}
                      >
                        {"47822"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6YtRj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ifU4
                        )}
                      >
                        {"▼"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__z7Pi)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image7T28Zbh57F,
                          fullWidth: 500,
                          fullHeight: 625,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7XUz
                        )}
                      >
                        {"Ronaldinho"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fKzUh
                        )}
                      >
                        {"RHO"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Ke5K
                        )}
                      >
                        {"2541"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jW9Ao)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oKcsc
                        )}
                      >
                        {"▼"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__bheAk)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image8Ha19JMDvt,
                          fullWidth: 500,
                          fullHeight: 333,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9Rl2J
                        )}
                      >
                        {"Mbappe"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0APpP
                        )}
                      >
                        {"MBP"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__idhRb
                        )}
                      >
                        {"2540"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0K1Md
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pKBwa
                        )}
                      >
                        {"▲"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___6XsEm)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image9Gn5CLoXiu,
                          fullWidth: 500,
                          fullHeight: 756,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Ar7C
                        )}
                      >
                        {"Ronaldo"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4UTrz
                        )}
                      >
                        {"CRO"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iuR
                        )}
                      >
                        {"2000"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3EcOc
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tpQp3
                        )}
                      >
                        {"▼"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__bfhro)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image10MpIdmHnq,
                          fullWidth: 500,
                          fullHeight: 625,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k7Zo0
                        )}
                      >
                        {"Maradona"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5GNgY
                        )}
                      >
                        {"MRDO"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tjiI
                        )}
                      >
                        {"1901"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rCblm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gf324
                        )}
                      >
                        {"▲"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__oF84P)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image11SGlvfvWa7,
                          fullWidth: 500,
                          fullHeight: 432,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lt5I2
                        )}
                      >
                        {"De Jong"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___937VN
                        )}
                      >
                        {"DJO"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ecbAd
                        )}
                      >
                        {"1785"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4YvQl
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6XlxU
                        )}
                      >
                        {"▲"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__tr5T0)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image12Ll3Hd0Qfu,
                          fullWidth: 500,
                          fullHeight: 333,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9Zt2J
                        )}
                      >
                        {"Phil Phoden"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aalSi
                        )}
                      >
                        {"PHO"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2G9UU
                        )}
                      >
                        {"1510"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__u8Y9X)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o594N
                        )}
                      >
                        {"▼"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ajWA)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image13Nqwrsak57,
                          fullWidth: 500,
                          fullHeight: 750,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uWZmb
                        )}
                      >
                        {"De Ligt"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ev4Fj
                        )}
                      >
                        {"DLI"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k8GVo
                        )}
                      >
                        {"1200"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qe7IM)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cl37U
                        )}
                      >
                        {"▼"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___1YkHa)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image14DxTEqnrA,
                          fullWidth: 500,
                          fullHeight: 750,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qRmV
                        )}
                      >
                        {"Van Dijk"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jqFqs
                        )}
                      >
                        {"VDK"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x9U
                        )}
                      >
                        {"1012"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__y3My8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qTJox
                        )}
                      >
                        {"▲"}
                      </div>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__jnjU)}
                        displayHeight={"45px"}
                        displayMaxHeight={"45px"}
                        displayMaxWidth={"45px"}
                        displayMinHeight={"45px"}
                        displayMinWidth={"45px"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={{
                          src: image15RUtFXzAwV,
                          fullWidth: 500,
                          fullHeight: 333,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lrGdh
                        )}
                      >
                        {"You"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lWPe0
                        )}
                      >
                        {"MAN"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sXoaC
                        )}
                      >
                        {"845"}
                      </div>
                    </p.Stack>
                  </React.Fragment>
                ),

                value: args.leaderboardstack
              })}
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___0D02C, {
                [sty.freeBoxprofileoverlay___0D02CighMr]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qoZU)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qy4WN
                    )}
                  >
                    {"Content Creators"}
                  </div>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__pKv7R, {
                [sty.freeBoxauthoverlay__pKv7R2End]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.freeBoxprofileoverlay__pKv7RighMr]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__cUw6W, {
                    [sty.freeBoxauthoverlay__cUw6W2End]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__cUw6WighMr]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <button
                      data-plasmic-name={"backbutton"}
                      data-plasmic-override={overrides.backbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.backbutton,
                        {
                          [sty.backbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.backbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img, {
                          [sty.imgauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.imgprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"37px"}
                        loading={"lazy"}
                        src={{
                          src: arrow233Png1Ht3Ij9Y,
                          fullWidth: 640,
                          fullHeight: 640,
                          aspectRatio: undefined
                        }}
                      />
                    </button>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__ypRzF, {
                    [sty.freeBoxauthoverlay__ypRzF2End]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__ypRzFighMr]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3R79Q,
                        {
                          [sty.textauthoverlay___3R79Q2End]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.textprofileoverlay___3R79QighMr]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {hasVariant(variants, "authoverlay", "authoverlay")
                        ? "Renai"
                        : "Manu Areraa"}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6FsLs,
                        {
                          [sty.freeBoxauthoverlay___6FsLs2End]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay___6FsLsighMr]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Manu Areraa",
                        value: args.overlaycreatorname,
                        className: classNames(
                          sty.slotTargetOverlaycreatorname,
                          {
                            [sty.slotTargetOverlaycreatornameauthoverlay]:
                              hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                            [sty.slotTargetOverlaycreatornameprofileoverlay]:
                              hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                          }
                        )
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__sj0D5,
                        {
                          [sty.freeBoxauthoverlay__sj0D52End]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__sj0D5IghMr]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c7Vq2,
                            {
                              [sty.freeBoxauthoverlay__c7Vq22End]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay__c7Vq2IghMr]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Cooking",
                            value: args.overlaycategory,
                            className: classNames(
                              sty.slotTargetOverlaycategory,
                              {
                                [sty.slotTargetOverlaycategoryauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycategoryprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "profileoverlay", "profileoverlay")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sjZff,
                            {
                              [sty.textprofileoverlay__sjZffighMr]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {"|  Young Stars"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? false
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__tSZs, {
                    [sty.freeBoxauthoverlay__tSZs2End]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__tSZsighMr]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__s1Jua)}
                        displayHeight={"290px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"290px"}
                        loading={"lazy"}
                        src={{
                          src: maleUser480Pxpng2EH7EoyOk2,
                          fullWidth: 480,
                          fullHeight: 480,
                          aspectRatio: undefined
                        }}
                      />
                    ),

                    value: args.overlayuserprofilepic
                  })}
                </div>
              ) : null}
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zqgbn, {
                    [sty.freeBoxauthoverlay__zqgbn2End]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__zqgbnighMr]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"loginbutton"}
                      data-plasmic-override={overrides.loginbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.loginbutton,
                        {
                          [sty.loginbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.loginbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eio9A,
                          {
                            [sty.textauthoverlay__eio9A2End]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__eio9AighMr]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "Login"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"signupbutton"}
                      data-plasmic-override={overrides.signupbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.signupbutton,
                        {
                          [sty.signupbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.signupbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u7VhV,
                          {
                            [sty.textauthoverlay__u7VhV2End]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__u7VhVighMr]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "SignUp"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pbQz, {
                        [sty.freeBoxauthoverlay__pbQz2End]: hasVariant(
                          variants,
                          "authoverlay",
                          "authoverlay"
                        ),

                        [sty.freeBoxprofileoverlay__pbQZighMr]: hasVariant(
                          variants,
                          "profileoverlay",
                          "profileoverlay"
                        )
                      })}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__y3Fzo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vsDaK
                              )}
                            >
                              {"Upload Profile Photo"}
                            </div>
                          </p.Stack>
                        ),

                        value: args.uploadbuttonslot
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"logoutbutton"}
                      data-plasmic-override={overrides.logoutbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.logoutbutton,
                        {
                          [sty.logoutbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.logoutbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k5ANr,
                          {
                            [sty.textauthoverlay__k5ANr2End]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__k5ANrighMr]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Logout"}
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <ScreenAlert
              className={classNames("__wab_instance", sty.screenAlert__uCAo, {
                [sty.screenAlertprofileoverlay__uCAoighMr]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            />
          ) : null}
          {true ? (
            <ScreenAlert
              className={classNames("__wab_instance", sty.screenAlert__gxUpO, {
                [sty.screenAlertprofileoverlay__gxUpOighMr]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dEph, {
                [sty.freeBoxnotloggedin__dEphBxvu]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                ),

                [sty.freeBoxprofileoverlay__dEphighMr]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.contentcreatorslot
              })}
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t78Ug, {
                [sty.freeBoxnotloggedin__t78Ugbxvu]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                )
              })}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <Button
                  data-plasmic-name={"viewmorecreatorsbutton"}
                  data-plasmic-override={overrides.viewmorecreatorsbutton}
                  className={classNames(
                    "__wab_instance",
                    sty.viewmorecreatorsbutton,
                    {
                      [sty.viewmorecreatorsbuttonloggedin]: hasVariant(
                        variants,
                        "loggedin",
                        "loggedin"
                      ),

                      [sty.viewmorecreatorsbuttonnotloggedin]: hasVariant(
                        variants,
                        "notloggedin",
                        "notloggedin"
                      )
                    }
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gfGmi,
                      {
                        [sty.textloggedin__gfGmi4FPZ]: hasVariant(
                          variants,
                          "loggedin",
                          "loggedin"
                        )
                      }
                    )}
                  >
                    {"View More Creators"}
                  </div>
                </Button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <Button
                  data-plasmic-name={"creatorsportalbutton"}
                  data-plasmic-override={overrides.creatorsportalbutton}
                  className={classNames(
                    "__wab_instance",
                    sty.creatorsportalbutton,
                    {
                      [sty.creatorsportalbuttonloggedin]: hasVariant(
                        variants,
                        "loggedin",
                        "loggedin"
                      ),

                      [sty.creatorsportalbuttonnotloggedin]: hasVariant(
                        variants,
                        "notloggedin",
                        "notloggedin"
                      )
                    }
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eS7Hm,
                      {
                        [sty.textloggedin__eS7Hm4FPZ]: hasVariant(
                          variants,
                          "loggedin",
                          "loggedin"
                        )
                      }
                    )}
                  >
                    {"View More Creators"}
                  </div>
                </Button>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(variants, "notloggedin", "notloggedin")
              ? false
              : hasVariant(variants, "authoverlay", "authoverlay")
              ? false
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? false
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <Navbartwo
              data-plasmic-name={"navbartwo"}
              data-plasmic-override={overrides.navbartwo}
              className={classNames("__wab_instance", sty.navbartwo, {
                [sty.navbartwoauthoverlay]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.navbartwonotloggedin]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                ),

                [sty.navbartwoprofileoverlay]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "categorywisebutton",
    "creatorwisebutton",
    "catscrollbar",
    "secondpodium",
    "firstpodium",
    "thirdpodium",
    "backbutton",
    "img",
    "loginbutton",
    "signupbutton",
    "logoutbutton",
    "viewmorecreatorsbutton",
    "creatorsportalbutton",
    "navbartwo"
  ],

  topNavBar: ["topNavBar"],
  categorywisebutton: ["categorywisebutton"],
  creatorwisebutton: ["creatorwisebutton"],
  catscrollbar: ["catscrollbar"],
  secondpodium: ["secondpodium"],
  firstpodium: ["firstpodium"],
  thirdpodium: ["thirdpodium"],
  backbutton: ["backbutton", "img"],
  img: ["img"],
  loginbutton: ["loginbutton"],
  signupbutton: ["signupbutton"],
  logoutbutton: ["logoutbutton"],
  viewmorecreatorsbutton: ["viewmorecreatorsbutton"],
  creatorsportalbutton: ["creatorsportalbutton"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomePage__ArgProps,
      internalVariantPropNames: PlasmicHomePage__VariantProps
    });

    return PlasmicHomePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomePage";
  } else {
    func.displayName = `PlasmicHomePage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomePage = Object.assign(
  // Top-level PlasmicHomePage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    categorywisebutton: makeNodeComponent("categorywisebutton"),
    creatorwisebutton: makeNodeComponent("creatorwisebutton"),
    catscrollbar: makeNodeComponent("catscrollbar"),
    secondpodium: makeNodeComponent("secondpodium"),
    firstpodium: makeNodeComponent("firstpodium"),
    thirdpodium: makeNodeComponent("thirdpodium"),
    backbutton: makeNodeComponent("backbutton"),
    img: makeNodeComponent("img"),
    loginbutton: makeNodeComponent("loginbutton"),
    signupbutton: makeNodeComponent("signupbutton"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    viewmorecreatorsbutton: makeNodeComponent("viewmorecreatorsbutton"),
    creatorsportalbutton: makeNodeComponent("creatorsportalbutton"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicHomePage
    internalVariantProps: PlasmicHomePage__VariantProps,
    internalArgProps: PlasmicHomePage__ArgProps
  }
);

export default PlasmicHomePage;
/* prettier-ignore-end */
