// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: fXH2_Fxbhwf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicNavlb.module.css"; // plasmic-import: fXH2_Fxbhwf/css
import LeaderboardsvgIcon from "./icons/PlasmicIcon__Leaderboardsvg"; // plasmic-import: E2qL9DKvG/icon

export const PlasmicNavlb__VariantProps = new Array(
  "lbtoggle",
  "feedtoggle",
  "portfoliotoggle",
  "txntoggle",
  "proposaltoggle"
);

export const PlasmicNavlb__ArgProps = new Array("children", "slot");

function PlasmicNavlb__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootfeedtoggle]: hasVariant(
            variants,
            "feedtoggle",
            "feedtoggle"
          ),

          [sty.rootlbtoggle]: hasVariant(variants, "lbtoggle", "lbtoggle"),
          [sty.rootportfoliotoggle]: hasVariant(
            variants,
            "portfoliotoggle",
            "portfoliotoggle"
          ),

          [sty.rootproposaltoggle]: hasVariant(
            variants,
            "proposaltoggle",
            "proposaltoggle"
          ),

          [sty.roottxntoggle]: hasVariant(variants, "txntoggle", "txntoggle")
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mOeGe, {
          [sty.freeBoxfeedtoggle__mOeGeufZQq]: hasVariant(
            variants,
            "feedtoggle",
            "feedtoggle"
          ),

          [sty.freeBoxlbtoggle__mOeGes7Lma]: hasVariant(
            variants,
            "lbtoggle",
            "lbtoggle"
          ),

          [sty.freeBoxportfoliotoggle__mOeGeTk1Z]: hasVariant(
            variants,
            "portfoliotoggle",
            "portfoliotoggle"
          ),

          [sty.freeBoxproposaltoggle__mOeGeIpkM1]: hasVariant(
            variants,
            "proposaltoggle",
            "proposaltoggle"
          ),

          [sty.freeBoxtxntoggle__mOeGeq5PaW]: hasVariant(
            variants,
            "txntoggle",
            "txntoggle"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <LeaderboardsvgIcon
              className={classNames(projectcss.all, sty.svg___3Gq2)}
              role={"img"}
            />
          ),

          value: args.slot
        })}

        <div
          className={classNames(projectcss.all, sty.freeBox__adHCj, {
            [sty.freeBoxfeedtoggle__adHCjufZQq]: hasVariant(
              variants,
              "feedtoggle",
              "feedtoggle"
            ),

            [sty.freeBoxportfoliotoggle__adHCjTk1Z]: hasVariant(
              variants,
              "portfoliotoggle",
              "portfoliotoggle"
            ),

            [sty.freeBoxproposaltoggle__adHCjIpkM1]: hasVariant(
              variants,
              "proposaltoggle",
              "proposaltoggle"
            ),

            [sty.freeBoxtxntoggle__adHCjq5PaW]: hasVariant(
              variants,
              "txntoggle",
              "txntoggle"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Leaderboard",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenfeedtoggle]: hasVariant(
                variants,
                "feedtoggle",
                "feedtoggle"
              ),

              [sty.slotTargetChildrenportfoliotoggle]: hasVariant(
                variants,
                "portfoliotoggle",
                "portfoliotoggle"
              ),

              [sty.slotTargetChildrenproposaltoggle]: hasVariant(
                variants,
                "proposaltoggle",
                "proposaltoggle"
              ),

              [sty.slotTargetChildrentxntoggle]: hasVariant(
                variants,
                "txntoggle",
                "txntoggle"
              )
            })
          })}
        </div>
      </p.Stack>

      {(
        hasVariant(variants, "proposaltoggle", "proposaltoggle")
          ? true
          : hasVariant(variants, "txntoggle", "txntoggle")
          ? true
          : hasVariant(variants, "portfoliotoggle", "portfoliotoggle")
          ? true
          : hasVariant(variants, "feedtoggle", "feedtoggle")
          ? true
          : hasVariant(variants, "lbtoggle", "lbtoggle")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___7C8TP, {
            [sty.freeBoxfeedtoggle___7C8TPufZQq]: hasVariant(
              variants,
              "feedtoggle",
              "feedtoggle"
            ),

            [sty.freeBoxlbtoggle___7C8TPs7Lma]: hasVariant(
              variants,
              "lbtoggle",
              "lbtoggle"
            ),

            [sty.freeBoxportfoliotoggle___7C8TPtk1Z]: hasVariant(
              variants,
              "portfoliotoggle",
              "portfoliotoggle"
            ),

            [sty.freeBoxproposaltoggle___7C8TPIpkM1]: hasVariant(
              variants,
              "proposaltoggle",
              "proposaltoggle"
            ),

            [sty.freeBoxtxntoggle___7C8TPq5PaW]: hasVariant(
              variants,
              "txntoggle",
              "txntoggle"
            )
          })}
        />
      ) : null}
      {(
        hasVariant(variants, "proposaltoggle", "proposaltoggle")
          ? true
          : hasVariant(variants, "txntoggle", "txntoggle")
          ? true
          : hasVariant(variants, "portfoliotoggle", "portfoliotoggle")
          ? true
          : hasVariant(variants, "feedtoggle", "feedtoggle")
          ? true
          : hasVariant(variants, "lbtoggle", "lbtoggle")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__d27Fg, {
            [sty.freeBoxfeedtoggle__d27FGufZQq]: hasVariant(
              variants,
              "feedtoggle",
              "feedtoggle"
            ),

            [sty.freeBoxlbtoggle__d27FGs7Lma]: hasVariant(
              variants,
              "lbtoggle",
              "lbtoggle"
            ),

            [sty.freeBoxportfoliotoggle__d27Fgtk1Z]: hasVariant(
              variants,
              "portfoliotoggle",
              "portfoliotoggle"
            ),

            [sty.freeBoxproposaltoggle__d27FgIpkM1]: hasVariant(
              variants,
              "proposaltoggle",
              "proposaltoggle"
            ),

            [sty.freeBoxtxntoggle__d27FGq5PaW]: hasVariant(
              variants,
              "txntoggle",
              "txntoggle"
            )
          })}
        />
      ) : null}
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavlb__ArgProps,
      internalVariantPropNames: PlasmicNavlb__VariantProps
    });

    return PlasmicNavlb__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavlb";
  } else {
    func.displayName = `PlasmicNavlb.${nodeName}`;
  }
  return func;
}

export const PlasmicNavlb = Object.assign(
  // Top-level PlasmicNavlb renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicNavlb
    internalVariantProps: PlasmicNavlb__VariantProps,
    internalArgProps: PlasmicNavlb__ArgProps
  }
);

export default PlasmicNavlb;
/* prettier-ignore-end */
