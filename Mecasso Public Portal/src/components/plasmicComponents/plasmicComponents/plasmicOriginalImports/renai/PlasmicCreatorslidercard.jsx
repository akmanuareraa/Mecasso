// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: 4gWztdw3F8y
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicCreatorslidercard.module.css"; // plasmic-import: 4gWztdw3F8y/css
import image17NKeetk24K from "./images/image17.png"; // plasmic-import: nKeetk24K/picture

export const PlasmicCreatorslidercard__VariantProps = new Array();

export const PlasmicCreatorslidercard__ArgProps = new Array(
  "creatorname",
  "tokensymbol",
  "tokenprice",
  "category",
  "image",
  "creatortype"
);

function PlasmicCreatorslidercard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"cardbutton"}
      data-plasmic-override={overrides.cardbutton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.cardbutton
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__n91R)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__n5RuK)}
                displayHeight={"80px"}
                displayMaxHeight={"80px"}
                displayMaxWidth={"80px"}
                displayMinHeight={"80px"}
                displayMinWidth={"80px"}
                displayWidth={"80px"}
                loading={"lazy"}
                src={{
                  src: image17NKeetk24K,
                  fullWidth: 500,
                  fullHeight: 333,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.image
          })}
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__oT88Q)}>
        {p.renderPlasmicSlot({
          defaultContents: "Anne Mathe",
          value: args.creatorname,
          className: classNames(sty.slotTargetCreatorname)
        })}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bi8Al)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___5VzmA)}>
          {p.renderPlasmicSlot({
            defaultContents: "AME",
            value: args.tokensymbol,
            className: classNames(sty.slotTargetTokensymbol)
          })}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tEiH
          )}
        >
          {"-"}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__v1EeX)}>
          {p.renderPlasmicSlot({
            defaultContents: "1.44",
            value: args.tokenprice,
            className: classNames(sty.slotTargetTokenprice)
          })}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__eB9Vx
          )}
        >
          {"$"}
        </div>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__nWbmv)}>
        {p.renderPlasmicSlot({
          defaultContents: "Cooking",
          value: args.category,
          className: classNames(sty.slotTargetCategory)
        })}
      </div>

      {false ? (
        <div className={classNames(projectcss.all, sty.freeBox__jnFq3)}>
          {p.renderPlasmicSlot({
            defaultContents: "Cooking",
            value: args.creatortype,
            className: classNames(sty.slotTargetCreatortype)
          })}
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  cardbutton: ["cardbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCreatorslidercard__ArgProps,
      internalVariantPropNames: PlasmicCreatorslidercard__VariantProps
    });

    return PlasmicCreatorslidercard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cardbutton") {
    func.displayName = "PlasmicCreatorslidercard";
  } else {
    func.displayName = `PlasmicCreatorslidercard.${nodeName}`;
  }
  return func;
}

export const PlasmicCreatorslidercard = Object.assign(
  // Top-level PlasmicCreatorslidercard renders the root element
  makeNodeComponent("cardbutton"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCreatorslidercard
    internalVariantProps: PlasmicCreatorslidercard__VariantProps,
    internalArgProps: PlasmicCreatorslidercard__ArgProps
  }
);

export default PlasmicCreatorslidercard;
/* prettier-ignore-end */
