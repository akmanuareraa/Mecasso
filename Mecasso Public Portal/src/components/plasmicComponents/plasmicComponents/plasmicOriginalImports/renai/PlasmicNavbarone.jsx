// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: g-JTfsy1AV8
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbutton from "../../../Navbutton"; // plasmic-import: bXzPLl1BCFu/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicNavbarone.module.css"; // plasmic-import: g-JTfsy1AV8/css
import postssvgHElBxCFouW from "./images/postssvg.svg"; // plasmic-import: HElBxCFouW/picture
import portfoliopng3L0Z4TZbw from "./images/portfoliopng3.png"; // plasmic-import: L-0z4TZbw/picture
import transactionspngVTd0Yccwe from "./images/transactionspng.png"; // plasmic-import: vTD0yccwe/picture
import proposalspngZc5VYhnyk from "./images/proposalspng.png"; // plasmic-import: Zc5vYHNYK/picture

export const PlasmicNavbarone__VariantProps = new Array(
  "notloggedin",
  "profileoverlay",
  "authoverlay"
);

export const PlasmicNavbarone__ArgProps = new Array();

function PlasmicNavbarone__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    hasVariant(variants, "authoverlay", "authoverlay")
      ? false
      : hasVariant(variants, "profileoverlay", "profileoverlay")
      ? false
      : hasVariant(variants, "notloggedin", "notloggedin")
      ? false
      : true
  ) ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootauthoverlay]: hasVariant(
            variants,
            "authoverlay",
            "authoverlay"
          ),

          [sty.rootnotloggedin]: hasVariant(
            variants,
            "notloggedin",
            "notloggedin"
          ),

          [sty.rootprofileoverlay]: hasVariant(
            variants,
            "profileoverlay",
            "profileoverlay"
          )
        }
      )}
    >
      <Navbutton
        className={classNames("__wab_instance", sty.navbutton___2TZp)}
        selected={true}
      />

      <Navbutton
        className={classNames("__wab_instance", sty.navbutton__kcfz5)}
        slot={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gMyPp
            )}
          >
            {"Feed"}
          </div>
        }
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__sCyQq)}
          displayHeight={"47px"}
          displayMaxHeight={"47px"}
          displayMaxWidth={"47px"}
          displayMinHeight={"47px"}
          displayMinWidth={"0"}
          displayWidth={"47px"}
          loading={"lazy"}
          src={{
            src: postssvgHElBxCFouW,
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />
      </Navbutton>

      <Navbutton
        className={classNames("__wab_instance", sty.navbutton__pDkyb)}
        slot={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__roixf
            )}
          >
            {"Portfolio"}
          </div>
        }
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__fut70)}
          displayHeight={"47px"}
          displayMaxHeight={"47px"}
          displayMaxWidth={"47px"}
          displayMinHeight={"47px"}
          displayMinWidth={"0"}
          displayWidth={"47px"}
          loading={"lazy"}
          src={{
            src: portfoliopng3L0Z4TZbw,
            fullWidth: 60,
            fullHeight: 60,
            aspectRatio: undefined
          }}
        />
      </Navbutton>

      <Navbutton
        className={classNames("__wab_instance", sty.navbutton__aBCz4)}
        slot={"Transactions"}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__w9CS)}
          displayHeight={"47px"}
          displayMaxHeight={"47px"}
          displayMaxWidth={"47px"}
          displayMinHeight={"47px"}
          displayMinWidth={"0"}
          displayWidth={"47px"}
          loading={"lazy"}
          src={{
            src: transactionspngVTd0Yccwe,
            fullWidth: 60,
            fullHeight: 60,
            aspectRatio: undefined
          }}
        />
      </Navbutton>

      <Navbutton
        className={classNames("__wab_instance", sty.navbutton__doUpq)}
        slot={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cyGj4
            )}
          >
            {"Proposals"}
          </div>
        }
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__hN5An)}
          displayHeight={"47px"}
          displayMaxHeight={"47px"}
          displayMaxWidth={"47px"}
          displayMinHeight={"47px"}
          displayMinWidth={"0"}
          displayWidth={"47px"}
          loading={"lazy"}
          src={{
            src: proposalspngZc5VYhnyk,
            fullWidth: 60,
            fullHeight: 60,
            aspectRatio: undefined
          }}
        />
      </Navbutton>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarone__ArgProps,
      internalVariantPropNames: PlasmicNavbarone__VariantProps
    });

    return PlasmicNavbarone__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarone";
  } else {
    func.displayName = `PlasmicNavbarone.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarone = Object.assign(
  // Top-level PlasmicNavbarone renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicNavbarone
    internalVariantProps: PlasmicNavbarone__VariantProps,
    internalArgProps: PlasmicNavbarone__ArgProps
  }
);

export default PlasmicNavbarone;
/* prettier-ignore-end */
