// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: vfdmvFWwUM
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicConnectWallet.module.css"; // plasmic-import: vfdmvFWwUM/css
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture

export const PlasmicConnectWallet__VariantProps = new Array(
  "loading",
  "connected"
);

export const PlasmicConnectWallet__ArgProps = new Array("address");

function PlasmicConnectWallet__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootconnected]: hasVariant(
                variants,
                "connected",
                "connected"
              ),

              [sty.rootloading]: hasVariant(variants, "loading", "loading")
            }
          )}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textconnected]: hasVariant(
                  variants,
                  "connected",
                  "connected"
                ),

                [sty.textloading]: hasVariant(variants, "loading", "loading")
              }
            )}
          >
            {hasVariant(variants, "connected", "connected")
              ? "Wallet Connected"
              : "Connect your Web3 Wallet"}
          </div>

          {(
            hasVariant(variants, "connected", "connected")
              ? true
              : hasVariant(variants, "loading", "loading")
              ? true
              : true
          ) ? (
            <Button
              data-plasmic-name={"wcbutton"}
              data-plasmic-override={overrides.wcbutton}
              className={classNames("__wab_instance", sty.wcbutton, {
                [sty.wcbuttonconnected]: hasVariant(
                  variants,
                  "connected",
                  "connected"
                ),

                [sty.wcbuttonloading]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            />
          ) : null}
          {(
            hasVariant(variants, "connected", "connected")
              ? true
              : hasVariant(variants, "loading", "loading")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"metamaskbutton"}
              data-plasmic-override={overrides.metamaskbutton}
              className={classNames("__wab_instance", sty.metamaskbutton, {
                [sty.metamaskbuttonconnected]: hasVariant(
                  variants,
                  "connected",
                  "connected"
                ),

                [sty.metamaskbuttonloading]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            />
          ) : null}
          {(hasVariant(variants, "connected", "connected") ? true : true) ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxconnected]: hasVariant(
                  variants,
                  "connected",
                  "connected"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.address,
                className: classNames(sty.slotTargetAddress, {
                  [sty.slotTargetAddressconnected]: hasVariant(
                    variants,
                    "connected",
                    "connected"
                  )
                })
              })}
            </div>
          ) : null}
          {(
            hasVariant(variants, "connected", "connected")
              ? true
              : hasVariant(variants, "loading", "loading")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"explorerenaibutton"}
              data-plasmic-override={overrides.explorerenaibutton}
              className={classNames("__wab_instance", sty.explorerenaibutton, {
                [sty.explorerenaibuttonconnected]: hasVariant(
                  variants,
                  "connected",
                  "connected"
                ),

                [sty.explorerenaibuttonloading]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            />
          ) : null}
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgloading]: hasVariant(variants, "loading", "loading")
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"219px"}
              loading={"lazy"}
              src={{
                src: loadingsvg2TDO0NZVmL,
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "screenAlert",
    "text",
    "wcbutton",
    "metamaskbutton",
    "freeBox",
    "explorerenaibutton",
    "img"
  ],

  screenAlert: ["screenAlert"],
  text: ["text"],
  wcbutton: ["wcbutton"],
  metamaskbutton: ["metamaskbutton"],
  freeBox: ["freeBox"],
  explorerenaibutton: ["explorerenaibutton"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicConnectWallet__ArgProps,
      internalVariantPropNames: PlasmicConnectWallet__VariantProps
    });

    return PlasmicConnectWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnectWallet";
  } else {
    func.displayName = `PlasmicConnectWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicConnectWallet = Object.assign(
  // Top-level PlasmicConnectWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    screenAlert: makeNodeComponent("screenAlert"),
    text: makeNodeComponent("text"),
    wcbutton: makeNodeComponent("wcbutton"),
    metamaskbutton: makeNodeComponent("metamaskbutton"),
    freeBox: makeNodeComponent("freeBox"),
    explorerenaibutton: makeNodeComponent("explorerenaibutton"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicConnectWallet
    internalVariantProps: PlasmicConnectWallet__VariantProps,
    internalArgProps: PlasmicConnectWallet__ArgProps
  }
);

export default PlasmicConnectWallet;
/* prettier-ignore-end */
