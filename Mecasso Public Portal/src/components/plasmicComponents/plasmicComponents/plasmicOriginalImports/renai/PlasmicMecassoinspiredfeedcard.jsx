// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: HuRuA15O5sA
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicMecassoinspiredfeedcard.module.css"; // plasmic-import: HuRuA15O5sA/css
import HeartBlueFilledsvgIcon from "./icons/PlasmicIcon__HeartBlueFilledsvg"; // plasmic-import: a7Z29UWuW/icon
import JewelCharmsvgIcon from "./icons/PlasmicIcon__JewelCharmsvg"; // plasmic-import: gD5MEw887/icon
import SharePostsvg2Icon from "./icons/PlasmicIcon__SharePostsvg2"; // plasmic-import: U267OFghf/icon
import ExternalLinksvgIcon from "./icons/PlasmicIcon__ExternalLinksvg"; // plasmic-import: kRZyqswZc/icon
import image20IYGemhHf2 from "./images/image20.png"; // plasmic-import: iYGemhHF2/picture
import image19Nu1XjgG0M from "./images/image19.png"; // plasmic-import: Nu1XjgG0m/picture

export const PlasmicMecassoinspiredfeedcard__VariantProps = new Array();

export const PlasmicMecassoinspiredfeedcard__ArgProps = new Array();

function PlasmicMecassoinspiredfeedcard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox___4BRe9)}>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__su1MR)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___4FHli)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kdzgL)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"25px"}
                    loading={"lazy"}
                    src={{
                      src: image20IYGemhHf2,
                      fullWidth: 387,
                      fullHeight: 581,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eGohu
                )}
              >
                {"Ishan Roy"}
              </div>
            </p.Stack>
          ) : null}
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__okFyg)}>
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img___0Wyov)}
          displayHeight={"auto"}
          displayMaxHeight={"229px"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: image19Nu1XjgG0M,
            fullWidth: 1074,
            fullHeight: 806,
            aspectRatio: undefined
          }}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__qYtLz)}>
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gAg0V)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yhRe)}
              >
                <HeartBlueFilledsvgIcon
                  className={classNames(projectcss.all, sty.svg__ykCs3)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wc5Rk
                  )}
                >
                  {"39"}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__y4Ce)}
              >
                <JewelCharmsvgIcon
                  className={classNames(projectcss.all, sty.svg__nWq3J)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mge37
                  )}
                >
                  {"57"}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}

        <SharePostsvg2Icon
          className={classNames(projectcss.all, sty.svg__iRrrq)}
          role={"img"}
        />
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__uIoAf)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jhoaz
            )}
          >
            {
              "First post for the followers of Renai Community and Trying to setup a fixed space for the heading"
            }
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wnaDr
            )}
          >
            {
              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. "
            }
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox___82Kml)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bxcH1
          )}
        >
          {"Dec 12 2021 21:59"}
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0IKlm)}
          >
            <ExternalLinksvgIcon
              className={classNames(projectcss.all, sty.svg__yup9U)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oZriX
              )}
            >
              {"External Link"}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMecassoinspiredfeedcard__ArgProps,
      internalVariantPropNames: PlasmicMecassoinspiredfeedcard__VariantProps
    });

    return PlasmicMecassoinspiredfeedcard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMecassoinspiredfeedcard";
  } else {
    func.displayName = `PlasmicMecassoinspiredfeedcard.${nodeName}`;
  }
  return func;
}

export const PlasmicMecassoinspiredfeedcard = Object.assign(
  // Top-level PlasmicMecassoinspiredfeedcard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicMecassoinspiredfeedcard
    internalVariantProps: PlasmicMecassoinspiredfeedcard__VariantProps,
    internalArgProps: PlasmicMecassoinspiredfeedcard__ArgProps
  }
);

export default PlasmicMecassoinspiredfeedcard;
/* prettier-ignore-end */
