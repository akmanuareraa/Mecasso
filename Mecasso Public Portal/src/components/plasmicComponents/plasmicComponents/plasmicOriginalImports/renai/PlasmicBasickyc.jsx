// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: P1HqAfzt9P
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Mobileotp from "../../../Mobileotp"; // plasmic-import: aJHYoZ0dnS1/component
import Emailotp from "../../../Emailotp"; // plasmic-import: 9TAJOpZCudj/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import Successmessage from "../../../Successmessage"; // plasmic-import: Hz33POcv8Jw/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicBasickyc.module.css"; // plasmic-import: P1HqAfzt9P/css

export const PlasmicBasickyc__VariantProps = new Array(
  "otpverification",
  "phoneverificationsuccess",
  "emailverification",
  "mobileotpsuccess"
);

export const PlasmicBasickyc__ArgProps = new Array(
  "errormessage",
  "errormessage2",
  "errormessage3"
);

function PlasmicBasickyc__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootemailverification]: hasVariant(
                variants,
                "emailverification",
                "emailverification"
              ),

              [sty.rootmobileotpsuccess]: hasVariant(
                variants,
                "mobileotpsuccess",
                "mobileotpsuccess"
              ),

              [sty.roototpverification]: hasVariant(
                variants,
                "otpverification",
                "otpverification"
              ),

              [sty.rootphoneverificationsuccess]: hasVariant(
                variants,
                "phoneverificationsuccess",
                "phoneverificationsuccess"
              )
            }
          )}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vzLlQ,
              {
                [sty.textemailverification__vzLlQeokVf]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.textmobileotpsuccess__vzLlQwgnbv]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.textotpverification__vzLlQBtMm1]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.textphoneverificationsuccess__vzLlQNbp7]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              }
            )}
          >
            {hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? "OTP Verification"
              : hasVariant(variants, "emailverification", "emailverification")
              ? "Email Verification"
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? "OTP Verification"
              : hasVariant(variants, "otpverification", "otpverification")
              ? "OTP Verification"
              : "Basic KYC"}
          </div>

          {(
            hasVariant(variants, "emailverification", "emailverification")
              ? true
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : true
          ) ? (
            <Mobileotp
              data-plasmic-name={"mobileform"}
              data-plasmic-override={overrides.mobileform}
              className={classNames("__wab_instance", sty.mobileform, {
                [sty.mobileformemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.mobileformmobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.mobileformotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.mobileformphoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
              emailverification={
                hasVariant(variants, "emailverification", "emailverification")
                  ? true
                  : undefined
              }
              errormessage2={p.renderPlasmicSlot({
                defaultContents: "Phone number verified successfully",
                value: args.errormessage2
              })}
              errormessage3={p.renderPlasmicSlot({
                defaultContents: "Phone number verified successfully",
                value: args.errormessage3
              })}
              fotpverification={
                hasVariant(variants, "otpverification", "otpverification")
                  ? true
                  : undefined
              }
              mobileotpsuccess={
                hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
                  ? true
                  : undefined
              }
              phoneverificationsuccess={
                hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
                  ? true
                  : undefined
              }
            />
          ) : null}
          {(
            hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? true
              : hasVariant(variants, "emailverification", "emailverification")
              ? true
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : false
          ) ? (
            <Emailotp
              data-plasmic-name={"emailform"}
              data-plasmic-override={overrides.emailform}
              className={classNames("__wab_instance", sty.emailform, {
                [sty.emailformemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.emailformmobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.emailformotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.emailformphoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
              emailverification={
                hasVariant(variants, "emailverification", "emailverification")
                  ? true
                  : undefined
              }
              fotpverification={
                hasVariant(variants, "otpverification", "otpverification")
                  ? true
                  : undefined
              }
              mobileotpsuccess={
                hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
                  ? true
                  : undefined
              }
              phoneverificationsuccess={
                hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
                  ? true
                  : undefined
              }
            />
          ) : null}
          {(
            hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? true
              : hasVariant(variants, "emailverification", "emailverification")
              ? true
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : true
          ) ? (
            <Button
              data-plasmic-name={"submitkycbutton"}
              data-plasmic-override={overrides.submitkycbutton}
              className={classNames("__wab_instance", sty.submitkycbutton, {
                [sty.submitkycbuttonemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.submitkycbuttonmobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.submitkycbuttonotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.submitkycbuttonphoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d2Zk1
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
          {(
            hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? true
              : hasVariant(variants, "emailverification", "emailverification")
              ? true
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : false
          ) ? (
            <Successmessage
              data-plasmic-name={"successmessage"}
              data-plasmic-override={overrides.successmessage}
              className={classNames("__wab_instance", sty.successmessage, {
                [sty.successmessageemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.successmessagemobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.successmessageotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.successmessagephoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
              emailverification={
                hasVariant(variants, "emailverification", "emailverification")
                  ? true
                  : undefined
              }
              errormessage={p.renderPlasmicSlot({
                defaultContents: "Phone number verified successfully",
                value: args.errormessage
              })}
              mobileotpsuccess={
                hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
                  ? true
                  : undefined
              }
              phoneverification={
                hasVariant(variants, "otpverification", "otpverification")
                  ? true
                  : undefined
              }
              phoneverificationsuccess={
                hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
                  ? true
                  : undefined
              }
            />
          ) : null}
          {(
            hasVariant(variants, "emailverification", "emailverification")
              ? true
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hDi17,
                {
                  [sty.textemailverification__hDi17EokVf]: hasVariant(
                    variants,
                    "emailverification",
                    "emailverification"
                  )
                }
              )}
            >
              {
                "An confirmation link has been sent to your registered email address. Please confirm your email to complete basic KYC"
              }
            </div>
          ) : null}
          {(
            hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? true
              : hasVariant(variants, "emailverification", "emailverification")
              ? true
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"nextbutton"}
              data-plasmic-override={overrides.nextbutton}
              className={classNames("__wab_instance", sty.nextbutton, {
                [sty.nextbuttonemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.nextbuttonmobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.nextbuttonotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.nextbuttonphoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rqe3P
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
          {(
            hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? true
              : hasVariant(variants, "emailverification", "emailverification")
              ? true
              : hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"redirectbutton"}
              data-plasmic-override={overrides.redirectbutton}
              className={classNames("__wab_instance", sty.redirectbutton, {
                [sty.redirectbuttonemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.redirectbuttonmobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.redirectbuttonotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.redirectbuttonphoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___11Vca
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
          {(
            hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
              ? true
              : hasVariant(variants, "otpverification", "otpverification")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"completebutton"}
              data-plasmic-override={overrides.completebutton}
              className={classNames("__wab_instance", sty.completebutton, {
                [sty.completebuttonemailverification]: hasVariant(
                  variants,
                  "emailverification",
                  "emailverification"
                ),

                [sty.completebuttonmobileotpsuccess]: hasVariant(
                  variants,
                  "mobileotpsuccess",
                  "mobileotpsuccess"
                ),

                [sty.completebuttonotpverification]: hasVariant(
                  variants,
                  "otpverification",
                  "otpverification"
                ),

                [sty.completebuttonphoneverificationsuccess]: hasVariant(
                  variants,
                  "phoneverificationsuccess",
                  "phoneverificationsuccess"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bdmgN
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "screenAlert",
    "mobileform",
    "emailform",
    "submitkycbutton",
    "successmessage",
    "nextbutton",
    "redirectbutton",
    "completebutton"
  ],

  screenAlert: ["screenAlert"],
  mobileform: ["mobileform"],
  emailform: ["emailform"],
  submitkycbutton: ["submitkycbutton"],
  successmessage: ["successmessage"],
  nextbutton: ["nextbutton"],
  redirectbutton: ["redirectbutton"],
  completebutton: ["completebutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBasickyc__ArgProps,
      internalVariantPropNames: PlasmicBasickyc__VariantProps
    });

    return PlasmicBasickyc__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBasickyc";
  } else {
    func.displayName = `PlasmicBasickyc.${nodeName}`;
  }
  return func;
}

export const PlasmicBasickyc = Object.assign(
  // Top-level PlasmicBasickyc renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    screenAlert: makeNodeComponent("screenAlert"),
    mobileform: makeNodeComponent("mobileform"),
    emailform: makeNodeComponent("emailform"),
    submitkycbutton: makeNodeComponent("submitkycbutton"),
    successmessage: makeNodeComponent("successmessage"),
    nextbutton: makeNodeComponent("nextbutton"),
    redirectbutton: makeNodeComponent("redirectbutton"),
    completebutton: makeNodeComponent("completebutton"),
    // Metadata about props expected for PlasmicBasickyc
    internalVariantProps: PlasmicBasickyc__VariantProps,
    internalArgProps: PlasmicBasickyc__ArgProps
  }
);

export default PlasmicBasickyc;
/* prettier-ignore-end */
