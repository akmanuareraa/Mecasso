// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: A_APf0xiJBc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Votebutton from "../../../Votebutton"; // plasmic-import: 38Z1OQ4oEu/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicProposalheadingcard.module.css"; // plasmic-import: A_APf0xiJBc/css

export const PlasmicProposalheadingcard__VariantProps = new Array();

export const PlasmicProposalheadingcard__ArgProps = new Array(
  "proposalid",
  "header",
  "deadline",
  "status",
  "votebuttonslot"
);

function PlasmicProposalheadingcard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__vMWsu)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___8RyH0)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__y6XjI)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___33MWh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6KLhm
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1UWbn
                        )}
                      >
                        {"Proposal ID: "}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__incf8
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "23",
                          value: args.proposalid,
                          className: classNames(sty.slotTargetProposalid)
                        })}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__bzfui)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Donating 50,000 PBO for ABC Charity",
                        value: args.header,
                        className: classNames(sty.slotTargetHeader)
                      })}
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nzRBc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pqe5
                          )}
                        >
                          {"Creator: "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fIr9
                          )}
                        >
                          {"0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jlm2)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wuzJ)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xili2)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Votebutton
                          className={classNames(
                            "__wab_instance",
                            sty.votebutton__mJmuf
                          )}
                        />
                      ),

                      value: args.votebuttonslot
                    })}
                  </div>
                ) : null}

                <div
                  className={classNames(projectcss.all, sty.freeBox___7RjKw)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "OPEN",
                    value: args.status,
                    className: classNames(sty.slotTargetStatus)
                  })}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__l4FDm)}>
        <div className={classNames(projectcss.all, sty.freeBox___4Vile)}>
          {p.renderPlasmicSlot({
            defaultContents: "Deadline: 7th March 2022",
            value: args.deadline,
            className: classNames(sty.slotTargetDeadline)
          })}
        </div>
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProposalheadingcard__ArgProps,
      internalVariantPropNames: PlasmicProposalheadingcard__VariantProps
    });

    return PlasmicProposalheadingcard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProposalheadingcard";
  } else {
    func.displayName = `PlasmicProposalheadingcard.${nodeName}`;
  }
  return func;
}

export const PlasmicProposalheadingcard = Object.assign(
  // Top-level PlasmicProposalheadingcard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProposalheadingcard
    internalVariantProps: PlasmicProposalheadingcard__VariantProps,
    internalArgProps: PlasmicProposalheadingcard__ArgProps
  }
);

export default PlasmicProposalheadingcard;
/* prettier-ignore-end */
