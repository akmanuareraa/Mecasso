// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: 0FGBFCPLa_
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicEmailVerifyProcess.module.css"; // plasmic-import: 0FGBFCPLa_/css
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture

export const PlasmicEmailVerifyProcess__VariantProps = new Array();

export const PlasmicEmailVerifyProcess__ArgProps = new Array();

function PlasmicEmailVerifyProcess__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {true ? (
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"222px"}
                loading={"lazy"}
                src={{
                  src: loadingsvg2TDO0NZVmL,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            ) : null}
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "img"],
  freeBox: ["freeBox", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmailVerifyProcess__ArgProps,
      internalVariantPropNames: PlasmicEmailVerifyProcess__VariantProps
    });

    return PlasmicEmailVerifyProcess__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmailVerifyProcess";
  } else {
    func.displayName = `PlasmicEmailVerifyProcess.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailVerifyProcess = Object.assign(
  // Top-level PlasmicEmailVerifyProcess renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicEmailVerifyProcess
    internalVariantProps: PlasmicEmailVerifyProcess__VariantProps,
    internalArgProps: PlasmicEmailVerifyProcess__ArgProps
  }
);

export default PlasmicEmailVerifyProcess;
/* prettier-ignore-end */
