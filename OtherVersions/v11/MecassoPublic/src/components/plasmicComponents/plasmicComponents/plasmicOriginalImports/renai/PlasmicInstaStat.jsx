// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: Jv16igmJfA0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicInstaStat.module.css"; // plasmic-import: Jv16igmJfA0/css
import logoIgPng32464PngGIfSWrjQr from "./images/logoIgPng32464Png.png"; // plasmic-import: gIfSWrjQr/picture

export const PlasmicInstaStat__VariantProps = new Array();

export const PlasmicInstaStat__ArgProps = new Array(
  "instausername",
  "instaacctype",
  "instamediacount",
  "instafollowercount"
);

function PlasmicInstaStat__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dnEaY)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"34px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"34px"}
          loading={"lazy"}
          src={{
            src: logoIgPng32464PngGIfSWrjQr,
            fullWidth: 300,
            fullHeight: 300,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nie4
          )}
        >
          {"Instagram"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__hEnS)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__k9Bdb)}>
          <div className={classNames(projectcss.all, sty.freeBox__gMgxw)}>
            {p.renderPlasmicSlot({
              defaultContents: "si.by.surabhi",
              value: args.instausername,
              className: classNames(sty.slotTargetInstausername)
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__eZwDs)}>
            {p.renderPlasmicSlot({
              defaultContents: "BUSINESS",
              value: args.instaacctype,
              className: classNames(sty.slotTargetInstaacctype)
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__r9Lqd)}>
          <div className={classNames(projectcss.all, sty.freeBox__bkotw)}>
            {p.renderPlasmicSlot({
              defaultContents: "985k",
              value: args.instafollowercount,
              className: classNames(sty.slotTargetInstafollowercount)
            })}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vn224
            )}
          >
            {"Followers"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__wadFo)}>
          <div className={classNames(projectcss.all, sty.freeBox__wtpLv)}>
            {p.renderPlasmicSlot({
              defaultContents: "985k",
              value: args.instamediacount,
              className: classNames(sty.slotTargetInstamediacount)
            })}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dlReQ
            )}
          >
            {"Media"}
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInstaStat__ArgProps,
      internalVariantPropNames: PlasmicInstaStat__VariantProps
    });

    return PlasmicInstaStat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstaStat";
  } else {
    func.displayName = `PlasmicInstaStat.${nodeName}`;
  }
  return func;
}

export const PlasmicInstaStat = Object.assign(
  // Top-level PlasmicInstaStat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicInstaStat
    internalVariantProps: PlasmicInstaStat__VariantProps,
    internalArgProps: PlasmicInstaStat__ArgProps
  }
);

export default PlasmicInstaStat;
/* prettier-ignore-end */
