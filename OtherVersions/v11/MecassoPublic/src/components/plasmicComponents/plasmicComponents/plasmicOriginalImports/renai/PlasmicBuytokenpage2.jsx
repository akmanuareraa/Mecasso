// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: CuZ3VxrY1Jc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Switchnetworkalert from "../../../Switchnetworkalert"; // plasmic-import: 6B14PY8_QE/component
import Buytokencomponent from "../../../Buytokencomponent"; // plasmic-import: hw4bHN5M-0W/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicBuytokenpage2.module.css"; // plasmic-import: CuZ3VxrY1Jc/css
import arrow233Png1Ht3Ij9Y from "./images/arrow233Png.png"; // plasmic-import: 1-HT3Ij9y/picture
import maleUser480Pxpng2EH7EoyOk2 from "./images/maleUser480Pxpng2.png"; // plasmic-import: eH7eoyOK2/picture

export const PlasmicBuytokenpage2__VariantProps = new Array("profileoverlay");

export const PlasmicBuytokenpage2__ArgProps = new Array(
  "overlaycreatorname",
  "overlaycategory",
  "errormessage",
  "amounttopay",
  "overlayuserprofilepic",
  "uploadbuttonslot"
);

function PlasmicBuytokenpage2__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootprofileoverlay]: hasVariant(
                variants,
                "profileoverlay",
                "profileoverlay"
              )
            }
          )}
        >
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox___12VJl)}>
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage)
              })}
            </div>
          ) : null}

          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />

          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__wcr3K)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ypUmg)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lSbV
                  )}
                >
                  {"Buy Tokens"}
                </div>
              </p.Stack>
            ) : null}
          </div>

          <Switchnetworkalert
            data-plasmic-name={"switchnetworkalert"}
            data-plasmic-override={overrides.switchnetworkalert}
            className={classNames("__wab_instance", sty.switchnetworkalert)}
          />

          {(
            hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__wCx9A, {
                [sty.freeBoxprofileoverlay__wCx9APby9E]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___6O4Fi, {
                    [sty.freeBoxprofileoverlay___6O4FiPby9E]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <button
                      data-plasmic-name={"backbutton"}
                      data-plasmic-override={overrides.backbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.backbutton,
                        {
                          [sty.backbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img, {
                          [sty.imgprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"37px"}
                        loading={"lazy"}
                        src={{
                          src: arrow233Png1Ht3Ij9Y,
                          fullWidth: 640,
                          fullHeight: 640,
                          aspectRatio: undefined
                        }}
                      />
                    </button>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__fWhCq, {
                    [sty.freeBoxprofileoverlay__fWhCqPby9E]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bkjZ5,
                        {
                          [sty.textprofileoverlay__bkjZ5Pby9E]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {"Manu Areraa"}
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__u7HX2, {
                      [sty.freeBoxprofileoverlay__u7HX2Pby9E]: hasVariant(
                        variants,
                        "profileoverlay",
                        "profileoverlay"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Manu Areraa",
                      value: args.overlaycreatorname,
                      className: classNames(sty.slotTargetOverlaycreatorname, {
                        [sty.slotTargetOverlaycreatornameprofileoverlay]:
                          hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                      })
                    })}
                  </div>

                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__shzd, {
                        [sty.freeBoxprofileoverlay__shzdPby9E]: hasVariant(
                          variants,
                          "profileoverlay",
                          "profileoverlay"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hTqyj,
                          {
                            [sty.freeBoxprofileoverlay__hTqyjPby9E]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Cooking",
                          value: args.overlaycategory,
                          className: classNames(sty.slotTargetOverlaycategory, {
                            [sty.slotTargetOverlaycategoryprofileoverlay]:
                              hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                          })
                        })}
                      </div>

                      {(
                        hasVariant(variants, "profileoverlay", "profileoverlay")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hgtiL,
                            {
                              [sty.textprofileoverlay__hgtiLPby9E]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {"|  Young Stars"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox___8C3Mq, {
                  [sty.freeBoxprofileoverlay___8C3MqPby9E]: hasVariant(
                    variants,
                    "profileoverlay",
                    "profileoverlay"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__zn4Ok)}
                      displayHeight={"290px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"290px"}
                      loading={"lazy"}
                      src={{
                        src: maleUser480Pxpng2EH7EoyOk2,
                        fullWidth: 480,
                        fullHeight: 480,
                        aspectRatio: undefined
                      }}
                    />
                  ),

                  value: args.overlayuserprofilepic
                })}
              </div>

              {(
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hqM1K, {
                    [sty.freeBoxprofileoverlay__hqM1KPby9E]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"loginbutton"}
                      data-plasmic-override={overrides.loginbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.loginbutton,
                        {
                          [sty.loginbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ol8Hi,
                          {
                            [sty.textprofileoverlay__ol8HiPby9E]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"signupbutton"}
                      data-plasmic-override={overrides.signupbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.signupbutton,
                        {
                          [sty.signupbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fhtf,
                          {
                            [sty.textprofileoverlay__fhtfPby9E]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__dox4N, {
                      [sty.freeBoxprofileoverlay__dox4NPby9E]: hasVariant(
                        variants,
                        "profileoverlay",
                        "profileoverlay"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <p.Stack
                          as={"button"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            sty.button__rD7Z4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pjE
                            )}
                          >
                            {"Upload Profile Photo"}
                          </div>
                        </p.Stack>
                      ),

                      value: args.uploadbuttonslot
                    })}
                  </div>

                  <p.Stack
                    as={"button"}
                    data-plasmic-name={"logoutbutton"}
                    data-plasmic-override={overrides.logoutbutton}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      sty.logoutbutton,
                      {
                        [sty.logoutbuttonprofileoverlay]: hasVariant(
                          variants,
                          "profileoverlay",
                          "profileoverlay"
                        )
                      }
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n9GoW,
                        {
                          [sty.textprofileoverlay__n9GoWPby9E]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {"Logout"}
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hSwzh)}
          >
            <Buytokencomponent
              data-plasmic-name={"buytokendashboard"}
              data-plasmic-override={overrides.buytokendashboard}
              amounttopay={p.renderPlasmicSlot({
                defaultContents: "0",
                value: args.amounttopay
              })}
              className={classNames("__wab_instance", sty.buytokendashboard)}
              txnhash={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5A3Eq
                  )}
                >
                  {"0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f"}
                </div>
              }
            />
          </p.Stack>

          {(
            hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <Navbartwo
              data-plasmic-name={"navbartwo"}
              data-plasmic-override={overrides.navbartwo}
              className={classNames("__wab_instance", sty.navbartwo, {
                [sty.navbartwoprofileoverlay]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
              lbtoggle={
                hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? undefined
                  : true
              }
            />
          ) : null}

          <Button
            data-plasmic-name={"backpagebutton"}
            data-plasmic-override={overrides.backpagebutton}
            className={classNames("__wab_instance", sty.backpagebutton)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ujyPo)} />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "screenAlert",
    "switchnetworkalert",
    "backbutton",
    "img",
    "loginbutton",
    "signupbutton",
    "logoutbutton",
    "buytokendashboard",
    "navbartwo",
    "backpagebutton"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  switchnetworkalert: ["switchnetworkalert"],
  backbutton: ["backbutton", "img"],
  img: ["img"],
  loginbutton: ["loginbutton"],
  signupbutton: ["signupbutton"],
  logoutbutton: ["logoutbutton"],
  buytokendashboard: ["buytokendashboard"],
  navbartwo: ["navbartwo"],
  backpagebutton: ["backpagebutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBuytokenpage2__ArgProps,
      internalVariantPropNames: PlasmicBuytokenpage2__VariantProps
    });

    return PlasmicBuytokenpage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuytokenpage2";
  } else {
    func.displayName = `PlasmicBuytokenpage2.${nodeName}`;
  }
  return func;
}

export const PlasmicBuytokenpage2 = Object.assign(
  // Top-level PlasmicBuytokenpage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    switchnetworkalert: makeNodeComponent("switchnetworkalert"),
    backbutton: makeNodeComponent("backbutton"),
    img: makeNodeComponent("img"),
    loginbutton: makeNodeComponent("loginbutton"),
    signupbutton: makeNodeComponent("signupbutton"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    buytokendashboard: makeNodeComponent("buytokendashboard"),
    navbartwo: makeNodeComponent("navbartwo"),
    backpagebutton: makeNodeComponent("backpagebutton"),
    // Metadata about props expected for PlasmicBuytokenpage2
    internalVariantProps: PlasmicBuytokenpage2__VariantProps,
    internalArgProps: PlasmicBuytokenpage2__ArgProps
  }
);

export default PlasmicBuytokenpage2;
/* prettier-ignore-end */
