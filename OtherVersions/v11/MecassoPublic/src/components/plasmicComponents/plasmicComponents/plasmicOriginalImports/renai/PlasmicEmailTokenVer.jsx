// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: x2WaPL4AHE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicEmailTokenVer.module.css"; // plasmic-import: x2WaPL4AHE/css
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture
import emailSuccesssvgEU4I10US7 from "./images/emailSuccesssvg.svg"; // plasmic-import: eU4I10U-s7/picture
import emailFailsvgDhfD3CmtKi from "./images/emailFailsvg.svg"; // plasmic-import: DhfD3CMTKi/picture

export const PlasmicEmailTokenVer__VariantProps = new Array("success", "fail");

export const PlasmicEmailTokenVer__ArgProps = new Array();

function PlasmicEmailTokenVer__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootfail]: hasVariant(variants, "fail", "fail"),
              [sty.rootsuccess]: hasVariant(variants, "success", "success")
            }
          )}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert, {
                [sty.screenAlertfail]: hasVariant(variants, "fail", "fail"),
                [sty.screenAlertsuccess]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              })}
            />
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              {(
                hasVariant(variants, "fail", "fail")
                  ? true
                  : hasVariant(variants, "success", "success")
                  ? true
                  : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yCoK9, {
                    [sty.imgfail__yCoK9Edhet]: hasVariant(
                      variants,
                      "fail",
                      "fail"
                    ),

                    [sty.imgsuccess__yCoK9PiZn4]: hasVariant(
                      variants,
                      "success",
                      "success"
                    )
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: loadingsvg2TDO0NZVmL,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(variants, "fail", "fail")
              ? true
              : hasVariant(variants, "success", "success")
              ? true
              : true
          ) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___9Cfh9, {
                [sty.imgfail___9Cfh9Edhet]: hasVariant(
                  variants,
                  "fail",
                  "fail"
                ),

                [sty.imgsuccess___9Cfh9PiZn4]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"165px"}
              loading={"lazy"}
              src={
                hasVariant(variants, "fail", "fail")
                  ? {
                      src: emailFailsvgDhfD3CmtKi,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }
                  : {
                      src: emailSuccesssvgEU4I10US7,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }
              }
            />
          ) : null}
          {(
            hasVariant(variants, "fail", "fail")
              ? true
              : hasVariant(variants, "success", "success")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                {
                  [sty.textfail]: hasVariant(variants, "fail", "fail"),
                  [sty.textsuccess]: hasVariant(variants, "success", "success")
                }
              )}
            >
              {hasVariant(variants, "fail", "fail")
                ? "Email Verification Failed"
                : "Email Verified Successfully"}
            </div>
          ) : null}
          {(
            hasVariant(variants, "fail", "fail")
              ? true
              : hasVariant(variants, "success", "success")
              ? true
              : true
          ) ? (
            <Button
              data-plasmic-name={"redirectbutton"}
              data-plasmic-override={overrides.redirectbutton}
              className={classNames("__wab_instance", sty.redirectbutton, {
                [sty.redirectbuttonfail]: hasVariant(variants, "fail", "fail"),
                [sty.redirectbuttonsuccess]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              })}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "screenAlert", "freeBox", "text", "redirectbutton"],
  screenAlert: ["screenAlert"],
  freeBox: ["freeBox"],
  text: ["text"],
  redirectbutton: ["redirectbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmailTokenVer__ArgProps,
      internalVariantPropNames: PlasmicEmailTokenVer__VariantProps
    });

    return PlasmicEmailTokenVer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmailTokenVer";
  } else {
    func.displayName = `PlasmicEmailTokenVer.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailTokenVer = Object.assign(
  // Top-level PlasmicEmailTokenVer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    screenAlert: makeNodeComponent("screenAlert"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    redirectbutton: makeNodeComponent("redirectbutton"),
    // Metadata about props expected for PlasmicEmailTokenVer
    internalVariantProps: PlasmicEmailTokenVer__VariantProps,
    internalArgProps: PlasmicEmailTokenVer__ArgProps
  }
);

export default PlasmicEmailTokenVer;
/* prettier-ignore-end */
