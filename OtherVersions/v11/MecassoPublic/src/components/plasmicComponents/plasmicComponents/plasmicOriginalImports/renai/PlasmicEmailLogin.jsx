// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: hfGE9Z9OTc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import TextInput from "../../../TextInput"; // plasmic-import: QSTyVh7IuMa/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicEmailLogin.module.css"; // plasmic-import: hfGE9Z9OTc/css
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture
import gmailLogo2Svg5KMxnz6BnEs from "./images/gmailLogo2Svg5.svg"; // plasmic-import: kMxnz6BnEs/picture

export const PlasmicEmailLogin__VariantProps = new Array(
  "loading",
  "invalidcreds",
  "emailconfirmation",
  "requirederror",
  "login",
  "emailverify",
  "emailsuccess",
  "emailfailed",
  "emailsuccessmsg",
  "emailfailmsg"
);

export const PlasmicEmailLogin__ArgProps = new Array();

function PlasmicEmailLogin__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootemailconfirmation]: hasVariant(
              variants,
              "emailconfirmation",
              "emailconfirmation"
            ),

            [sty.rootemailfailed]: hasVariant(
              variants,
              "emailfailed",
              "emailfailed"
            ),

            [sty.rootemailfailmsg]: hasVariant(
              variants,
              "emailfailmsg",
              "emailfailmsg"
            ),

            [sty.rootemailsuccess]: hasVariant(
              variants,
              "emailsuccess",
              "emailsuccess"
            ),

            [sty.rootemailsuccessmsg]: hasVariant(
              variants,
              "emailsuccessmsg",
              "emailsuccessmsg"
            ),

            [sty.rootemailverify]: hasVariant(
              variants,
              "emailverify",
              "emailverify"
            ),

            [sty.rootinvalidcreds]: hasVariant(
              variants,
              "invalidcreds",
              "invalidcreds"
            ),

            [sty.rootloading]: hasVariant(variants, "loading", "loading"),
            [sty.rootlogin]: hasVariant(variants, "login", "login"),
            [sty.rootrequirederror]: hasVariant(
              variants,
              "requirederror",
              "requirederror"
            )
          }
        )}
      >
        {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
          <ScreenAlert
            data-plasmic-name={"screenAlert"}
            data-plasmic-override={overrides.screenAlert}
            className={classNames("__wab_instance", sty.screenAlert)}
          />
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__q0Eu8,
            {
              [sty.textemailconfirmation__q0Eu8KsahQ]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.textemailfailed__q0Eu8YNd1X]: hasVariant(
                variants,
                "emailfailed",
                "emailfailed"
              ),

              [sty.textemailsuccess__q0Eu8E4YvG]: hasVariant(
                variants,
                "emailsuccess",
                "emailsuccess"
              ),

              [sty.textlogin__q0Eu8C7Aeb]: hasVariant(
                variants,
                "login",
                "login"
              )
            }
          )}
        >
          {"Login"}
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"signupbuttonstack"}
            data-plasmic-override={overrides.signupbuttonstack}
            hasGap={true}
            className={classNames(projectcss.all, sty.signupbuttonstack, {
              [sty.signupbuttonstackemailconfirmation]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.signupbuttonstackemailfailed]: hasVariant(
                variants,
                "emailfailed",
                "emailfailed"
              ),

              [sty.signupbuttonstackemailfailmsg]: hasVariant(
                variants,
                "emailfailmsg",
                "emailfailmsg"
              ),

              [sty.signupbuttonstackemailsuccess]: hasVariant(
                variants,
                "emailsuccess",
                "emailsuccess"
              ),

              [sty.signupbuttonstackemailsuccessmsg]: hasVariant(
                variants,
                "emailsuccessmsg",
                "emailsuccessmsg"
              ),

              [sty.signupbuttonstackemailverify]: hasVariant(
                variants,
                "emailverify",
                "emailverify"
              ),

              [sty.signupbuttonstackinvalidcreds]: hasVariant(
                variants,
                "invalidcreds",
                "invalidcreds"
              ),

              [sty.signupbuttonstackloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.signupbuttonstacklogin]: hasVariant(
                variants,
                "login",
                "login"
              ),

              [sty.signupbuttonstackrequirederror]: hasVariant(
                variants,
                "requirederror",
                "requirederror"
              )
            })}
          >
            {(
              hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
                ? true
                : hasVariant(variants, "emailfailed", "emailfailed")
                ? true
                : hasVariant(variants, "emailsuccess", "emailsuccess")
                ? true
                : hasVariant(variants, "emailverify", "emailverify")
                ? true
                : hasVariant(variants, "login", "login")
                ? true
                : hasVariant(variants, "requirederror", "requirederror")
                ? true
                : hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? true
                : hasVariant(variants, "invalidcreds", "invalidcreds")
                ? true
                : hasVariant(variants, "emailfailmsg", "emailfailmsg")
                ? true
                : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__pcPLt, {
                  [sty.freeBoxemailconfirmation__pcPLtKsahQ]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.freeBoxemailfailed__pcPLtyNd1X]: hasVariant(
                    variants,
                    "emailfailed",
                    "emailfailed"
                  ),

                  [sty.freeBoxemailfailmsg__pcPLtzYFe]: hasVariant(
                    variants,
                    "emailfailmsg",
                    "emailfailmsg"
                  ),

                  [sty.freeBoxemailsuccess__pcPLte4YvG]: hasVariant(
                    variants,
                    "emailsuccess",
                    "emailsuccess"
                  ),

                  [sty.freeBoxemailsuccessmsg__pcPLt6HMaZ]: hasVariant(
                    variants,
                    "emailsuccessmsg",
                    "emailsuccessmsg"
                  ),

                  [sty.freeBoxemailverify__pcPLtEcjLt]: hasVariant(
                    variants,
                    "emailverify",
                    "emailverify"
                  ),

                  [sty.freeBoxinvalidcreds__pcPLt0JeG]: hasVariant(
                    variants,
                    "invalidcreds",
                    "invalidcreds"
                  ),

                  [sty.freeBoxloading__pcPLtcWf1F]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),

                  [sty.freeBoxlogin__pcPLtC7Aeb]: hasVariant(
                    variants,
                    "login",
                    "login"
                  ),

                  [sty.freeBoxrequirederror__pcPLtT6TDx]: hasVariant(
                    variants,
                    "requirederror",
                    "requirederror"
                  )
                })}
              >
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <TextInput
                    data-plasmic-name={"username"}
                    data-plasmic-override={overrides.username}
                    className={classNames("__wab_instance", sty.username, {
                      [sty.usernameemailconfirmation]: hasVariant(
                        variants,
                        "emailconfirmation",
                        "emailconfirmation"
                      ),

                      [sty.usernameemailfailed]: hasVariant(
                        variants,
                        "emailfailed",
                        "emailfailed"
                      ),

                      [sty.usernameemailfailmsg]: hasVariant(
                        variants,
                        "emailfailmsg",
                        "emailfailmsg"
                      ),

                      [sty.usernameemailsuccess]: hasVariant(
                        variants,
                        "emailsuccess",
                        "emailsuccess"
                      ),

                      [sty.usernameemailsuccessmsg]: hasVariant(
                        variants,
                        "emailsuccessmsg",
                        "emailsuccessmsg"
                      ),

                      [sty.usernameemailverify]: hasVariant(
                        variants,
                        "emailverify",
                        "emailverify"
                      ),

                      [sty.usernameinvalidcreds]: hasVariant(
                        variants,
                        "invalidcreds",
                        "invalidcreds"
                      ),

                      [sty.usernameloading]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.usernamerequirederror]: hasVariant(
                        variants,
                        "requirederror",
                        "requirederror"
                      )
                    })}
                  />
                ) : null}
                {(
                  hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
                    ? true
                    : hasVariant(variants, "emailverify", "emailverify")
                    ? true
                    : hasVariant(variants, "requirederror", "requirederror")
                    ? true
                    : hasVariant(variants, "invalidcreds", "invalidcreds")
                    ? true
                    : hasVariant(variants, "emailfailmsg", "emailfailmsg")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qmpk9,
                      {
                        [sty.textemailfailmsg__qmpk9ZYFe]: hasVariant(
                          variants,
                          "emailfailmsg",
                          "emailfailmsg"
                        ),

                        [sty.textemailsuccessmsg__qmpk96HMaZ]: hasVariant(
                          variants,
                          "emailsuccessmsg",
                          "emailsuccessmsg"
                        ),

                        [sty.textemailverify__qmpk9EcjLt]: hasVariant(
                          variants,
                          "emailverify",
                          "emailverify"
                        ),

                        [sty.textinvalidcreds__qmpk90JeG]: hasVariant(
                          variants,
                          "invalidcreds",
                          "invalidcreds"
                        ),

                        [sty.textrequirederror__qmpk9T6TDx]: hasVariant(
                          variants,
                          "requirederror",
                          "requirederror"
                        )
                      }
                    )}
                  >
                    {"Username already exists"}
                  </div>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
                ? true
                : hasVariant(variants, "emailfailed", "emailfailed")
                ? false
                : hasVariant(variants, "emailsuccess", "emailsuccess")
                ? false
                : hasVariant(variants, "emailverify", "emailverify")
                ? true
                : hasVariant(variants, "login", "login")
                ? false
                : hasVariant(variants, "requirederror", "requirederror")
                ? true
                : hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? false
                : hasVariant(variants, "invalidcreds", "invalidcreds")
                ? false
                : hasVariant(variants, "emailfailmsg", "emailfailmsg")
                ? true
                : hasVariant(variants, "loading", "loading")
                ? true
                : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___4DhPr, {
                  [sty.imgemailconfirmation___4DhPrKsahQ]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.imgemailfailed___4DhPRyNd1X]: hasVariant(
                    variants,
                    "emailfailed",
                    "emailfailed"
                  ),

                  [sty.imgemailfailmsg___4DhPRzYFe]: hasVariant(
                    variants,
                    "emailfailmsg",
                    "emailfailmsg"
                  ),

                  [sty.imgemailsuccess___4DhPRe4YvG]: hasVariant(
                    variants,
                    "emailsuccess",
                    "emailsuccess"
                  ),

                  [sty.imgemailsuccessmsg___4DhPr6HMaZ]: hasVariant(
                    variants,
                    "emailsuccessmsg",
                    "emailsuccessmsg"
                  ),

                  [sty.imgemailverify___4DhPrEcjLt]: hasVariant(
                    variants,
                    "emailverify",
                    "emailverify"
                  ),

                  [sty.imginvalidcreds___4DhPr0JeG]: hasVariant(
                    variants,
                    "invalidcreds",
                    "invalidcreds"
                  ),

                  [sty.imgloading___4DhPRcWf1F]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),

                  [sty.imglogin___4DhPrc7Aeb]: hasVariant(
                    variants,
                    "login",
                    "login"
                  ),

                  [sty.imgrequirederror___4DhPrt6TDx]: hasVariant(
                    variants,
                    "requirederror",
                    "requirederror"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"145px"}
                loading={"lazy"}
                src={{
                  src: loadingsvg2TDO0NZVmL,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            ) : null}
            {(
              hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
                ? true
                : hasVariant(variants, "emailfailed", "emailfailed")
                ? true
                : hasVariant(variants, "emailsuccess", "emailsuccess")
                ? true
                : hasVariant(variants, "emailverify", "emailverify")
                ? true
                : hasVariant(variants, "login", "login")
                ? true
                : hasVariant(variants, "requirederror", "requirederror")
                ? true
                : hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? true
                : hasVariant(variants, "invalidcreds", "invalidcreds")
                ? true
                : hasVariant(variants, "emailfailmsg", "emailfailmsg")
                ? true
                : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__zvLAy, {
                  [sty.freeBoxemailconfirmation__zvLAyKsahQ]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.freeBoxemailfailed__zvLAyyNd1X]: hasVariant(
                    variants,
                    "emailfailed",
                    "emailfailed"
                  ),

                  [sty.freeBoxemailfailmsg__zvLAyzYFe]: hasVariant(
                    variants,
                    "emailfailmsg",
                    "emailfailmsg"
                  ),

                  [sty.freeBoxemailsuccess__zvLAye4YvG]: hasVariant(
                    variants,
                    "emailsuccess",
                    "emailsuccess"
                  ),

                  [sty.freeBoxemailsuccessmsg__zvLAy6HMaZ]: hasVariant(
                    variants,
                    "emailsuccessmsg",
                    "emailsuccessmsg"
                  ),

                  [sty.freeBoxemailverify__zvLAyEcjLt]: hasVariant(
                    variants,
                    "emailverify",
                    "emailverify"
                  ),

                  [sty.freeBoxinvalidcreds__zvLAy0JeG]: hasVariant(
                    variants,
                    "invalidcreds",
                    "invalidcreds"
                  ),

                  [sty.freeBoxloading__zvLAycWf1F]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),

                  [sty.freeBoxlogin__zvLAyC7Aeb]: hasVariant(
                    variants,
                    "login",
                    "login"
                  ),

                  [sty.freeBoxrequirederror__zvLAyT6TDx]: hasVariant(
                    variants,
                    "requirederror",
                    "requirederror"
                  )
                })}
              >
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <TextInput
                    data-plasmic-name={"password"}
                    data-plasmic-override={overrides.password}
                    className={classNames("__wab_instance", sty.password, {
                      [sty.passwordemailfailmsg]: hasVariant(
                        variants,
                        "emailfailmsg",
                        "emailfailmsg"
                      ),

                      [sty.passwordemailsuccessmsg]: hasVariant(
                        variants,
                        "emailsuccessmsg",
                        "emailsuccessmsg"
                      ),

                      [sty.passwordemailverify]: hasVariant(
                        variants,
                        "emailverify",
                        "emailverify"
                      ),

                      [sty.passwordinvalidcreds]: hasVariant(
                        variants,
                        "invalidcreds",
                        "invalidcreds"
                      ),

                      [sty.passwordloading]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.passwordrequirederror]: hasVariant(
                        variants,
                        "requirederror",
                        "requirederror"
                      )
                    })}
                  />
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(variants, "invalidcreds", "invalidcreds")
                ? false
                : hasVariant(variants, "loading", "loading")
                ? true
                : false
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__n7BNo, {
                  [sty.imginvalidcreds__n7BNo0JeG]: hasVariant(
                    variants,
                    "invalidcreds",
                    "invalidcreds"
                  ),

                  [sty.imgloading__n7BNOcWf1F]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  )
                })}
                displayHeight={"188px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"321px"}
                loading={"lazy"}
                src={{
                  src: loadingsvg2TDO0NZVmL,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            ) : null}
            {(
              hasVariant(variants, "emailfailed", "emailfailed")
                ? true
                : hasVariant(variants, "emailsuccess", "emailsuccess")
                ? true
                : hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? true
                : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Djv2,
                  {
                    [sty.textemailconfirmation___0Djv2KsahQ]: hasVariant(
                      variants,
                      "emailconfirmation",
                      "emailconfirmation"
                    ),

                    [sty.textemailfailed___0Djv2YNd1X]: hasVariant(
                      variants,
                      "emailfailed",
                      "emailfailed"
                    ),

                    [sty.textemailsuccess___0Djv2E4YvG]: hasVariant(
                      variants,
                      "emailsuccess",
                      "emailsuccess"
                    )
                  }
                )}
              >
                {hasVariant(variants, "emailfailed", "emailfailed")
                  ? "Email not verified. Please try again."
                  : hasVariant(variants, "emailsuccess", "emailsuccess")
                  ? "Email address verified successfully"
                  : "An email has been sent to you. Please confirm your email address."}
              </div>
            ) : null}
            {(
              hasVariant(variants, "emailfailed", "emailfailed")
                ? true
                : hasVariant(variants, "emailsuccess", "emailsuccess")
                ? true
                : hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? true
                : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ar68M, {
                  [sty.imgemailconfirmation__ar68MKsahQ]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.imgemailfailed__ar68MyNd1X]: hasVariant(
                    variants,
                    "emailfailed",
                    "emailfailed"
                  ),

                  [sty.imgemailsuccess__ar68Me4YvG]: hasVariant(
                    variants,
                    "emailsuccess",
                    "emailsuccess"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"107px"}
                loading={"lazy"}
                src={{
                  src: gmailLogo2Svg5KMxnz6BnEs,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            ) : null}
            {true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hA1Hd
                )}
              >
                {"Email Verified Successfully"}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
            ? true
            : hasVariant(variants, "emailverify", "emailverify")
            ? true
            : hasVariant(variants, "requirederror", "requirederror")
            ? true
            : hasVariant(variants, "invalidcreds", "invalidcreds")
            ? true
            : hasVariant(variants, "emailfailmsg", "emailfailmsg")
            ? true
            : false
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__d6LLl,
              {
                [sty.textemailfailmsg__d6LLLzYFe]: hasVariant(
                  variants,
                  "emailfailmsg",
                  "emailfailmsg"
                ),

                [sty.textemailsuccessmsg__d6LLl6HMaZ]: hasVariant(
                  variants,
                  "emailsuccessmsg",
                  "emailsuccessmsg"
                ),

                [sty.textemailverify__d6LLlEcjLt]: hasVariant(
                  variants,
                  "emailverify",
                  "emailverify"
                ),

                [sty.textinvalidcreds__d6LLl0JeG]: hasVariant(
                  variants,
                  "invalidcreds",
                  "invalidcreds"
                ),

                [sty.textrequirederror__d6LLlt6TDx]: hasVariant(
                  variants,
                  "requirederror",
                  "requirederror"
                )
              }
            )}
          >
            {hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
              ? "Email Verified Successfully.\nPlease login to proceed"
              : hasVariant(variants, "emailverify", "emailverify")
              ? "Please login to verify your email address"
              : hasVariant(variants, "requirederror", "requirederror")
              ? "Username and Password Required"
              : hasVariant(variants, "emailfailmsg", "emailfailmsg")
              ? "Email Verification failed.\nPlease try again."
              : "Invalid Credentials"}
          </div>
        ) : null}
        {(
          hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
            ? true
            : hasVariant(variants, "emailverify", "emailverify")
            ? true
            : hasVariant(variants, "requirederror", "requirederror")
            ? true
            : hasVariant(variants, "invalidcreds", "invalidcreds")
            ? true
            : hasVariant(variants, "emailfailmsg", "emailfailmsg")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5JElU, {
              [sty.freeBoxemailfailmsg___5JElUzYFe]: hasVariant(
                variants,
                "emailfailmsg",
                "emailfailmsg"
              ),

              [sty.freeBoxemailsuccessmsg___5JElU6HMaZ]: hasVariant(
                variants,
                "emailsuccessmsg",
                "emailsuccessmsg"
              ),

              [sty.freeBoxemailverify___5JElUEcjLt]: hasVariant(
                variants,
                "emailverify",
                "emailverify"
              ),

              [sty.freeBoxinvalidcreds___5JElU0JeG]: hasVariant(
                variants,
                "invalidcreds",
                "invalidcreds"
              ),

              [sty.freeBoxrequirederror___5JElUt6TDx]: hasVariant(
                variants,
                "requirederror",
                "requirederror"
              )
            })}
          >
            {(
              hasVariant(variants, "emailsuccessmsg", "emailsuccessmsg")
                ? true
                : hasVariant(variants, "emailverify", "emailverify")
                ? true
                : hasVariant(variants, "requirederror", "requirederror")
                ? true
                : hasVariant(variants, "invalidcreds", "invalidcreds")
                ? true
                : hasVariant(variants, "emailfailmsg", "emailfailmsg")
                ? true
                : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__piVk,
                  {
                    [sty.textemailfailmsg__piVkzYFe]: hasVariant(
                      variants,
                      "emailfailmsg",
                      "emailfailmsg"
                    ),

                    [sty.textemailsuccessmsg__piVk6HMaZ]: hasVariant(
                      variants,
                      "emailsuccessmsg",
                      "emailsuccessmsg"
                    ),

                    [sty.textemailverify__piVkEcjLt]: hasVariant(
                      variants,
                      "emailverify",
                      "emailverify"
                    ),

                    [sty.textinvalidcreds__piVk0JeG]: hasVariant(
                      variants,
                      "invalidcreds",
                      "invalidcreds"
                    ),

                    [sty.textrequirederror__piVkT6TDx]: hasVariant(
                      variants,
                      "requirederror",
                      "requirederror"
                    )
                  }
                )}
              >
                {"Invalid Credentials"}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "emailfailed", "emailfailed")
            ? true
            : hasVariant(variants, "emailsuccess", "emailsuccess")
            ? true
            : hasVariant(variants, "emailconfirmation", "emailconfirmation")
            ? true
            : true
        ) ? (
          <Button
            data-plasmic-name={"loginbutton"}
            data-plasmic-override={overrides.loginbutton}
            className={classNames("__wab_instance", sty.loginbutton, {
              [sty.loginbuttonemailconfirmation]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.loginbuttonemailfailed]: hasVariant(
                variants,
                "emailfailed",
                "emailfailed"
              ),

              [sty.loginbuttonemailfailmsg]: hasVariant(
                variants,
                "emailfailmsg",
                "emailfailmsg"
              ),

              [sty.loginbuttonemailsuccess]: hasVariant(
                variants,
                "emailsuccess",
                "emailsuccess"
              ),

              [sty.loginbuttonemailsuccessmsg]: hasVariant(
                variants,
                "emailsuccessmsg",
                "emailsuccessmsg"
              ),

              [sty.loginbuttonemailverify]: hasVariant(
                variants,
                "emailverify",
                "emailverify"
              ),

              [sty.loginbuttoninvalidcreds]: hasVariant(
                variants,
                "invalidcreds",
                "invalidcreds"
              ),

              [sty.loginbuttonlogin]: hasVariant(variants, "login", "login"),
              [sty.loginbuttonrequirederror]: hasVariant(
                variants,
                "requirederror",
                "requirederror"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h6Y2,
                {
                  [sty.textemailfailmsg__h6Y2ZYFe]: hasVariant(
                    variants,
                    "emailfailmsg",
                    "emailfailmsg"
                  ),

                  [sty.textemailsuccessmsg__h6Y26HMaZ]: hasVariant(
                    variants,
                    "emailsuccessmsg",
                    "emailsuccessmsg"
                  ),

                  [sty.textemailverify__h6Y2EcjLt]: hasVariant(
                    variants,
                    "emailverify",
                    "emailverify"
                  ),

                  [sty.textinvalidcreds__h6Y20JeG]: hasVariant(
                    variants,
                    "invalidcreds",
                    "invalidcreds"
                  ),

                  [sty.textrequirederror__h6Y2T6TDx]: hasVariant(
                    variants,
                    "requirederror",
                    "requirederror"
                  )
                }
              )}
            >
              {"Button"}
            </div>
          </Button>
        ) : null}
        {(
          hasVariant(variants, "emailfailed", "emailfailed")
            ? true
            : hasVariant(variants, "emailsuccess", "emailsuccess")
            ? true
            : hasVariant(variants, "emailconfirmation", "emailconfirmation")
            ? true
            : false
        ) ? (
          <Button
            data-plasmic-name={"loginredirectbutton"}
            data-plasmic-override={overrides.loginredirectbutton}
            className={classNames("__wab_instance", sty.loginredirectbutton, {
              [sty.loginredirectbuttonemailconfirmation]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.loginredirectbuttonemailfailed]: hasVariant(
                variants,
                "emailfailed",
                "emailfailed"
              ),

              [sty.loginredirectbuttonemailsuccess]: hasVariant(
                variants,
                "emailsuccess",
                "emailsuccess"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Oxd7
              )}
            >
              {"Button"}
            </div>
          </Button>
        ) : null}
        {(
          hasVariant(variants, "emailfailed", "emailfailed")
            ? true
            : hasVariant(variants, "emailsuccess", "emailsuccess")
            ? true
            : hasVariant(variants, "emailconfirmation", "emailconfirmation")
            ? true
            : false
        ) ? (
          <Button
            data-plasmic-name={"gotorenaibutton"}
            data-plasmic-override={overrides.gotorenaibutton}
            className={classNames("__wab_instance", sty.gotorenaibutton, {
              [sty.gotorenaibuttonemailconfirmation]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.gotorenaibuttonemailfailed]: hasVariant(
                variants,
                "emailfailed",
                "emailfailed"
              ),

              [sty.gotorenaibuttonemailsuccess]: hasVariant(
                variants,
                "emailsuccess",
                "emailsuccess"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dAxwi
              )}
            >
              {"Button"}
            </div>
          </Button>
        ) : null}
        {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
          <Navbartwo
            data-plasmic-name={"navbartwo"}
            data-plasmic-override={overrides.navbartwo}
            className={classNames("__wab_instance", sty.navbartwo)}
          />
        ) : null}
      </p.Stack>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "screenAlert",
    "signupbuttonstack",
    "username",
    "password",
    "loginbutton",
    "loginredirectbutton",
    "gotorenaibutton",
    "navbartwo"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  signupbuttonstack: ["signupbuttonstack", "username", "password"],
  username: ["username"],
  password: ["password"],
  loginbutton: ["loginbutton"],
  loginredirectbutton: ["loginredirectbutton"],
  gotorenaibutton: ["gotorenaibutton"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmailLogin__ArgProps,
      internalVariantPropNames: PlasmicEmailLogin__VariantProps
    });

    return PlasmicEmailLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmailLogin";
  } else {
    func.displayName = `PlasmicEmailLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailLogin = Object.assign(
  // Top-level PlasmicEmailLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    signupbuttonstack: makeNodeComponent("signupbuttonstack"),
    username: makeNodeComponent("username"),
    password: makeNodeComponent("password"),
    loginbutton: makeNodeComponent("loginbutton"),
    loginredirectbutton: makeNodeComponent("loginredirectbutton"),
    gotorenaibutton: makeNodeComponent("gotorenaibutton"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicEmailLogin
    internalVariantProps: PlasmicEmailLogin__VariantProps,
    internalArgProps: PlasmicEmailLogin__ArgProps
  }
);

export default PlasmicEmailLogin;
/* prettier-ignore-end */
