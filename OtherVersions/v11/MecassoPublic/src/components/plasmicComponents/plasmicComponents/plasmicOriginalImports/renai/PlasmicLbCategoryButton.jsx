// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: 9kwQ9FvLYN
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicLbCategoryButton.module.css"; // plasmic-import: 9kwQ9FvLYN/css

export const PlasmicLbCategoryButton__VariantProps = new Array("selected");

export const PlasmicLbCategoryButton__ArgProps = new Array("buttoninnertext");

function PlasmicLbCategoryButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootselected]: hasVariant(variants, "selected", "selected") }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Top 10",
        value: args.buttoninnertext,
        className: classNames(sty.slotTargetButtoninnertext, {
          [sty.slotTargetButtoninnertextselected]: hasVariant(
            variants,
            "selected",
            "selected"
          )
        })
      })}
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLbCategoryButton__ArgProps,
      internalVariantPropNames: PlasmicLbCategoryButton__VariantProps
    });

    return PlasmicLbCategoryButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLbCategoryButton";
  } else {
    func.displayName = `PlasmicLbCategoryButton.${nodeName}`;
  }
  return func;
}

export const PlasmicLbCategoryButton = Object.assign(
  // Top-level PlasmicLbCategoryButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLbCategoryButton
    internalVariantProps: PlasmicLbCategoryButton__VariantProps,
    internalArgProps: PlasmicLbCategoryButton__ArgProps
  }
);

export default PlasmicLbCategoryButton;
/* prettier-ignore-end */
