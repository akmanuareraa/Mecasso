// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: PDGT-hyLQAG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import TextInput from "../../../TextInput"; // plasmic-import: QSTyVh7IuMa/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicEmailSignUp.module.css"; // plasmic-import: PDGT-hyLQAG/css
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture
import gmail200PxpngJFts74Cwt from "./images/gmail200Pxpng.png"; // plasmic-import: JFts74cwt/picture

export const PlasmicEmailSignUp__VariantProps = new Array(
  "emailconfirmation",
  "usernameerror",
  "emailerror",
  "passworderror",
  "passwordpolicyerror",
  "emailformaterror",
  "loading",
  "emptyfields"
);

export const PlasmicEmailSignUp__ArgProps = new Array("onClick");

function PlasmicEmailSignUp__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"signUpPageRoot"}
          data-plasmic-override={overrides.signUpPageRoot}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.signUpPageRoot,
            {
              [sty.signUpPageRootemailconfirmation]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.signUpPageRootemailerror]: hasVariant(
                variants,
                "emailerror",
                "emailerror"
              ),

              [sty.signUpPageRootemailformaterror]: hasVariant(
                variants,
                "emailformaterror",
                "emailformaterror"
              ),

              [sty.signUpPageRootemptyfields]: hasVariant(
                variants,
                "emptyfields",
                "emptyfields"
              ),

              [sty.signUpPageRootloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.signUpPageRootpassworderror]: hasVariant(
                variants,
                "passworderror",
                "passworderror"
              ),

              [sty.signUpPageRootpasswordpolicyerror]: hasVariant(
                variants,
                "passwordpolicyerror",
                "passwordpolicyerror"
              ),

              [sty.signUpPageRootusernameerror]: hasVariant(
                variants,
                "usernameerror",
                "usernameerror"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"signUpPage"}
            data-plasmic-override={overrides.signUpPage}
            hasGap={true}
            className={classNames(projectcss.all, sty.signUpPage, {
              [sty.signUpPageemailconfirmation]: hasVariant(
                variants,
                "emailconfirmation",
                "emailconfirmation"
              ),

              [sty.signUpPageemailerror]: hasVariant(
                variants,
                "emailerror",
                "emailerror"
              ),

              [sty.signUpPageemptyfields]: hasVariant(
                variants,
                "emptyfields",
                "emptyfields"
              ),

              [sty.signUpPageloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.signUpPagepassworderror]: hasVariant(
                variants,
                "passworderror",
                "passworderror"
              ),

              [sty.signUpPageusernameerror]: hasVariant(
                variants,
                "usernameerror",
                "usernameerror"
              )
            })}
          >
            {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
              <TopNavBar
                data-plasmic-name={"topNavBar"}
                data-plasmic-override={overrides.topNavBar}
                className={classNames("__wab_instance", sty.topNavBar)}
              />
            ) : null}
            {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
              <ScreenAlert
                data-plasmic-name={"screenAlert"}
                data-plasmic-override={overrides.screenAlert}
                className={classNames("__wab_instance", sty.screenAlert)}
              />
            ) : null}
            {(
              hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? false
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"headingText"}
                data-plasmic-override={overrides.headingText}
                hasGap={true}
                className={classNames(projectcss.all, sty.headingText, {
                  [sty.headingTextemailconfirmation]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.headingTextloading]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),

                  [sty.headingTextusernameerror]: hasVariant(
                    variants,
                    "usernameerror",
                    "usernameerror"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sqHjn,
                    {
                      [sty.textemailconfirmation__sqHjnUwja6]: hasVariant(
                        variants,
                        "emailconfirmation",
                        "emailconfirmation"
                      ),

                      [sty.textloading__sqHjnGueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.textusernameerror__sqHjnwmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    }
                  )}
                >
                  {"Sign Up"}
                </div>
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? false
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"signupbuttonstack"}
                data-plasmic-override={overrides.signupbuttonstack}
                hasGap={true}
                className={classNames(projectcss.all, sty.signupbuttonstack, {
                  [sty.signupbuttonstackemailconfirmation]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.signupbuttonstackemailerror]: hasVariant(
                    variants,
                    "emailerror",
                    "emailerror"
                  ),

                  [sty.signupbuttonstackemailformaterror]: hasVariant(
                    variants,
                    "emailformaterror",
                    "emailformaterror"
                  ),

                  [sty.signupbuttonstackloading]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),

                  [sty.signupbuttonstackpassworderror]: hasVariant(
                    variants,
                    "passworderror",
                    "passworderror"
                  ),

                  [sty.signupbuttonstackusernameerror]: hasVariant(
                    variants,
                    "usernameerror",
                    "usernameerror"
                  )
                })}
              >
                {(
                  hasVariant(variants, "loading", "loading")
                    ? true
                    : hasVariant(variants, "usernameerror", "usernameerror")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___42Tot, {
                      [sty.freeBoxloading___42TotgueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.freeBoxusernameerror___42ToTwmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    })}
                  >
                    {(
                      hasVariant(variants, "loading", "loading") ? true : true
                    ) ? (
                      <TextInput
                        data-plasmic-name={"firstname"}
                        data-plasmic-override={overrides.firstname}
                        className={classNames("__wab_instance", sty.firstname, {
                          [sty.firstnameemailerror]: hasVariant(
                            variants,
                            "emailerror",
                            "emailerror"
                          ),

                          [sty.firstnameloading]: hasVariant(
                            variants,
                            "loading",
                            "loading"
                          ),

                          [sty.firstnameusernameerror]: hasVariant(
                            variants,
                            "usernameerror",
                            "usernameerror"
                          )
                        })}
                      />
                    ) : null}
                    {(
                      hasVariant(variants, "loading", "loading")
                        ? false
                        : hasVariant(variants, "usernameerror", "usernameerror")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__extbA,
                          {
                            [sty.textloading__extbAgueU]: hasVariant(
                              variants,
                              "loading",
                              "loading"
                            ),

                            [sty.textusernameerror__extbAwmERm]: hasVariant(
                              variants,
                              "usernameerror",
                              "usernameerror"
                            )
                          }
                        )}
                      >
                        {"Username already exists"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wohFe, {
                      [sty.freeBoxemailerror__wohFe9009S]: hasVariant(
                        variants,
                        "emailerror",
                        "emailerror"
                      ),

                      [sty.freeBoxemailformaterror__wohFeCuBuc]: hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      ),

                      [sty.freeBoxloading__wohFeGueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.freeBoxusernameerror__wohFewmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    })}
                  >
                    {(
                      hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      )
                        ? true
                        : hasVariant(variants, "emailerror", "emailerror")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wqFbj,
                          {
                            [sty.textemailerror__wqFbj9009S]: hasVariant(
                              variants,
                              "emailerror",
                              "emailerror"
                            ),

                            [sty.textemailformaterror__wqFbjCuBuc]: hasVariant(
                              variants,
                              "emailformaterror",
                              "emailformaterror"
                            )
                          }
                        )}
                      >
                        {hasVariant(
                          variants,
                          "emailformaterror",
                          "emailformaterror"
                        )
                          ? "Invalid Email Address"
                          : "Email already exists"}
                      </div>
                    ) : null}

                    <TextInput
                      data-plasmic-name={"lastname"}
                      data-plasmic-override={overrides.lastname}
                      className={classNames("__wab_instance", sty.lastname, {
                        [sty.lastnameemailerror]: hasVariant(
                          variants,
                          "emailerror",
                          "emailerror"
                        ),

                        [sty.lastnameloading]: hasVariant(
                          variants,
                          "loading",
                          "loading"
                        ),

                        [sty.lastnameusernameerror]: hasVariant(
                          variants,
                          "usernameerror",
                          "usernameerror"
                        )
                      })}
                    />
                  </div>
                ) : null}
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qlYiu, {
                      [sty.freeBoxemailerror__qlYiu9009S]: hasVariant(
                        variants,
                        "emailerror",
                        "emailerror"
                      ),

                      [sty.freeBoxemailformaterror__qlYiuCuBuc]: hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      ),

                      [sty.freeBoxloading__qlYiugueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.freeBoxusernameerror__qlYiUwmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    })}
                  >
                    <TextInput
                      data-plasmic-name={"username"}
                      data-plasmic-override={overrides.username}
                      className={classNames("__wab_instance", sty.username, {
                        [sty.usernameloading]: hasVariant(
                          variants,
                          "loading",
                          "loading"
                        ),

                        [sty.usernameusernameerror]: hasVariant(
                          variants,
                          "usernameerror",
                          "usernameerror"
                        )
                      })}
                    />

                    {(
                      hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      )
                        ? true
                        : hasVariant(variants, "emailerror", "emailerror")
                        ? true
                        : hasVariant(variants, "usernameerror", "usernameerror")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wPmAh,
                          {
                            [sty.textemailerror__wPmAh9009S]: hasVariant(
                              variants,
                              "emailerror",
                              "emailerror"
                            ),

                            [sty.textemailformaterror__wPmAhCuBuc]: hasVariant(
                              variants,
                              "emailformaterror",
                              "emailformaterror"
                            ),

                            [sty.textusernameerror__wPmAhwmERm]: hasVariant(
                              variants,
                              "usernameerror",
                              "usernameerror"
                            )
                          }
                        )}
                      >
                        {hasVariant(
                          variants,
                          "emailformaterror",
                          "emailformaterror"
                        )
                          ? "Invalid Email Address"
                          : "Username already exists"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tgXjZ, {
                      [sty.freeBoxemailerror__tgXjZ9009S]: hasVariant(
                        variants,
                        "emailerror",
                        "emailerror"
                      ),

                      [sty.freeBoxemailformaterror__tgXjZCuBuc]: hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      ),

                      [sty.freeBoxloading__tgXjZgueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.freeBoxusernameerror__tgXjZwmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    })}
                  >
                    <TextInput
                      data-plasmic-name={"mail"}
                      data-plasmic-override={overrides.mail}
                      className={classNames("__wab_instance", sty.mail, {
                        [sty.mailloading]: hasVariant(
                          variants,
                          "loading",
                          "loading"
                        ),

                        [sty.mailusernameerror]: hasVariant(
                          variants,
                          "usernameerror",
                          "usernameerror"
                        )
                      })}
                    />

                    {(
                      hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      )
                        ? true
                        : hasVariant(variants, "emailerror", "emailerror")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qfmxn,
                          {
                            [sty.textemailerror__qfmxn9009S]: hasVariant(
                              variants,
                              "emailerror",
                              "emailerror"
                            ),

                            [sty.textemailformaterror__qfmxnCuBuc]: hasVariant(
                              variants,
                              "emailformaterror",
                              "emailformaterror"
                            )
                          }
                        )}
                      >
                        {hasVariant(
                          variants,
                          "emailformaterror",
                          "emailformaterror"
                        )
                          ? "Invalid Email Address"
                          : "Email already exists"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1WZtc, {
                      [sty.freeBoxemailformaterror___1WZtcCuBuc]: hasVariant(
                        variants,
                        "emailformaterror",
                        "emailformaterror"
                      ),

                      [sty.freeBoxloading___1WZtcGueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.freeBoxpassworderror___1WZtcl9UV]: hasVariant(
                        variants,
                        "passworderror",
                        "passworderror"
                      ),

                      [sty.freeBoxusernameerror___1WZtcwmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    })}
                  >
                    <TextInput
                      data-plasmic-name={"password"}
                      data-plasmic-override={overrides.password}
                      className={classNames("__wab_instance", sty.password, {
                        [sty.passwordpassworderror]: hasVariant(
                          variants,
                          "passworderror",
                          "passworderror"
                        )
                      })}
                    />

                    {(
                      hasVariant(variants, "passworderror", "passworderror")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__palaz,
                          {
                            [sty.textpassworderror__palazl9UV]: hasVariant(
                              variants,
                              "passworderror",
                              "passworderror"
                            )
                          }
                        )}
                      >
                        {"Passwords does not match"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___02WW6, {
                      [sty.freeBoxloading___02WW6GueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.freeBoxpassworderror___02WW6L9UV]: hasVariant(
                        variants,
                        "passworderror",
                        "passworderror"
                      ),

                      [sty.freeBoxusernameerror___02WW6WmERm]: hasVariant(
                        variants,
                        "usernameerror",
                        "usernameerror"
                      )
                    })}
                  >
                    <TextInput
                      data-plasmic-name={"confirmpassword"}
                      data-plasmic-override={overrides.confirmpassword}
                      className={classNames(
                        "__wab_instance",
                        sty.confirmpassword,
                        {
                          [sty.confirmpasswordloading]: hasVariant(
                            variants,
                            "loading",
                            "loading"
                          )
                        }
                      )}
                    />

                    {(
                      hasVariant(variants, "passworderror", "passworderror")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___92M5K,
                          {
                            [sty.textpassworderror___92M5Kl9UV]: hasVariant(
                              variants,
                              "passworderror",
                              "passworderror"
                            )
                          }
                        )}
                      >
                        {"Passwords does not match"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(hasVariant(variants, "loading", "loading") ? true : true) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nAd17, {
                      [sty.imgloading__nAd17GueU]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"200px"}
                    loading={"lazy"}
                    src={{
                      src: loadingsvg2TDO0NZVmL,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? true
                : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gccgl, {
                  [sty.freeBoxemailconfirmation__gccgluwja6]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.freeBoxloading__gccglgueU]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  )
                })}
              >
                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5DeGc
                    )}
                  >
                    {
                      "An email has been sent to you. Please confirm your email address."
                    }
                  </div>
                ) : null}
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___0E0By)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"118px"}
                    loading={"lazy"}
                    src={{
                      src: gmail200PxpngJFts74Cwt,
                      fullWidth: 200,
                      fullHeight: 200,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? true
                : true
            ) ? (
              <Button
                data-plasmic-name={"redirecttologinbutton"}
                data-plasmic-override={overrides.redirecttologinbutton}
                className={classNames(
                  "__wab_instance",
                  sty.redirecttologinbutton,
                  {
                    [sty.redirecttologinbuttonemailconfirmation]: hasVariant(
                      variants,
                      "emailconfirmation",
                      "emailconfirmation"
                    )
                  }
                )}
              />
            ) : null}
            {(
              hasVariant(variants, "emptyfields", "emptyfields") ? true : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qKlvx,
                  {
                    [sty.textemptyfields__qKlvXsKcIv]: hasVariant(
                      variants,
                      "emptyfields",
                      "emptyfields"
                    )
                  }
                )}
              >
                {"Please fill all required fields"}
              </div>
            ) : null}
            {(
              hasVariant(variants, "emailconfirmation", "emailconfirmation")
                ? false
                : true
            ) ? (
              <Button
                data-plasmic-name={"submitbutton"}
                data-plasmic-override={overrides.submitbutton}
                className={classNames("__wab_instance", sty.submitbutton, {
                  [sty.submitbuttonemailconfirmation]: hasVariant(
                    variants,
                    "emailconfirmation",
                    "emailconfirmation"
                  ),

                  [sty.submitbuttonemailerror]: hasVariant(
                    variants,
                    "emailerror",
                    "emailerror"
                  ),

                  [sty.submitbuttonloading]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),

                  [sty.submitbuttonusernameerror]: hasVariant(
                    variants,
                    "usernameerror",
                    "usernameerror"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mDAyR
                  )}
                >
                  {"Button"}
                </div>
              </Button>
            ) : null}
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  signUpPageRoot: [
    "signUpPageRoot",
    "signUpPage",
    "topNavBar",
    "screenAlert",
    "headingText",
    "signupbuttonstack",
    "firstname",
    "lastname",
    "username",
    "mail",
    "password",
    "confirmpassword",
    "redirecttologinbutton",
    "submitbutton"
  ],

  signUpPage: [
    "signUpPage",
    "topNavBar",
    "screenAlert",
    "headingText",
    "signupbuttonstack",
    "firstname",
    "lastname",
    "username",
    "mail",
    "password",
    "confirmpassword",
    "redirecttologinbutton",
    "submitbutton"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  headingText: ["headingText"],
  signupbuttonstack: [
    "signupbuttonstack",
    "firstname",
    "lastname",
    "username",
    "mail",
    "password",
    "confirmpassword"
  ],

  firstname: ["firstname"],
  lastname: ["lastname"],
  username: ["username"],
  mail: ["mail"],
  password: ["password"],
  confirmpassword: ["confirmpassword"],
  redirecttologinbutton: ["redirecttologinbutton"],
  submitbutton: ["submitbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmailSignUp__ArgProps,
      internalVariantPropNames: PlasmicEmailSignUp__VariantProps
    });

    return PlasmicEmailSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "signUpPageRoot") {
    func.displayName = "PlasmicEmailSignUp";
  } else {
    func.displayName = `PlasmicEmailSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailSignUp = Object.assign(
  // Top-level PlasmicEmailSignUp renders the root element
  makeNodeComponent("signUpPageRoot"),
  {
    // Helper components rendering sub-elements
    signUpPage: makeNodeComponent("signUpPage"),
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    headingText: makeNodeComponent("headingText"),
    signupbuttonstack: makeNodeComponent("signupbuttonstack"),
    firstname: makeNodeComponent("firstname"),
    lastname: makeNodeComponent("lastname"),
    username: makeNodeComponent("username"),
    mail: makeNodeComponent("mail"),
    password: makeNodeComponent("password"),
    confirmpassword: makeNodeComponent("confirmpassword"),
    redirecttologinbutton: makeNodeComponent("redirecttologinbutton"),
    submitbutton: makeNodeComponent("submitbutton"),
    // Metadata about props expected for PlasmicEmailSignUp
    internalVariantProps: PlasmicEmailSignUp__VariantProps,
    internalArgProps: PlasmicEmailSignUp__ArgProps
  }
);

export default PlasmicEmailSignUp;
/* prettier-ignore-end */
