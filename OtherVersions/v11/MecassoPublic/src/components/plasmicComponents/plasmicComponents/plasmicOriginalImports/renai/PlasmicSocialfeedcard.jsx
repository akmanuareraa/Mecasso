// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: EitcxuTfiwr
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicSocialfeedcard.module.css"; // plasmic-import: EitcxuTfiwr/css
import JewelCharmsvgIcon from "./icons/PlasmicIcon__JewelCharmsvg"; // plasmic-import: gD5MEw887/icon
import LikeOutlinesvgIcon from "./icons/PlasmicIcon__LikeOutlinesvg"; // plasmic-import: rEv2pbypY/icon
import LikeFilledsvgIcon from "./icons/PlasmicIcon__LikeFilledsvg"; // plasmic-import: VtYABDRst/icon
import SharePostsvg2Icon from "./icons/PlasmicIcon__SharePostsvg2"; // plasmic-import: U267OFghf/icon
import ExternalLinksvgIcon from "./icons/PlasmicIcon__ExternalLinksvg"; // plasmic-import: kRZyqswZc/icon
import image21RNLgHhObX from "./images/image21.png"; // plasmic-import: rNLgHhObX/picture
import image20IYGemhHf2 from "./images/image20.png"; // plasmic-import: iYGemhHF2/picture

export const PlasmicSocialfeedcard__VariantProps = new Array("liked");

export const PlasmicSocialfeedcard__ArgProps = new Array(
  "postpicture",
  "creatorprofilepic",
  "creatorname",
  "likescount",
  "posttitle",
  "postdescription",
  "timestamp",
  "charmscount",
  "postid",
  "dao",
  "tokenname"
);

function PlasmicSocialfeedcard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;

  const [likes, setLikes] = useState({
    [args.postid]: [args.charmscount],
  });

  const timeConv = (timestamp) => {
    //let time = new Date(timestamp.t*1000);
    let time = new Date(timestamp);
    //console.log(time, "time");
    let formattedTime = time.toString().slice(4, 21);
    return formattedTime;
  };

  const addCharm = (dao, tokenName, publisheddatetime, postId, type) => {
    console.log(
      "user charm balance",
      props.overrides.root.props.mainState.charmBalance
    );
    if (props.overrides.root.props.mainState.charmBalance !== 0) {
      console.log("calling charm backend");
      axios
        .post(config.backendServer + "/mintCharm", { receiver: dao })
        .then(function (response, error) {
          if (response) {
            console.log(response);
            let params = {
              contract: dao,
              tokenName: tokenName,
              publisheddatetime: publisheddatetime,
              transactionDate: Math.floor(Date.now() / 1000),
              postid: postId,
            };
            axios
              .post(config.backendServer + "/addCharmTransaction", params)
              .then(function (response, error) {
                if (response) {
                  console.log(response);
                  console.log(
                    "Charm Added",
                    "props",
                    props,
                    props.overrides.root.props.mainState
                  );
                  props.overrides.root.props.mainState.charmBalance =
                    props.overrides.root.props.mainState.charmBalance - 1;
                  // props.mainState.charmBalance = props.mainState.charmBalance - 1
                } else {
                  console.log(error);
                }
              });
          } else {
            console.log(error);
            let charmBalance = props.mainState.charmBalance + 1;
            props.setMainState((prevState) => {
              return {
                ...prevState,
                charmBalance: charmBalance,
              };
            });
            if (type == 1) {
              setpostlike((prevState) => {
                return {
                  ...prevState,
                  [postId]: prevState[postId] + 1,
                };
              });
            }
          }
        });
    } else {
      alert("Zero Charm Balance");
    }
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__pscre)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__ztrEa)}
              displayHeight={"406px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"404px"}
              loading={"lazy"}
              src={{
                src: image21RNLgHhObX,
                fullWidth: 500,
                fullHeight: 750,
                aspectRatio: undefined,
              }}
            />
          ),

          value: args.postpicture,
        })}
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__kut8V)}>
          {true ? (
            <p.Stack
              as={"button"}
              data-plasmic-name={"profilebutton"}
              data-plasmic-override={overrides.profilebutton}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.profilebutton
              )}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__q9Tc8)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___3Cb9O)}
                        displayHeight={"25px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"25px"}
                        loading={"lazy"}
                        src={{
                          src: image20IYGemhHf2,
                          fullWidth: 387,
                          fullHeight: 581,
                          aspectRatio: undefined,
                        }}
                      />
                    ),

                    value: args.creatorprofilepic,
                  })}
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__ok3Ln)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Ishan Roy",
                  value: args.creatorname,
                  className: classNames(sty.slotTargetCreatorname),
                })}
              </div>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cXYy)}
            >
              {false ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__llr6A)}
                >
                  <JewelCharmsvgIcon
                    className={classNames(projectcss.all, sty.svg___7N66)}
                    role={"img"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wOz0)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "39",
                      value: args.likescount,
                      className: classNames(sty.slotTargetLikescount),
                    })}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bjgEs)}
                >
                  {(hasVariant(variants, "liked", "liked") ? true : true) ? (
                    <button
                      onClick={() => {
                        console.log("clicked from component");
                        console.log(
                          "clicked from component",
                          args.charmscount,
                          args.postid,
                          likes[args.postid]
                        );
                        addCharm(
                          args.dao,
                          args.tokenname,
                          args.timestamp,
                          args.postid,
                          1
                        );
                        setLikes((prevState) => {
                          return {
                            ...prevState,
                            [args.postid]: parseInt(prevState[args.postid]) + 1,
                          };
                        });
                      }}
                      data-plasmic-name={"charmbutton"}
                      data-plasmic-override={overrides.charmbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.charmbutton,
                        {
                          [sty.charmbuttonliked]: hasVariant(
                            variants,
                            "liked",
                            "liked"
                          ),
                        }
                      )}
                    >
                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(variants, "liked", "liked")
                            ? LikeFilledsvgIcon
                            : LikeOutlinesvgIcon
                        }
                        className={classNames(projectcss.all, sty.svg__tzOO, {
                          [sty.svgliked__tzOOC5G4]: hasVariant(
                            variants,
                            "liked",
                            "liked"
                          ),
                        })}
                        role={"img"}
                      />
                    </button>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__jyNiN)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "20",
                      value: likes[args.postid],
                    })}
                  </div>

                  {false ? (
                    <button
                      data-plasmic-name={"sharebutton"}
                      data-plasmic-override={overrides.sharebutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.sharebutton
                      )}
                    >
                      <SharePostsvg2Icon
                        className={classNames(projectcss.all, sty.svg___7HgSx)}
                        role={"img"}
                      />
                    </button>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__u7Cx)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "0",
                    value: args.dao,
                  })}
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__hsJcf)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "0",
                    value: args.tokenname,
                  })}
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__zu2AF)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "0",
                    value: args.postid,
                  })}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox___9Ey8Q)}>
          <div className={classNames(projectcss.all, sty.freeBox___4P5W7)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "First post for the followers of Renai Community and Trying to setup a fixed space for the heading",
              value: args.posttitle,
              className: classNames(sty.slotTargetPosttitle),
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__c8LRb)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. ",
              value: args.postdescription,
              className: classNames(sty.slotTargetPostdescription),
            })}
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__ecAck)}>
        <div className={classNames(projectcss.all, sty.freeBox__wcBl)}>
          {p.renderPlasmicSlot({
            defaultContents: "Dec 12 2021 21:59",
            value: args.timestamp,
            className: classNames(sty.slotTargetTimestamp),
          })}
        </div>

        {true ? (
          <p.Stack
            as={"button"}
            data-plasmic-name={"externallinkbutton"}
            data-plasmic-override={overrides.externallinkbutton}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.externallinkbutton
            )}
          >
            <ExternalLinksvgIcon
              className={classNames(projectcss.all, sty.svg__gdI3K)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"External Link"}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "profilebutton",
    "charmbutton",
    "sharebutton",
    "externallinkbutton",
    "text",
  ],

  profilebutton: ["profilebutton"],
  charmbutton: ["charmbutton"],
  sharebutton: ["sharebutton"],
  externallinkbutton: ["externallinkbutton", "text"],
  text: ["text"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSocialfeedcard__ArgProps,
      internalVariantPropNames: PlasmicSocialfeedcard__VariantProps,
    });

    return PlasmicSocialfeedcard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialfeedcard";
  } else {
    func.displayName = `PlasmicSocialfeedcard.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialfeedcard = Object.assign(
  // Top-level PlasmicSocialfeedcard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profilebutton: makeNodeComponent("profilebutton"),
    charmbutton: makeNodeComponent("charmbutton"),
    sharebutton: makeNodeComponent("sharebutton"),
    externallinkbutton: makeNodeComponent("externallinkbutton"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicSocialfeedcard
    internalVariantProps: PlasmicSocialfeedcard__VariantProps,
    internalArgProps: PlasmicSocialfeedcard__ArgProps,
  }
);

export default PlasmicSocialfeedcard;
/* prettier-ignore-end */
