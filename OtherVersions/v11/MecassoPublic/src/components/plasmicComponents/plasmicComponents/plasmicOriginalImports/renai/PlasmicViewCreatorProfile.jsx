// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: S3Z2-bjrYEx
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicViewCreatorProfile.module.css"; // plasmic-import: S3Z2-bjrYEx/css
import PolygonMaticLogosvgIcon from "./icons/PlasmicIcon__PolygonMaticLogosvg"; // plasmic-import: FMeo6bykj/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: IsBHC9HQFEd/icon
import arrow233Png1Ht3Ij9Y from "./images/arrow233Png.png"; // plasmic-import: 1-HT3Ij9y/picture
import maleUser480Pxpng2EH7EoyOk2 from "./images/maleUser480Pxpng2.png"; // plasmic-import: eH7eoyOK2/picture
import image11SGlvfvWa7 from "./images/image11.png"; // plasmic-import: sGlvfvWa7/picture

export const PlasmicViewCreatorProfile__VariantProps = new Array(
  "profileoverlay",
  "authoverlay",
  "notloggedin",
  "loggedin"
);

export const PlasmicViewCreatorProfile__ArgProps = new Array(
  "overlaycreatorname",
  "overlaycategory",
  "overlaycreatortype",
  "errormessage",
  "profilepic",
  "creatorname",
  "tokensymbol",
  "tokenname",
  "category",
  "tokenprice",
  "description",
  "creatoraddr",
  "daoaddr",
  "overlayuserprofilepic",
  "uploadbuttonslot",
  "statscomponent",
  "maxcap",
  "supply",
  "creatorbal",
  "donutchart"
);

function PlasmicViewCreatorProfile__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootauthoverlay]: hasVariant(
                variants,
                "authoverlay",
                "authoverlay"
              ),

              [sty.rootloggedin]: hasVariant(variants, "loggedin", "loggedin"),
              [sty.rootnotloggedin]: hasVariant(
                variants,
                "notloggedin",
                "notloggedin"
              ),

              [sty.rootprofileoverlay]: hasVariant(
                variants,
                "profileoverlay",
                "profileoverlay"
              )
            }
          )}
        >
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox___5I5Uv)}>
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage)
              })}
            </div>
          ) : null}

          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />

          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___8XHGr)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fsJoR)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jwHt
                  )}
                >
                  {"Profile"}
                </div>
              </p.Stack>
            ) : null}
          </div>

          {(
            hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___5SgRr, {
                [sty.freeBoxauthoverlay___5SgRrJjctz]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.freeBoxprofileoverlay___5SgRrHlgNo]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__yarbt, {
                    [sty.freeBoxauthoverlay__yarbtjjctz]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__yarbtHlgNo]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <button
                      data-plasmic-name={"backbutton"}
                      data-plasmic-override={overrides.backbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.backbutton,
                        {
                          [sty.backbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.backbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img, {
                          [sty.imgauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.imgprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"37px"}
                        loading={"lazy"}
                        src={{
                          src: arrow233Png1Ht3Ij9Y,
                          fullWidth: 640,
                          fullHeight: 640,
                          aspectRatio: undefined
                        }}
                      />
                    </button>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__pqdY, {
                    [sty.freeBoxauthoverlay__pqdYjjctz]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__pqdYHlgNo]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gUdu,
                        {
                          [sty.textauthoverlay__gUduJjctz]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.textprofileoverlay__gUduHlgNo]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {hasVariant(variants, "authoverlay", "authoverlay")
                        ? "Renai"
                        : "Manu Areraa"}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__sazRh,
                        {
                          [sty.freeBoxauthoverlay__sazRhJjctz]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__sazRhHlgNo]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Manu Areraa",
                        value: args.overlaycreatorname,
                        className: classNames(
                          sty.slotTargetOverlaycreatorname,
                          {
                            [sty.slotTargetOverlaycreatornameauthoverlay]:
                              hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                            [sty.slotTargetOverlaycreatornameprofileoverlay]:
                              hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                          }
                        )
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__zxRyy,
                        {
                          [sty.freeBoxauthoverlay__zxRyyJjctz]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__zxRyyHlgNo]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wBZeb,
                            {
                              [sty.freeBoxauthoverlay__wBZebJjctz]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay__wBZebHlgNo]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Cooking",
                            value: args.overlaycategory,
                            className: classNames(
                              sty.slotTargetOverlaycategory,
                              {
                                [sty.slotTargetOverlaycategoryauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycategoryprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Vkce,
                            {
                              [sty.textauthoverlay___0Vkcejjctz]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.textprofileoverlay___0VkceHlgNo]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {" | "}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v8P66,
                            {
                              [sty.freeBoxauthoverlay__v8P66Jjctz]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay__v8P66HlgNo]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Influencer",
                            value: args.overlaycreatortype,
                            className: classNames(
                              sty.slotTargetOverlaycreatortype,
                              {
                                [sty.slotTargetOverlaycreatortypeauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycreatortypeprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "profileoverlay", "profileoverlay")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pf1Ud,
                            {
                              [sty.textprofileoverlay__pf1UdHlgNo]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {"|  Young Stars"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox__geDeg, {
                  [sty.freeBoxprofileoverlay__geDegHlgNo]: hasVariant(
                    variants,
                    "profileoverlay",
                    "profileoverlay"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__twiUp)}
                      displayHeight={"290px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"290px"}
                      loading={"lazy"}
                      src={{
                        src: maleUser480Pxpng2EH7EoyOk2,
                        fullWidth: 480,
                        fullHeight: 480,
                        aspectRatio: undefined
                      }}
                    />
                  ),

                  value: args.overlayuserprofilepic
                })}
              </div>

              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6Apy1, {
                    [sty.freeBoxauthoverlay___6Apy1Jjctz]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay___6Apy1HlgNo]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"loginbutton"}
                      data-plasmic-override={overrides.loginbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.loginbutton,
                        {
                          [sty.loginbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.loginbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dQiso,
                          {
                            [sty.textauthoverlay__dQisoJjctz]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__dQisoHlgNo]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "Login"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"signupbutton"}
                      data-plasmic-override={overrides.signupbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.signupbutton,
                        {
                          [sty.signupbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.signupbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Xjto,
                          {
                            [sty.textauthoverlay___5XjtoJjctz]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay___5XjtoHlgNo]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "SignUp"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__hXkDc,
                        {
                          [sty.freeBoxauthoverlay__hXkDcJjctz]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__hXkDcHlgNo]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__vbCrS
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__luW7O
                              )}
                            >
                              {"Upload Profile Photo"}
                            </div>
                          </p.Stack>
                        ),

                        value: args.uploadbuttonslot
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"logoutbutton"}
                      data-plasmic-override={overrides.logoutbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.logoutbutton,
                        {
                          [sty.logoutbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.logoutbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__evCi7,
                          {
                            [sty.textauthoverlay__evCi7Jjctz]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__evCi7HlgNo]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Logout"}
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oO5Jr)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__mPOmP)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__y4No3)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nt9HS
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ej0Q8
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img___4X6Bo)}
                                  displayHeight={"90px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"90px"}
                                  loading={"lazy"}
                                  src={{
                                    src: image11SGlvfvWa7,
                                    fullWidth: 500,
                                    fullHeight: 432,
                                    aspectRatio: undefined
                                  }}
                                />
                              ),

                              value: args.profilepic
                            })}
                          </div>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xiwsX
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__d2Eue
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: "Jone Paul",
                                value: args.creatorname,
                                className: classNames(sty.slotTargetCreatorname)
                              })}
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__isO2F
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___31MIy
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: "PBO",
                                  value: args.tokensymbol,
                                  className: classNames(
                                    sty.slotTargetTokensymbol
                                  )
                                })}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__h49V6
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: "Pablo",
                                  value: args.tokenname,
                                  className: classNames(sty.slotTargetTokenname)
                                })}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ibtfg
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Cooking",
                            value: args.category,
                            className: classNames(sty.slotTargetCategory)
                          })}
                        </div>
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gMAiU
                        )}
                      >
                        <button
                          data-plasmic-name={"buybutton"}
                          data-plasmic-override={overrides.buybutton}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.buybutton
                          )}
                        >
                          {"BUY"}
                        </button>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rrSh4
                          )}
                        >
                          <PolygonMaticLogosvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xstSg
                            )}
                            role={"img"}
                          />

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vGFp
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___1Q76V
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: "5.7 ",
                                  value: args.tokenprice,
                                  className: classNames(
                                    sty.slotTargetTokenprice
                                  )
                                })}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___24Pii
                                )}
                              >
                                {" MATIC"}
                              </div>
                            </div>
                          ) : null}
                        </p.Stack>
                      </div>
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox__fdUdH)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents:
                          "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. ",
                        value: args.description,
                        className: classNames(sty.slotTargetDescription)
                      })}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__p9O)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cbaus)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ab135
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zExOs
                          )}
                        >
                          {"Creator : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wu0Mw
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents:
                              "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f",
                            value: args.creatoraddr,
                            className: classNames(sty.slotTargetCreatoraddr)
                          })}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__en0Ku
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a9Fc
                          )}
                        >
                          {"DAO : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vgyHz
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents:
                              "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f",
                            value: args.daoaddr,
                            className: classNames(sty.slotTargetDaoaddr)
                          })}
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zBHeO
                      )}
                    >
                      {"Token Distribution"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__qx8)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: null,
                        value: args.donutchart
                      })}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__trNt5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rs9U
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cs5Ph
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "100 Mn",
                            value: args.maxcap,
                            className: classNames(sty.slotTargetMaxcap)
                          })}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dBgI
                          )}
                        >
                          {"Max Cap"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nXuDv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jFma
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "24.66 Mn",
                            value: args.supply,
                            className: classNames(sty.slotTargetSupply)
                          })}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ti6JG
                          )}
                        >
                          {"Total Supply"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z6BUx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6Mi3T
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "985k",
                            value: args.creatorbal,
                            className: classNames(sty.slotTargetCreatorbal)
                          })}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u6TJy
                          )}
                        >
                          {"Creator"}
                        </div>
                      </div>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__eYp4Z)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: null,
                        value: args.statscomponent
                      })}
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__zEmWp)}>
            <Button
              data-plasmic-name={"previouspagebutton"}
              data-plasmic-override={overrides.previouspagebutton}
              className={classNames("__wab_instance", sty.previouspagebutton)}
              startIcon={
                true ? (
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__o92W)}
                    role={"img"}
                  />
                ) : null
              }
            >
              {"Go Back"}
            </Button>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__s9SDw)} />

          {(
            hasVariant(variants, "loggedin", "loggedin")
              ? true
              : hasVariant(variants, "notloggedin", "notloggedin")
              ? true
              : hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <Navbartwo
              data-plasmic-name={"navbartwo"}
              data-plasmic-override={overrides.navbartwo}
              className={classNames("__wab_instance", sty.navbartwo, {
                [sty.navbartwoauthoverlay]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.navbartwologgedin]: hasVariant(
                  variants,
                  "loggedin",
                  "loggedin"
                ),

                [sty.navbartwonotloggedin]: hasVariant(
                  variants,
                  "notloggedin",
                  "notloggedin"
                ),

                [sty.navbartwoprofileoverlay]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
              lbtoggle={true}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "screenAlert",
    "backbutton",
    "img",
    "loginbutton",
    "signupbutton",
    "logoutbutton",
    "buybutton",
    "previouspagebutton",
    "navbartwo"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  backbutton: ["backbutton", "img"],
  img: ["img"],
  loginbutton: ["loginbutton"],
  signupbutton: ["signupbutton"],
  logoutbutton: ["logoutbutton"],
  buybutton: ["buybutton"],
  previouspagebutton: ["previouspagebutton"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicViewCreatorProfile__ArgProps,
      internalVariantPropNames: PlasmicViewCreatorProfile__VariantProps
    });

    return PlasmicViewCreatorProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewCreatorProfile";
  } else {
    func.displayName = `PlasmicViewCreatorProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicViewCreatorProfile = Object.assign(
  // Top-level PlasmicViewCreatorProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    backbutton: makeNodeComponent("backbutton"),
    img: makeNodeComponent("img"),
    loginbutton: makeNodeComponent("loginbutton"),
    signupbutton: makeNodeComponent("signupbutton"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    buybutton: makeNodeComponent("buybutton"),
    previouspagebutton: makeNodeComponent("previouspagebutton"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicViewCreatorProfile
    internalVariantProps: PlasmicViewCreatorProfile__VariantProps,
    internalArgProps: PlasmicViewCreatorProfile__ArgProps
  }
);

export default PlasmicViewCreatorProfile;
/* prettier-ignore-end */
