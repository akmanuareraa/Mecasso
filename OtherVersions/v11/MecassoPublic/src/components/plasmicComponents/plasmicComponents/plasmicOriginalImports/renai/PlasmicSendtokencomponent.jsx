// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: SCf9T5aUfY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Tokeninput from "../../../Tokeninput"; // plasmic-import: YryvDymI0QD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicSendtokencomponent.module.css"; // plasmic-import: SCf9T5aUfY/css
import BuySendTxnSuccesssvgIcon from "./icons/PlasmicIcon__BuySendTxnSuccesssvg"; // plasmic-import: wZWPQV2t5/icon
import BuySendTxnFailsvgIcon from "./icons/PlasmicIcon__BuySendTxnFailsvg"; // plasmic-import: Cu-cs1vCl/icon
import DownButtonsvgIcon from "./icons/PlasmicIcon__DownButtonsvg"; // plasmic-import: IaTPxY3pI/icon
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture

export const PlasmicSendtokencomponent__VariantProps = new Array(
  "success",
  "failed",
  "loading"
);

export const PlasmicSendtokencomponent__ArgProps = new Array(
  "tokensymbolone",
  "tokenprice",
  "tokensymboltwo",
  "amounttopay",
  "txnhash"
);

function PlasmicSendtokencomponent__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootfailed]: hasVariant(variants, "failed", "failed"),
          [sty.rootloading]: hasVariant(variants, "loading", "loading"),
          [sty.rootsuccess]: hasVariant(variants, "success", "success")
        }
      )}
    >
      {(
        hasVariant(variants, "loading", "loading")
          ? true
          : hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__apGvO, {
            [sty.freeBoxfailed__apGvOhMcdY]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__apGvOn78X]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__apGvOYgoTb]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dMxop)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zgJH
                )}
              >
                {"Send"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__mbJJs)}>
                {p.renderPlasmicSlot({
                  defaultContents: "PBO",
                  value: args.tokensymbolone,
                  className: classNames(sty.slotTargetTokensymbolone)
                })}
              </div>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "loading", "loading")
          ? true
          : hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__tubI0, {
            [sty.freeBoxfailed__tubI0HMcdY]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__tubI0N78X]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__tubI0YgoTb]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jr6V5)}>
            {p.renderPlasmicSlot({
              defaultContents: "0.474",
              value: args.tokenprice,
              className: classNames(sty.slotTargetTokenprice)
            })}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__imztR
            )}
          >
            {"MATIC"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zxFjH
            )}
          >
            {"per"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___6FTxX)}>
            {p.renderPlasmicSlot({
              defaultContents: "PBO",
              value: args.tokensymboltwo,
              className: classNames(sty.slotTargetTokensymboltwo)
            })}
          </div>

          {false ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lzeVi
              )}
            >
              {"PBO"}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "loading", "loading")
          ? true
          : hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___4LpG, {
            [sty.freeBoxfailed___4LpGhMcdY]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading___4LpGN78X]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess___4LpGYgoTb]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ks3P)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pYeb)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s3Izb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xmiZp
                        )}
                      >
                        {"Receiver's Address"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tBfdk
                        )}
                      >
                        <input
                          data-plasmic-name={"receiverinput"}
                          data-plasmic-override={overrides.receiverinput}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.receiverinput
                          )}
                          placeholder={"Enter Receiver Address"}
                          size={1}
                          type={"text"}
                        />
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jrJfk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sFtts
                        )}
                      >
                        {"Tokens to Send"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hhiMr
                        )}
                      >
                        <input
                          data-plasmic-name={"tokenamountinput"}
                          data-plasmic-override={overrides.tokenamountinput}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.tokenamountinput
                          )}
                          placeholder={"Amount of Tokens to Send"}
                          size={1}
                          type={"text"}
                        />
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "loading", "loading")
          ? true
          : hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : true
      ) ? (
        <button
          data-plasmic-name={"sendbutton"}
          data-plasmic-override={overrides.sendbutton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.sendbutton,
            {
              [sty.sendbuttonfailed]: hasVariant(variants, "failed", "failed"),
              [sty.sendbuttonloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.sendbuttonsuccess]: hasVariant(
                variants,
                "success",
                "success"
              )
            }
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xRvGw
            )}
          >
            {"SEND"}
          </div>
        </button>
      ) : null}
      {(
        hasVariant(variants, "loading", "loading")
          ? true
          : hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__q3NnZ, {
            [sty.freeBoxfailed__q3NnZhMcdY]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__q3NnZn78X]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__q3NnZYgoTb]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__fbVfh, {
                [sty.freeBoxloading__fbVfhn78X]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__znaZq)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e3XCd
                      )}
                    >
                      {"Buy"}
                    </div>
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pnicD,
                      {
                        [sty.textfailed__pnicDhMcdY]: hasVariant(
                          variants,
                          "failed",
                          "failed"
                        ),

                        [sty.textloading__pnicDn78X]: hasVariant(
                          variants,
                          "loading",
                          "loading"
                        )
                      }
                    )}
                  >
                    {hasVariant(variants, "loading", "loading")
                      ? "Transaction Failed"
                      : hasVariant(variants, "failed", "failed")
                      ? "Transaction Failed"
                      : "Transaction Successful"}
                  </div>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <p.PlasmicIcon
              PlasmicIconType={
                hasVariant(variants, "loading", "loading")
                  ? BuySendTxnFailsvgIcon
                  : hasVariant(variants, "failed", "failed")
                  ? BuySendTxnFailsvgIcon
                  : BuySendTxnSuccesssvgIcon
              }
              className={classNames(projectcss.all, sty.svg___7OGtk, {
                [sty.svgfailed___7OGtkhMcdY]: hasVariant(
                  variants,
                  "failed",
                  "failed"
                ),

                [sty.svgloading___7OGtkN78X]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
              role={"img"}
            />
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jd7Qr)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sjaLq
                )}
              >
                {"0.474 MATIC"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1BCva
                )}
              >
                {"per"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dsY8X
                )}
              >
                {"PBO"}
              </div>

              {false ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gp0Gf
                  )}
                >
                  {"PBO"}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__d0Zi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0DCfo
                )}
              >
                {"Pay In"}
              </div>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__ab0IW)}>
              <div className={classNames(projectcss.all, sty.freeBox__lktK3)}>
                <button
                  data-plasmic-name={"maticbutton"}
                  data-plasmic-override={overrides.maticbutton}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.maticbutton
                  )}
                >
                  {"MATIC"}
                </button>

                <button
                  data-plasmic-name={"wdaibutton"}
                  data-plasmic-override={overrides.wdaibutton}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.wdaibutton
                  )}
                >
                  {"WDAI"}
                </button>

                <button
                  data-plasmic-name={"wethbutton"}
                  data-plasmic-override={overrides.wethbutton}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.wethbutton
                  )}
                >
                  {"WETH"}
                </button>
              </div>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__s6D0S)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hMv0N)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sbX7M)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o0O8E
                        )}
                      >
                        {"Tokens to Buy"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nmssz
                        )}
                      >
                        <Tokeninput
                          data-plasmic-name={"tokeninput"}
                          data-plasmic-override={overrides.tokeninput}
                          className={classNames(
                            "__wab_instance",
                            sty.tokeninput
                          )}
                        />
                      </div>
                    </div>
                  ) : null}

                  <DownButtonsvgIcon
                    className={classNames(projectcss.all, sty.svg__bbwws)}
                    role={"img"}
                  />

                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___62EQk
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___69Xby
                        )}
                      >
                        {"Amount to Pay"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__szLyp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cyci
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Enter some text",
                            value: args.amounttopay,
                            className: classNames(sty.slotTargetAmounttopay)
                          })}
                        </div>
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <button
              data-plasmic-name={"buybutton"}
              data-plasmic-override={overrides.buybutton}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.buybutton
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n9Dcy
                )}
              >
                {"GO TO "}
              </div>
            </button>
          ) : null}
          {true ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__cilDj)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: loadingsvg2TDO0NZVmL,
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          ) : null}
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__t6Mds, {
                [sty.freeBoxloading__t6MdsN78X]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            >
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hst2
                  )}
                >
                  {"HASH :: "}
                </div>
              ) : null}
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___7LSdp)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents:
                      "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f",
                    value: args.txnhash,
                    className: classNames(sty.slotTargetTxnhash, {
                      [sty.slotTargetTxnhashfailed]: hasVariant(
                        variants,
                        "failed",
                        "failed"
                      ),

                      [sty.slotTargetTxnhashloading]: hasVariant(
                        variants,
                        "loading",
                        "loading"
                      ),

                      [sty.slotTargetTxnhashsuccess]: hasVariant(
                        variants,
                        "success",
                        "success"
                      )
                    })
                  })}
                </div>
              ) : null}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "loading", "loading") ? true : true) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__f8DAl, {
            [sty.imgloading__f8DAln78X]: hasVariant(
              variants,
              "loading",
              "loading"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: loadingsvg2TDO0NZVmL,
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "receiverinput",
    "tokenamountinput",
    "sendbutton",
    "maticbutton",
    "wdaibutton",
    "wethbutton",
    "tokeninput",
    "buybutton"
  ],

  receiverinput: ["receiverinput"],
  tokenamountinput: ["tokenamountinput"],
  sendbutton: ["sendbutton"],
  maticbutton: ["maticbutton"],
  wdaibutton: ["wdaibutton"],
  wethbutton: ["wethbutton"],
  tokeninput: ["tokeninput"],
  buybutton: ["buybutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSendtokencomponent__ArgProps,
      internalVariantPropNames: PlasmicSendtokencomponent__VariantProps
    });

    return PlasmicSendtokencomponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSendtokencomponent";
  } else {
    func.displayName = `PlasmicSendtokencomponent.${nodeName}`;
  }
  return func;
}

export const PlasmicSendtokencomponent = Object.assign(
  // Top-level PlasmicSendtokencomponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    receiverinput: makeNodeComponent("receiverinput"),
    tokenamountinput: makeNodeComponent("tokenamountinput"),
    sendbutton: makeNodeComponent("sendbutton"),
    maticbutton: makeNodeComponent("maticbutton"),
    wdaibutton: makeNodeComponent("wdaibutton"),
    wethbutton: makeNodeComponent("wethbutton"),
    tokeninput: makeNodeComponent("tokeninput"),
    buybutton: makeNodeComponent("buybutton"),
    // Metadata about props expected for PlasmicSendtokencomponent
    internalVariantProps: PlasmicSendtokencomponent__VariantProps,
    internalArgProps: PlasmicSendtokencomponent__ArgProps
  }
);

export default PlasmicSendtokencomponent;
/* prettier-ignore-end */
