// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: uQIJj5y4N9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicPreferencecard.module.css"; // plasmic-import: uQIJj5y4N9/css

export const PlasmicPreferencecard__VariantProps = new Array("selected");

export const PlasmicPreferencecard__ArgProps = new Array("children");

function PlasmicPreferencecard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootselected]: hasVariant(variants, "selected", "selected") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselected]: hasVariant(variants, "selected", "selected")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Art",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenselected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPreferencecard__ArgProps,
      internalVariantPropNames: PlasmicPreferencecard__VariantProps
    });

    return PlasmicPreferencecard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPreferencecard";
  } else {
    func.displayName = `PlasmicPreferencecard.${nodeName}`;
  }
  return func;
}

export const PlasmicPreferencecard = Object.assign(
  // Top-level PlasmicPreferencecard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicPreferencecard
    internalVariantProps: PlasmicPreferencecard__VariantProps,
    internalArgProps: PlasmicPreferencecard__ArgProps
  }
);

export default PlasmicPreferencecard;
/* prettier-ignore-end */
