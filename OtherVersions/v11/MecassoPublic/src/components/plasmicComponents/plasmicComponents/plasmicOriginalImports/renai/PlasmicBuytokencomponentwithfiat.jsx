// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: SgzPTn6v6Dz
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Tokeninput from "../../../Tokeninput"; // plasmic-import: YryvDymI0QD/component
import Fiatbuybutton from "../../../Fiatbuybutton"; // plasmic-import: nf8JE9OOJ2Z/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicBuytokencomponentwithfiat.module.css"; // plasmic-import: SgzPTn6v6Dz/css
import BuySendTxnSuccesssvgIcon from "./icons/PlasmicIcon__BuySendTxnSuccesssvg"; // plasmic-import: wZWPQV2t5/icon
import BuySendTxnFailsvgIcon from "./icons/PlasmicIcon__BuySendTxnFailsvg"; // plasmic-import: Cu-cs1vCl/icon
import DownButtonsvgIcon from "./icons/PlasmicIcon__DownButtonsvg"; // plasmic-import: IaTPxY3pI/icon
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture

export const PlasmicBuytokencomponentwithfiat__VariantProps = new Array(
  "wdai",
  "weth",
  "loading",
  "success",
  "failed"
);

export const PlasmicBuytokencomponentwithfiat__ArgProps = new Array(
  "amounttopay",
  "txnhash",
  "tokensymbolone",
  "tokenprice",
  "tokensymboltwo"
);

function PlasmicBuytokencomponentwithfiat__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootfailed]: hasVariant(variants, "failed", "failed"),
          [sty.rootloading]: hasVariant(variants, "loading", "loading"),
          [sty.rootsuccess]: hasVariant(variants, "success", "success"),
          [sty.rootweth]: hasVariant(variants, "weth", "weth")
        }
      )}
    >
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___1Ntq0, {
            [sty.freeBoxfailed___1Ntq0M9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading___1Ntq0Vh2Bc]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess___1Ntq0VThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tX0ID, {
                [sty.freeBoxfailed__tX0IDm9Nc7]: hasVariant(
                  variants,
                  "failed",
                  "failed"
                )
              })}
            >
              {(
                hasVariant(variants, "failed", "failed")
                  ? true
                  : hasVariant(variants, "success", "success")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__leJSu,
                    {
                      [sty.textfailed__leJSum9Nc7]: hasVariant(
                        variants,
                        "failed",
                        "failed"
                      ),

                      [sty.textsuccess__leJSuVThM]: hasVariant(
                        variants,
                        "success",
                        "success"
                      )
                    }
                  )}
                >
                  {"Buy"}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox__zdDxg, {
                  [sty.freeBoxfailed__zdDxgm9Nc7]: hasVariant(
                    variants,
                    "failed",
                    "failed"
                  ),

                  [sty.freeBoxsuccess__zdDxgVThM]: hasVariant(
                    variants,
                    "success",
                    "success"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "PBO",
                  value: args.tokensymbolone,
                  className: classNames(sty.slotTargetTokensymbolone, {
                    [sty.slotTargetTokensymbolonefailed]: hasVariant(
                      variants,
                      "failed",
                      "failed"
                    ),

                    [sty.slotTargetTokensymbolonesuccess]: hasVariant(
                      variants,
                      "success",
                      "success"
                    ),

                    [sty.slotTargetTokensymbolonewdai]: hasVariant(
                      variants,
                      "wdai",
                      "wdai"
                    ),

                    [sty.slotTargetTokensymboloneweth]: hasVariant(
                      variants,
                      "weth",
                      "weth"
                    )
                  })
                })}
              </div>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__h6Kor, {
            [sty.freeBoxfailed__h6Korm9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__h6Korvh2Bc]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__h6KorVThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tvHw)}
            >
              {(
                hasVariant(variants, "failed", "failed")
                  ? true
                  : hasVariant(variants, "success", "success")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vy5Ps,
                    {
                      [sty.textfailed__vy5Psm9Nc7]: hasVariant(
                        variants,
                        "failed",
                        "failed"
                      ),

                      [sty.textsuccess__vy5PsVThM]: hasVariant(
                        variants,
                        "success",
                        "success"
                      )
                    }
                  )}
                >
                  {"Buy"}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox__qhake, {
                  [sty.freeBoxfailed__qhakem9Nc7]: hasVariant(
                    variants,
                    "failed",
                    "failed"
                  ),

                  [sty.freeBoxsuccess__qhakeVThM]: hasVariant(
                    variants,
                    "success",
                    "success"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__chb2O,
                    {
                      [sty.textfailed__chb2Om9Nc7]: hasVariant(
                        variants,
                        "failed",
                        "failed"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "failed", "failed")
                    ? "Transaction Failed"
                    : "Transaction Successful"}
                </div>
              </div>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : true
      ) ? (
        <p.PlasmicIcon
          PlasmicIconType={
            hasVariant(variants, "failed", "failed")
              ? BuySendTxnFailsvgIcon
              : BuySendTxnSuccesssvgIcon
          }
          className={classNames(projectcss.all, sty.svg___4RiEf, {
            [sty.svgfailed___4RiEfm9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.svgsuccess___4RiEfVThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___13PXx, {
            [sty.freeBoxfailed___13PXxm9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading___13PXxvh2Bc]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess___13PXxVThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__yD5Vg, {
              [sty.freeBoxweth__yD5VgQg0Pi]: hasVariant(
                variants,
                "weth",
                "weth"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "0.474",
              value: args.tokenprice,
              className: classNames(sty.slotTargetTokenprice, {
                [sty.slotTargetTokenpriceweth]: hasVariant(
                  variants,
                  "weth",
                  "weth"
                )
              })
            })}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iZlHm,
              {
                [sty.textwdai__iZlHmuf1Ve]: hasVariant(
                  variants,
                  "wdai",
                  "wdai"
                ),

                [sty.textweth__iZlHmQg0Pi]: hasVariant(variants, "weth", "weth")
              }
            )}
          >
            {"MATIC"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8E1Tz,
              {
                [sty.textweth___8E1TzQg0Pi]: hasVariant(
                  variants,
                  "weth",
                  "weth"
                )
              }
            )}
          >
            {hasVariant(variants, "weth", "weth") ? "per" : "per"}
          </div>

          {(hasVariant(variants, "weth", "weth") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__jgDe6, {
                [sty.freeBoxweth__jgDe6Qg0Pi]: hasVariant(
                  variants,
                  "weth",
                  "weth"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "PBO",
                value: args.tokensymboltwo,
                className: classNames(sty.slotTargetTokensymboltwo, {
                  [sty.slotTargetTokensymboltwoweth]: hasVariant(
                    variants,
                    "weth",
                    "weth"
                  )
                })
              })}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__mHqCi, {
            [sty.freeBoxfailed__mHqCim9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__mHqCivh2Bc]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__mHqCiVThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rbks6
            )}
          >
            {"Pay In"}
          </div>
        </div>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__ywCtb, {
            [sty.freeBoxfailed__ywCtbm9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__ywCtbvh2Bc]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__ywCtbVThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___6QcN9)}>
            <button
              data-plasmic-name={"maticbutton"}
              data-plasmic-override={overrides.maticbutton}
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.maticbutton,
                {
                  [sty.maticbuttonwdai]: hasVariant(variants, "wdai", "wdai"),
                  [sty.maticbuttonweth]: hasVariant(variants, "weth", "weth")
                }
              )}
            >
              {"MATIC"}
            </button>

            <button
              data-plasmic-name={"wdaibutton"}
              data-plasmic-override={overrides.wdaibutton}
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.wdaibutton,
                {
                  [sty.wdaibuttonwdai]: hasVariant(variants, "wdai", "wdai"),
                  [sty.wdaibuttonweth]: hasVariant(variants, "weth", "weth")
                }
              )}
            >
              {"WDAI"}
            </button>

            <button
              data-plasmic-name={"wethbutton"}
              data-plasmic-override={overrides.wethbutton}
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.wethbutton,
                { [sty.wethbuttonweth]: hasVariant(variants, "weth", "weth") }
              )}
            >
              {"WETH"}
            </button>
          </div>
        </div>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__nLzaT, {
            [sty.freeBoxfailed__nLzaTm9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxloading__nLzaTvh2Bc]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.freeBoxsuccess__nLzaTVThM]: hasVariant(
              variants,
              "success",
              "success"
            ),

            [sty.freeBoxwdai__nLzaTuf1Ve]: hasVariant(variants, "wdai", "wdai"),
            [sty.freeBoxweth__nLzaTQg0Pi]: hasVariant(variants, "weth", "weth")
          })}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__io2B6)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__ypU2N, {
                    [sty.freeBoxwdai__ypU2Nuf1Ve]: hasVariant(
                      variants,
                      "wdai",
                      "wdai"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___22VRb
                    )}
                  >
                    {"Tokens to Buy"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__a4AGn)}
                  >
                    <Tokeninput
                      data-plasmic-name={"tokeninput"}
                      data-plasmic-override={overrides.tokeninput}
                      className={classNames("__wab_instance", sty.tokeninput)}
                    />
                  </div>
                </div>
              ) : null}

              <DownButtonsvgIcon
                className={classNames(projectcss.all, sty.svg__gKbLp)}
                role={"img"}
              />

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__kmpqm)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tjHLk
                    )}
                  >
                    {"Amount to Pay"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xR03)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__fFQwN,
                        {
                          [sty.freeBoxweth__fFQwNQg0Pi]: hasVariant(
                            variants,
                            "weth",
                            "weth"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Enter some text",
                        value: args.amounttopay,
                        className: classNames(sty.slotTargetAmounttopay)
                      })}
                    </div>
                  </div>
                </div>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <button
          data-plasmic-name={"buybutton"}
          data-plasmic-override={overrides.buybutton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.buybutton,
            {
              [sty.buybuttonfailed]: hasVariant(variants, "failed", "failed"),
              [sty.buybuttonloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.buybuttonsuccess]: hasVariant(variants, "success", "success")
            }
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__p2IQj,
              {
                [sty.textfailed__p2IQJm9Nc7]: hasVariant(
                  variants,
                  "failed",
                  "failed"
                ),

                [sty.textsuccess__p2IQjVThM]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              }
            )}
          >
            {hasVariant(variants, "failed", "failed")
              ? "GO TO "
              : hasVariant(variants, "success", "success")
              ? "GO TO "
              : "BUY"}
          </div>
        </button>
      ) : null}

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__n34Qf
        )}
      >
        {"Choose another Payment Method"}
      </div>

      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : true
      ) ? (
        <button
          data-plasmic-name={"upibutton"}
          data-plasmic-override={overrides.upibutton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.upibutton,
            {
              [sty.upibuttonfailed]: hasVariant(variants, "failed", "failed"),
              [sty.upibuttonloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.upibuttonsuccess]: hasVariant(variants, "success", "success")
            }
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o24Q9,
              {
                [sty.textfailed__o24Q9M9Nc7]: hasVariant(
                  variants,
                  "failed",
                  "failed"
                ),

                [sty.textsuccess__o24Q9VThM]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              }
            )}
          >
            {hasVariant(variants, "failed", "failed")
              ? "GO TO "
              : hasVariant(variants, "success", "success")
              ? "GO TO "
              : "Load Wallet with UPI"}
          </div>
        </button>
      ) : null}
      {false ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5HM2K
          )}
        >
          {"Or"}
        </div>
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : hasVariant(variants, "loading", "loading")
          ? true
          : false
      ) ? (
        <Fiatbuybutton
          data-plasmic-name={"fiatbuybutton"}
          data-plasmic-override={overrides.fiatbuybutton}
          className={classNames("__wab_instance", sty.fiatbuybutton, {
            [sty.fiatbuybuttonfailed]: hasVariant(variants, "failed", "failed"),
            [sty.fiatbuybuttonloading]: hasVariant(
              variants,
              "loading",
              "loading"
            ),

            [sty.fiatbuybuttonsuccess]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
          failed={hasVariant(variants, "failed", "failed") ? true : undefined}
          loading={
            hasVariant(variants, "loading", "loading") ? true : undefined
          }
          success={
            hasVariant(variants, "success", "success") ? true : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "loading", "loading") ? true : true) ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgloading]: hasVariant(variants, "loading", "loading")
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: loadingsvg2TDO0NZVmL,
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />
      ) : null}
      {(
        hasVariant(variants, "failed", "failed")
          ? true
          : hasVariant(variants, "success", "success")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qrLfn, {
            [sty.freeBoxfailed__qrLfnm9Nc7]: hasVariant(
              variants,
              "failed",
              "failed"
            ),

            [sty.freeBoxsuccess__qrLfnVThM]: hasVariant(
              variants,
              "success",
              "success"
            )
          })}
        >
          {(
            hasVariant(variants, "failed", "failed")
              ? true
              : hasVariant(variants, "success", "success")
              ? true
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fjULz,
                {
                  [sty.textfailed__fjULzm9Nc7]: hasVariant(
                    variants,
                    "failed",
                    "failed"
                  ),

                  [sty.textsuccess__fjULzVThM]: hasVariant(
                    variants,
                    "success",
                    "success"
                  )
                }
              )}
            >
              {"HASH :: "}
            </div>
          ) : null}
          {(
            hasVariant(variants, "failed", "failed")
              ? true
              : hasVariant(variants, "success", "success")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__odHd, {
                [sty.freeBoxfailed__odHdm9Nc7]: hasVariant(
                  variants,
                  "failed",
                  "failed"
                ),

                [sty.freeBoxsuccess__odHdVThM]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f",
                value: args.txnhash,
                className: classNames(sty.slotTargetTxnhash, {
                  [sty.slotTargetTxnhashfailed]: hasVariant(
                    variants,
                    "failed",
                    "failed"
                  ),

                  [sty.slotTargetTxnhashsuccess]: hasVariant(
                    variants,
                    "success",
                    "success"
                  )
                })
              })}
            </div>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "maticbutton",
    "wdaibutton",
    "wethbutton",
    "tokeninput",
    "buybutton",
    "upibutton",
    "fiatbuybutton",
    "img"
  ],

  maticbutton: ["maticbutton"],
  wdaibutton: ["wdaibutton"],
  wethbutton: ["wethbutton"],
  tokeninput: ["tokeninput"],
  buybutton: ["buybutton"],
  upibutton: ["upibutton"],
  fiatbuybutton: ["fiatbuybutton"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBuytokencomponentwithfiat__ArgProps,
      internalVariantPropNames: PlasmicBuytokencomponentwithfiat__VariantProps
    });

    return PlasmicBuytokencomponentwithfiat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuytokencomponentwithfiat";
  } else {
    func.displayName = `PlasmicBuytokencomponentwithfiat.${nodeName}`;
  }
  return func;
}

export const PlasmicBuytokencomponentwithfiat = Object.assign(
  // Top-level PlasmicBuytokencomponentwithfiat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    maticbutton: makeNodeComponent("maticbutton"),
    wdaibutton: makeNodeComponent("wdaibutton"),
    wethbutton: makeNodeComponent("wethbutton"),
    tokeninput: makeNodeComponent("tokeninput"),
    buybutton: makeNodeComponent("buybutton"),
    upibutton: makeNodeComponent("upibutton"),
    fiatbuybutton: makeNodeComponent("fiatbuybutton"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicBuytokencomponentwithfiat
    internalVariantProps: PlasmicBuytokencomponentwithfiat__VariantProps,
    internalArgProps: PlasmicBuytokencomponentwithfiat__ArgProps
  }
);

export default PlasmicBuytokencomponentwithfiat;
/* prettier-ignore-end */
