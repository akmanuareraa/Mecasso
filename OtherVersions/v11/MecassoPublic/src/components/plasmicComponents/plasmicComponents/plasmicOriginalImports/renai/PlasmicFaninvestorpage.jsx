// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: nWnbbiuMtG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Investorcard from "../../../Investorcard"; // plasmic-import: l4G_UMHGZR/component
import Fancard from "../../../Fancard"; // plasmic-import: L0bOag6Zd_N/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicFaninvestorpage.module.css"; // plasmic-import: nWnbbiuMtG/css

export const PlasmicFaninvestorpage__VariantProps = new Array();

export const PlasmicFaninvestorpage__ArgProps = new Array();

function PlasmicFaninvestorpage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h8G8
            )}
          >
            {"I'm a"}
          </div>

          <Investorcard
            data-plasmic-name={"investorbutton"}
            data-plasmic-override={overrides.investorbutton}
            className={classNames("__wab_instance", sty.investorbutton)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dn3
            )}
          >
            {"or"}
          </div>

          <Fancard
            data-plasmic-name={"fanbutton"}
            data-plasmic-override={overrides.fanbutton}
            className={classNames("__wab_instance", sty.fanbutton)}
          />

          {true ? (
            <Button
              data-plasmic-name={"ifbutton"}
              data-plasmic-override={overrides.ifbutton}
              className={classNames("__wab_instance", sty.ifbutton)}
            />
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "screenAlert", "investorbutton", "fanbutton", "ifbutton"],
  screenAlert: ["screenAlert"],
  investorbutton: ["investorbutton"],
  fanbutton: ["fanbutton"],
  ifbutton: ["ifbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaninvestorpage__ArgProps,
      internalVariantPropNames: PlasmicFaninvestorpage__VariantProps
    });

    return PlasmicFaninvestorpage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaninvestorpage";
  } else {
    func.displayName = `PlasmicFaninvestorpage.${nodeName}`;
  }
  return func;
}

export const PlasmicFaninvestorpage = Object.assign(
  // Top-level PlasmicFaninvestorpage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    screenAlert: makeNodeComponent("screenAlert"),
    investorbutton: makeNodeComponent("investorbutton"),
    fanbutton: makeNodeComponent("fanbutton"),
    ifbutton: makeNodeComponent("ifbutton"),
    // Metadata about props expected for PlasmicFaninvestorpage
    internalVariantProps: PlasmicFaninvestorpage__VariantProps,
    internalArgProps: PlasmicFaninvestorpage__ArgProps
  }
);

export default PlasmicFaninvestorpage;
/* prettier-ignore-end */
