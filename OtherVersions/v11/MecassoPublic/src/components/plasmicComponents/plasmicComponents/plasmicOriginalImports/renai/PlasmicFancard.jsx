// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: L0bOag6Zd_N
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicFancard.module.css"; // plasmic-import: L0bOag6Zd_N/css
import fansvgFk1Xv4Hrc from "./images/fansvg.svg"; // plasmic-import: Fk1XV4-hrc/picture
import investorDarksvg8FWbWbIAuA from "./images/investorDarksvg.svg"; // plasmic-import: 8fWbWbIAuA/picture
import fanDarksvgT2UxPiZo5Q from "./images/fanDarksvg.svg"; // plasmic-import: t2uxPIZo5Q/picture

export const PlasmicFancard__VariantProps = new Array("selected", "selected2");

export const PlasmicFancard__ArgProps = new Array("slot");

function PlasmicFancard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootselected2]: hasVariant(variants, "selected2", "selected2"),
          [sty.rootselected]: hasVariant(variants, "selected", "selected")
        }
      )}
    >
      {(
        hasVariant(variants, "selected2", "selected2")
          ? true
          : hasVariant(variants, "selected", "selected")
          ? true
          : true
      ) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__v2Ib, {
            [sty.imgselected2__v2IbI7Mri]: hasVariant(
              variants,
              "selected2",
              "selected2"
            ),

            [sty.imgselected__v2IbXQ9Nd]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"77px"}
          loading={"lazy"}
          src={{
            src: fansvgFk1Xv4Hrc,
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />
      ) : null}
      {(
        hasVariant(variants, "selected2", "selected2")
          ? true
          : hasVariant(variants, "selected", "selected")
          ? true
          : true
      ) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__n8O49, {
            [sty.imgselected2__n8O49I7Mri]: hasVariant(
              variants,
              "selected2",
              "selected2"
            ),

            [sty.imgselected__n8O49XQ9Nd]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"77px"}
          loading={"lazy"}
          src={
            hasVariant(variants, "selected2", "selected2")
              ? {
                  src: fanDarksvgT2UxPiZo5Q,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant(variants, "selected", "selected")
              ? {
                  src: fanDarksvgT2UxPiZo5Q,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : {
                  src: investorDarksvg8FWbWbIAuA,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
          }
        />
      ) : null}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselected2]: hasVariant(
            variants,
            "selected2",
            "selected2"
          ),

          [sty.freeBoxselected]: hasVariant(variants, "selected", "selected")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Fan",
          value: args.slot,
          className: classNames(sty.slotTargetSlot, {
            [sty.slotTargetSlotselected2]: hasVariant(
              variants,
              "selected2",
              "selected2"
            ),

            [sty.slotTargetSlotselected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFancard__ArgProps,
      internalVariantPropNames: PlasmicFancard__VariantProps
    });

    return PlasmicFancard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFancard";
  } else {
    func.displayName = `PlasmicFancard.${nodeName}`;
  }
  return func;
}

export const PlasmicFancard = Object.assign(
  // Top-level PlasmicFancard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicFancard
    internalVariantProps: PlasmicFancard__VariantProps,
    internalArgProps: PlasmicFancard__ArgProps
  }
);

export default PlasmicFancard;
/* prettier-ignore-end */
