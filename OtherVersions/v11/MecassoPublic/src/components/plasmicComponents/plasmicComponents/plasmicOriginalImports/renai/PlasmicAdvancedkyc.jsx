// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: D8ZnzCu9r0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import TextInput from "../../../TextInput"; // plasmic-import: QSTyVh7IuMa/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicAdvancedkyc.module.css"; // plasmic-import: D8ZnzCu9r0/css

export const PlasmicAdvancedkyc__VariantProps = new Array("submitted");

export const PlasmicAdvancedkyc__ArgProps = new Array(
  "panuploadbutton",
  "aadharuploadbutton",
  "photouploadbutton"
);

function PlasmicAdvancedkyc__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootsubmitted]: hasVariant(
                variants,
                "submitted",
                "submitted"
              )
            }
          )}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bRZhB
            )}
          >
            {"Advanced KYC"}
          </div>

          {(hasVariant(variants, "submitted", "submitted") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pgk0M, {
                [sty.freeBoxsubmitted__pgk0M5Rs2F]: hasVariant(
                  variants,
                  "submitted",
                  "submitted"
                )
              })}
            >
              {true ? (
                <TextInput
                  data-plasmic-name={"otp"}
                  data-plasmic-override={overrides.otp}
                  className={classNames("__wab_instance", sty.otp)}
                />
              ) : null}

              <TextInput
                data-plasmic-name={"pan"}
                data-plasmic-override={overrides.pan}
                className={classNames("__wab_instance", sty.pan)}
              />

              <TextInput
                data-plasmic-name={"aadhar"}
                data-plasmic-override={overrides.aadhar}
                className={classNames("__wab_instance", sty.aadhar)}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qnWq)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"panupload"}
                  data-plasmic-override={overrides.panupload}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.panupload)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.panuploadbutton
                  })}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"panupload2"}
                  data-plasmic-override={overrides.panupload2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.panupload2)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.aadharuploadbutton
                  })}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"panupload3"}
                  data-plasmic-override={overrides.panupload3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.panupload3)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.photouploadbutton
                  })}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "submitted", "submitted") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___60Wjl,
                {
                  [sty.textsubmitted___60Wjl5Rs2F]: hasVariant(
                    variants,
                    "submitted",
                    "submitted"
                  )
                }
              )}
            >
              {
                "Thank you for submitting. Your documents will be verified shortly. "
              }
            </div>
          ) : null}
          {(hasVariant(variants, "submitted", "submitted") ? true : true) ? (
            <Button
              data-plasmic-name={"submitkycbutton"}
              data-plasmic-override={overrides.submitkycbutton}
              className={classNames("__wab_instance", sty.submitkycbutton, {
                [sty.submitkycbuttonsubmitted]: hasVariant(
                  variants,
                  "submitted",
                  "submitted"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u667S
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
          {(hasVariant(variants, "submitted", "submitted") ? true : true) ? (
            <Button
              data-plasmic-name={"skipkycbutton"}
              data-plasmic-override={overrides.skipkycbutton}
              className={classNames("__wab_instance", sty.skipkycbutton, {
                [sty.skipkycbuttonsubmitted]: hasVariant(
                  variants,
                  "submitted",
                  "submitted"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lE2Vg
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
          {(hasVariant(variants, "submitted", "submitted") ? true : false) ? (
            <Button
              data-plasmic-name={"redirectbutton"}
              data-plasmic-override={overrides.redirectbutton}
              className={classNames("__wab_instance", sty.redirectbutton, {
                [sty.redirectbuttonsubmitted]: hasVariant(
                  variants,
                  "submitted",
                  "submitted"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mt5Ck
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "screenAlert",
    "otp",
    "pan",
    "aadhar",
    "panupload",
    "panupload2",
    "panupload3",
    "submitkycbutton",
    "skipkycbutton",
    "redirectbutton"
  ],

  screenAlert: ["screenAlert"],
  otp: ["otp"],
  pan: ["pan"],
  aadhar: ["aadhar"],
  panupload: ["panupload"],
  panupload2: ["panupload2"],
  panupload3: ["panupload3"],
  submitkycbutton: ["submitkycbutton"],
  skipkycbutton: ["skipkycbutton"],
  redirectbutton: ["redirectbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdvancedkyc__ArgProps,
      internalVariantPropNames: PlasmicAdvancedkyc__VariantProps
    });

    return PlasmicAdvancedkyc__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvancedkyc";
  } else {
    func.displayName = `PlasmicAdvancedkyc.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvancedkyc = Object.assign(
  // Top-level PlasmicAdvancedkyc renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    screenAlert: makeNodeComponent("screenAlert"),
    otp: makeNodeComponent("otp"),
    pan: makeNodeComponent("pan"),
    aadhar: makeNodeComponent("aadhar"),
    panupload: makeNodeComponent("panupload"),
    panupload2: makeNodeComponent("panupload2"),
    panupload3: makeNodeComponent("panupload3"),
    submitkycbutton: makeNodeComponent("submitkycbutton"),
    skipkycbutton: makeNodeComponent("skipkycbutton"),
    redirectbutton: makeNodeComponent("redirectbutton"),
    // Metadata about props expected for PlasmicAdvancedkyc
    internalVariantProps: PlasmicAdvancedkyc__VariantProps,
    internalArgProps: PlasmicAdvancedkyc__ArgProps
  }
);

export default PlasmicAdvancedkyc;
/* prettier-ignore-end */
