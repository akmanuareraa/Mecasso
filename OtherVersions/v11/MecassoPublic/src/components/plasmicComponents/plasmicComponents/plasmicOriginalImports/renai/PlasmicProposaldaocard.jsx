// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: f7grBJUEVAh
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicProposaldaocard.module.css"; // plasmic-import: f7grBJUEVAh/css
import RightArrowsvgIcon from "./icons/PlasmicIcon__RightArrowsvg"; // plasmic-import: ftMo4WYUE/icon
import image2YOuiknZ8 from "./images/image2.png"; // plasmic-import: yOuiknZ-8/picture

export const PlasmicProposaldaocard__VariantProps = new Array();

export const PlasmicProposaldaocard__ArgProps = new Array(
  "profilepic",
  "tokenname",
  "tokensymbol",
  "proposalsno"
);

function PlasmicProposaldaocard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__jf7Fx)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__z4EdL)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ohUvf)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"lazy"}
                    src={{
                      src: image2YOuiknZ8,
                      fullWidth: 500,
                      fullHeight: 750,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.profilepic
              })}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tmtlu)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sw0Rl)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gVvnn)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Adam",
                      value: args.tokenname,
                      className: classNames(sty.slotTargetTokenname)
                    })}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__c0BVr)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "ADM",
                      value: args.tokensymbol,
                      className: classNames(sty.slotTargetTokensymbol)
                    })}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__h0OoU)}>
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Active Proposals : "}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__zYu1)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "4",
                      value: args.proposalsno,
                      className: classNames(sty.slotTargetProposalsno)
                    })}
                  </div>
                </div>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___21Y4)}
        >
          <p.Stack
            as={"button"}
            data-plasmic-name={"listproposals"}
            data-plasmic-override={overrides.listproposals}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.listproposals
            )}
          >
            <RightArrowsvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "listproposals", "svg"],
  text: ["text"],
  listproposals: ["listproposals", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProposaldaocard__ArgProps,
      internalVariantPropNames: PlasmicProposaldaocard__VariantProps
    });

    return PlasmicProposaldaocard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProposaldaocard";
  } else {
    func.displayName = `PlasmicProposaldaocard.${nodeName}`;
  }
  return func;
}

export const PlasmicProposaldaocard = Object.assign(
  // Top-level PlasmicProposaldaocard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    listproposals: makeNodeComponent("listproposals"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicProposaldaocard
    internalVariantProps: PlasmicProposaldaocard__VariantProps,
    internalArgProps: PlasmicProposaldaocard__ArgProps
  }
);

export default PlasmicProposaldaocard;
/* prettier-ignore-end */
