// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: 6IJCUhb3TXZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Switchnetworkalert from "../../../Switchnetworkalert"; // plasmic-import: 6B14PY8_QE/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicViewProposal.module.css"; // plasmic-import: 6IJCUhb3TXZ/css
import ThumbsUpsvgIcon from "./icons/PlasmicIcon__ThumbsUpsvg"; // plasmic-import: 1gLBeasQX/icon
import ThumbsDownsvgIcon from "./icons/PlasmicIcon__ThumbsDownsvg"; // plasmic-import: 0EpOZZ_38/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: IsBHC9HQFEd/icon
import arrow233Png1Ht3Ij9Y from "./images/arrow233Png.png"; // plasmic-import: 1-HT3Ij9y/picture
import maleUser480Pxpng2EH7EoyOk2 from "./images/maleUser480Pxpng2.png"; // plasmic-import: eH7eoyOK2/picture

export const PlasmicViewProposal__VariantProps = new Array(
  "profileoverlay",
  "authoverlay",
  "confirmation"
);

export const PlasmicViewProposal__ArgProps = new Array(
  "overlaycreatorname",
  "overlaycategory",
  "overlaycreatortype",
  "errormessage",
  "proposalid",
  "status",
  "heading",
  "description",
  "yes",
  "no",
  "creator",
  "deposit",
  "recipient",
  "amount",
  "passed",
  "prevote",
  "deadline",
  "heading2",
  "overlayuserprofilepic",
  "uploadbuttonslot"
);

function PlasmicViewProposal__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootauthoverlay]: hasVariant(
                variants,
                "authoverlay",
                "authoverlay"
              ),

              [sty.rootconfirmation]: hasVariant(
                variants,
                "confirmation",
                "confirmation"
              ),

              [sty.rootprofileoverlay]: hasVariant(
                variants,
                "profileoverlay",
                "profileoverlay"
              )
            }
          )}
        >
          {(
            hasVariant(variants, "confirmation", "confirmation") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4DkdZ, {
                [sty.freeBoxconfirmation___4DkdZ8ZCsg]: hasVariant(
                  variants,
                  "confirmation",
                  "confirmation"
                )
              })}
            >
              {(
                hasVariant(variants, "confirmation", "confirmation")
                  ? true
                  : false
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wGr4Z, {
                    [sty.freeBoxconfirmation__wGr4Z8ZCsg]: hasVariant(
                      variants,
                      "confirmation",
                      "confirmation"
                    )
                  })}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__km65A)}
                    >
                      {(
                        hasVariant(variants, "confirmation", "confirmation")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hc6L,
                            {
                              [sty.freeBoxconfirmation__hc6L8ZCsg]: hasVariant(
                                variants,
                                "confirmation",
                                "confirmation"
                              )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "VOTE",
                            value: args.heading2,
                            className: classNames(sty.slotTargetHeading2, {
                              [sty.slotTargetHeading2confirmation]: hasVariant(
                                variants,
                                "confirmation",
                                "confirmation"
                              )
                            })
                          })}
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tTwe6,
                          {
                            [sty.freeBoxconfirmation__tTwe68ZCsg]: hasVariant(
                              variants,
                              "confirmation",
                              "confirmation"
                            )
                          }
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___88VTv,
                            {
                              [sty.freeBoxconfirmation___88VTv8ZCsg]:
                                hasVariant(
                                  variants,
                                  "confirmation",
                                  "confirmation"
                                )
                            }
                          )}
                        >
                          {(
                            hasVariant(variants, "confirmation", "confirmation")
                              ? true
                              : false
                          ) ? (
                            <ThumbsUpsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wkh7L,
                                {
                                  [sty.svgconfirmation__wkh7L8ZCsg]: hasVariant(
                                    variants,
                                    "confirmation",
                                    "confirmation"
                                  )
                                }
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {(
                            hasVariant(variants, "confirmation", "confirmation")
                              ? true
                              : false
                          ) ? (
                            <button
                              data-plasmic-name={"yesvotebutton"}
                              data-plasmic-override={overrides.yesvotebutton}
                              className={classNames(
                                projectcss.all,
                                projectcss.button,
                                projectcss.__wab_text,
                                sty.yesvotebutton,
                                {
                                  [sty.yesvotebuttonconfirmation]: hasVariant(
                                    variants,
                                    "confirmation",
                                    "confirmation"
                                  )
                                }
                              )}
                            >
                              {"YES"}
                            </button>
                          ) : null}
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n5RkW,
                            {
                              [sty.freeBoxconfirmation__n5RkW8ZCsg]: hasVariant(
                                variants,
                                "confirmation",
                                "confirmation"
                              )
                            }
                          )}
                        >
                          {(
                            hasVariant(variants, "confirmation", "confirmation")
                              ? true
                              : false
                          ) ? (
                            <ThumbsDownsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0DMgs,
                                {
                                  [sty.svgconfirmation___0DMgs8ZCsg]:
                                    hasVariant(
                                      variants,
                                      "confirmation",
                                      "confirmation"
                                    )
                                }
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {(
                            hasVariant(variants, "confirmation", "confirmation")
                              ? true
                              : false
                          ) ? (
                            <button
                              data-plasmic-name={"novotebutton"}
                              data-plasmic-override={overrides.novotebutton}
                              className={classNames(
                                projectcss.all,
                                projectcss.button,
                                projectcss.__wab_text,
                                sty.novotebutton,
                                {
                                  [sty.novotebuttonconfirmation]: hasVariant(
                                    variants,
                                    "confirmation",
                                    "confirmation"
                                  )
                                }
                              )}
                            >
                              {"NO"}
                            </button>
                          ) : null}
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
              {(
                hasVariant(variants, "confirmation", "confirmation")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__moTYx, {
                    [sty.freeBoxconfirmation__moTYx8ZCsg]: hasVariant(
                      variants,
                      "confirmation",
                      "confirmation"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "confirmation", "confirmation")
                      ? true
                      : true
                  ) ? (
                    <Button
                      data-plasmic-name={"cancelvotebutton"}
                      data-plasmic-override={overrides.cancelvotebutton}
                      className={classNames(
                        "__wab_instance",
                        sty.cancelvotebutton,
                        {
                          [sty.cancelvotebuttonconfirmation]: hasVariant(
                            variants,
                            "confirmation",
                            "confirmation"
                          )
                        }
                      )}
                    />
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__tvKmj)}>
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage)
              })}
            </div>
          ) : null}

          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />

          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              className={classNames("__wab_instance", sty.screenAlert__pmZRw)}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___6DoNj)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zkh6A, {
                  [sty.freeBoxconfirmation__zkh6A8ZCsg]: hasVariant(
                    variants,
                    "confirmation",
                    "confirmation"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lTgmy
                  )}
                >
                  {"Proposals"}
                </div>
              </p.Stack>
            ) : null}
          </div>

          <Switchnetworkalert
            data-plasmic-name={"switchnetworkalert"}
            data-plasmic-override={overrides.switchnetworkalert}
            className={classNames("__wab_instance", sty.switchnetworkalert)}
          />

          {(
            hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__ftJFg, {
                [sty.freeBoxauthoverlay__ftJFgTeFfL]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.freeBoxprofileoverlay__ftJFgNk16H]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__bZqQu, {
                    [sty.freeBoxauthoverlay__bZqQuteFfL]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__bZqQuNk16H]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <button
                      data-plasmic-name={"backbutton"}
                      data-plasmic-override={overrides.backbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.backbutton,
                        {
                          [sty.backbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.backbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img, {
                          [sty.imgauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.imgprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"37px"}
                        loading={"lazy"}
                        src={{
                          src: arrow233Png1Ht3Ij9Y,
                          fullWidth: 640,
                          fullHeight: 640,
                          aspectRatio: undefined
                        }}
                      />
                    </button>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__mHr5, {
                    [sty.freeBoxauthoverlay__mHr5TeFfL]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__mHr5Nk16H]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pBoI,
                        {
                          [sty.textauthoverlay__pBoITeFfL]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.textprofileoverlay__pBoINk16H]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {hasVariant(variants, "authoverlay", "authoverlay")
                        ? "Renai"
                        : "Manu Areraa"}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xl5Q2,
                        {
                          [sty.freeBoxauthoverlay__xl5Q2TeFfL]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__xl5Q2Nk16H]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Manu Areraa",
                        value: args.overlaycreatorname,
                        className: classNames(
                          sty.slotTargetOverlaycreatorname,
                          {
                            [sty.slotTargetOverlaycreatornameauthoverlay]:
                              hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                            [sty.slotTargetOverlaycreatornameprofileoverlay]:
                              hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                          }
                        )
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__fJv52,
                        {
                          [sty.freeBoxauthoverlay__fJv52TeFfL]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__fJv52Nk16H]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kr2Zr,
                            {
                              [sty.freeBoxauthoverlay__kr2ZrTeFfL]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay__kr2ZrNk16H]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Cooking",
                            value: args.overlaycategory,
                            className: classNames(
                              sty.slotTargetOverlaycategory,
                              {
                                [sty.slotTargetOverlaycategoryauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycategoryprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zDcic,
                            {
                              [sty.textauthoverlay__zDcicteFfL]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.textprofileoverlay__zDcicNk16H]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {" | "}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3YPiG,
                            {
                              [sty.freeBoxauthoverlay___3YPiGteFfL]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay___3YPiGNk16H]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Influencer",
                            value: args.overlaycreatortype,
                            className: classNames(
                              sty.slotTargetOverlaycreatortype,
                              {
                                [sty.slotTargetOverlaycreatortypeauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycreatortypeprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "profileoverlay", "profileoverlay")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m6Hwp,
                            {
                              [sty.textprofileoverlay__m6HwpNk16H]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {"|  Young Stars"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox__aRpln, {
                  [sty.freeBoxprofileoverlay__aRplnNk16H]: hasVariant(
                    variants,
                    "profileoverlay",
                    "profileoverlay"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__qEmnS)}
                      displayHeight={"290px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"290px"}
                      loading={"lazy"}
                      src={{
                        src: maleUser480Pxpng2EH7EoyOk2,
                        fullWidth: 480,
                        fullHeight: 480,
                        aspectRatio: undefined
                      }}
                    />
                  ),

                  value: args.overlayuserprofilepic
                })}
              </div>

              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hYg6T, {
                    [sty.freeBoxauthoverlay__hYg6TteFfL]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__hYg6TNk16H]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"loginbutton"}
                      data-plasmic-override={overrides.loginbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.loginbutton,
                        {
                          [sty.loginbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.loginbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vSiyX,
                          {
                            [sty.textauthoverlay__vSiyXteFfL]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__vSiyXNk16H]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "Login"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"signupbutton"}
                      data-plasmic-override={overrides.signupbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.signupbutton,
                        {
                          [sty.signupbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.signupbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qMOs,
                          {
                            [sty.textauthoverlay__qMOsTeFfL]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__qMOsNk16H]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "SignUp"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__v0Rlb,
                        {
                          [sty.freeBoxauthoverlay__v0RlbTeFfL]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__v0RlbNk16H]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__q8Jas
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cg4RP
                              )}
                            >
                              {"Upload Profile Photo"}
                            </div>
                          </p.Stack>
                        ),

                        value: args.uploadbuttonslot
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"logoutbutton"}
                      data-plasmic-override={overrides.logoutbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.logoutbutton,
                        {
                          [sty.logoutbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.logoutbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yNMmG,
                          {
                            [sty.textauthoverlay__yNMmGteFfL]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__yNMmGNk16H]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Logout"}
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__leRw5)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__gjZzb)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__odSLf, {
                    [sty.freeBoxconfirmation__odSLf8ZCsg]: hasVariant(
                      variants,
                      "confirmation",
                      "confirmation"
                    )
                  })}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___92L7I
                      )}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sFd2R
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nHxL
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eLDx
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1Tox3
                                  )}
                                >
                                  {"Proposal ID: "}
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ieWk1
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "23",
                                    value: args.proposalid,
                                    className: classNames(
                                      sty.slotTargetProposalid
                                    )
                                  })}
                                </div>
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__j4VaR,
                                  {
                                    [sty.freeBoxconfirmation__j4VaR8ZCsg]:
                                      hasVariant(
                                        variants,
                                        "confirmation",
                                        "confirmation"
                                      )
                                  }
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents:
                                    "Donating 50,000 PBO for ABC Charity",
                                  value: args.heading,
                                  className: classNames(sty.slotTargetHeading, {
                                    [sty.slotTargetHeadingconfirmation]:
                                      hasVariant(
                                        variants,
                                        "confirmation",
                                        "confirmation"
                                      )
                                  })
                                })}
                              </div>

                              <p
                                data-plasmic-name={"p"}
                                data-plasmic-override={overrides.p}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.p,
                                  sty.p
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents:
                                    "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                                  value: args.description,
                                  className: classNames(
                                    sty.slotTargetDescription
                                  )
                                })}
                              </p>

                              {false ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__roiQh
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__koQqr
                                    )}
                                  >
                                    {"Creator: "}
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jMw1Y
                                    )}
                                  >
                                    {
                                      "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f"
                                    }
                                  </div>
                                </div>
                              ) : null}
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__or09B)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__shv0
                          )}
                        >
                          <button
                            data-plasmic-name={"votebutton"}
                            data-plasmic-override={overrides.votebutton}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              projectcss.__wab_text,
                              sty.votebutton,
                              {
                                [sty.votebuttonconfirmation]: hasVariant(
                                  variants,
                                  "confirmation",
                                  "confirmation"
                                )
                              }
                            )}
                          >
                            {"VOTE"}
                          </button>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lxsSi,
                              {
                                [sty.freeBoxconfirmation__lxsSi8ZCsg]:
                                  hasVariant(
                                    variants,
                                    "confirmation",
                                    "confirmation"
                                  )
                              }
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "OPEN",
                              value: args.status,
                              className: classNames(sty.slotTargetStatus)
                            })}
                          </div>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1Mt35
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p3Bqs
                              )}
                            >
                              <ThumbsUpsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___29Jan,
                                  {
                                    [sty.svgconfirmation___29Jan8ZCsg]:
                                      hasVariant(
                                        variants,
                                        "confirmation",
                                        "confirmation"
                                      )
                                  }
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0KcBj
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: "58",
                                  value: args.yes,
                                  className: classNames(sty.slotTargetYes)
                                })}
                              </div>
                            </div>
                          ) : null}
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mL6P5
                              )}
                            >
                              <ThumbsDownsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___9CWsO,
                                  {
                                    [sty.svgconfirmation___9CWsO8ZCsg]:
                                      hasVariant(
                                        variants,
                                        "confirmation",
                                        "confirmation"
                                      )
                                  }
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tzO2L
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: "58",
                                  value: args.no,
                                  className: classNames(sty.slotTargetNo)
                                })}
                              </div>
                            </div>
                          ) : null}
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bYem1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox___9GGa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lixc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xD3En
                          )}
                        >
                          {"Creator : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__m8UPx
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents:
                              "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f",
                            value: args.creator,
                            className: classNames(sty.slotTargetCreator)
                          })}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qLbf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k0Lio
                          )}
                        >
                          {"Deposit : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bzEsp
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "1500 PBO",
                            value: args.deposit,
                            className: classNames(sty.slotTargetDeposit)
                          })}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r0KI
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k3UgN
                          )}
                        >
                          {"Recipient : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__shDl
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents:
                              "0xFC9d81EebfEB5beb024cC2cE6e200fabd967A98f",
                            value: args.recipient,
                            className: classNames(sty.slotTargetRecipient)
                          })}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4YrUl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gIzl3
                          )}
                        >
                          {"Amount : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xzxnC
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "10780 PBO",
                            value: args.amount,
                            className: classNames(sty.slotTargetAmount)
                          })}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ntO80
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k7Q7M
                          )}
                        >
                          {"Proposal Passed : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rpIkJ
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "No",
                            value: args.passed,
                            className: classNames(sty.slotTargetPassed)
                          })}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nxws
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__evc70
                          )}
                        >
                          {"Pre-Vote : "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5CezN
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "No",
                            value: args.prevote,
                            className: classNames(sty.slotTargetPrevote)
                          })}
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__xs29L)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rsXqy
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Deadline: 7th March 2022",
                          value: args.deadline,
                          className: classNames(sty.slotTargetDeadline)
                        })}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__bbi1Q)}>
            <Button
              data-plasmic-name={"previouspagebutton"}
              data-plasmic-override={overrides.previouspagebutton}
              className={classNames("__wab_instance", sty.previouspagebutton)}
              startIcon={
                true ? (
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__rgxHn)}
                    role={"img"}
                  />
                ) : null
              }
            >
              {"Go Back"}
            </Button>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__chvNv)} />

          {(
            hasVariant(variants, "confirmation", "confirmation")
              ? true
              : hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <Navbartwo
              data-plasmic-name={"navbartwo"}
              data-plasmic-override={overrides.navbartwo}
              className={classNames("__wab_instance", sty.navbartwo, {
                [sty.navbartwoauthoverlay]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.navbartwoconfirmation]: hasVariant(
                  variants,
                  "confirmation",
                  "confirmation"
                ),

                [sty.navbartwoprofileoverlay]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
              lbtoggle={true}
            />
          ) : null}
          {true ? (
            <ScreenAlert
              className={classNames("__wab_instance", sty.screenAlert__ybIFw)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "yesvotebutton",
    "novotebutton",
    "cancelvotebutton",
    "topNavBar",
    "switchnetworkalert",
    "backbutton",
    "img",
    "loginbutton",
    "signupbutton",
    "logoutbutton",
    "p",
    "votebutton",
    "previouspagebutton",
    "navbartwo"
  ],

  yesvotebutton: ["yesvotebutton"],
  novotebutton: ["novotebutton"],
  cancelvotebutton: ["cancelvotebutton"],
  topNavBar: ["topNavBar"],
  switchnetworkalert: ["switchnetworkalert"],
  backbutton: ["backbutton", "img"],
  img: ["img"],
  loginbutton: ["loginbutton"],
  signupbutton: ["signupbutton"],
  logoutbutton: ["logoutbutton"],
  p: ["p"],
  votebutton: ["votebutton"],
  previouspagebutton: ["previouspagebutton"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicViewProposal__ArgProps,
      internalVariantPropNames: PlasmicViewProposal__VariantProps
    });

    return PlasmicViewProposal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewProposal";
  } else {
    func.displayName = `PlasmicViewProposal.${nodeName}`;
  }
  return func;
}

export const PlasmicViewProposal = Object.assign(
  // Top-level PlasmicViewProposal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    yesvotebutton: makeNodeComponent("yesvotebutton"),
    novotebutton: makeNodeComponent("novotebutton"),
    cancelvotebutton: makeNodeComponent("cancelvotebutton"),
    topNavBar: makeNodeComponent("topNavBar"),
    switchnetworkalert: makeNodeComponent("switchnetworkalert"),
    backbutton: makeNodeComponent("backbutton"),
    img: makeNodeComponent("img"),
    loginbutton: makeNodeComponent("loginbutton"),
    signupbutton: makeNodeComponent("signupbutton"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    p: makeNodeComponent("p"),
    votebutton: makeNodeComponent("votebutton"),
    previouspagebutton: makeNodeComponent("previouspagebutton"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicViewProposal
    internalVariantProps: PlasmicViewProposal__VariantProps,
    internalArgProps: PlasmicViewProposal__ArgProps
  }
);

export default PlasmicViewProposal;
/* prettier-ignore-end */
