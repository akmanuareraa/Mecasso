// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: Hz33POcv8Jw
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicSuccessmessage.module.css"; // plasmic-import: Hz33POcv8Jw/css

export const PlasmicSuccessmessage__VariantProps = new Array(
  "phoneverificationsuccess",
  "phoneverification",
  "emailverification",
  "mobileotpsuccess"
);

export const PlasmicSuccessmessage__ArgProps = new Array("errormessage");

function PlasmicSuccessmessage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    hasVariant(variants, "mobileotpsuccess", "mobileotpsuccess")
      ? true
      : hasVariant(variants, "emailverification", "emailverification")
      ? true
      : hasVariant(variants, "phoneverification", "phoneverification")
      ? true
      : hasVariant(
          variants,
          "phoneverificationsuccess",
          "phoneverificationsuccess"
        )
      ? true
      : true
  ) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootemailverification]: hasVariant(
            variants,
            "emailverification",
            "emailverification"
          ),

          [sty.rootmobileotpsuccess]: hasVariant(
            variants,
            "mobileotpsuccess",
            "mobileotpsuccess"
          ),

          [sty.rootphoneverification]: hasVariant(
            variants,
            "phoneverification",
            "phoneverification"
          ),

          [sty.rootphoneverificationsuccess]: hasVariant(
            variants,
            "phoneverificationsuccess",
            "phoneverificationsuccess"
          )
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Phone number verified successfully",
        value: args.errormessage,
        className: classNames(sty.slotTargetErrormessage)
      })}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSuccessmessage__ArgProps,
      internalVariantPropNames: PlasmicSuccessmessage__VariantProps
    });

    return PlasmicSuccessmessage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuccessmessage";
  } else {
    func.displayName = `PlasmicSuccessmessage.${nodeName}`;
  }
  return func;
}

export const PlasmicSuccessmessage = Object.assign(
  // Top-level PlasmicSuccessmessage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSuccessmessage
    internalVariantProps: PlasmicSuccessmessage__VariantProps,
    internalArgProps: PlasmicSuccessmessage__ArgProps
  }
);

export default PlasmicSuccessmessage;
/* prettier-ignore-end */
