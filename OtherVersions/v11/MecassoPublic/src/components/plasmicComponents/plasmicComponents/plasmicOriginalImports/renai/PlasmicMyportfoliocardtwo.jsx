// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: G0T9zyt2KDU
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicMyportfoliocardtwo.module.css"; // plasmic-import: G0T9zyt2KDU/css
import image2YOuiknZ8 from "./images/image2.png"; // plasmic-import: yOuiknZ-8/picture

export const PlasmicMyportfoliocardtwo__VariantProps = new Array();

export const PlasmicMyportfoliocardtwo__ArgProps = new Array(
  "tokensymbol",
  "tokenname",
  "tokenbalance",
  "profileimage"
);

function PlasmicMyportfoliocardtwo__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oGCmq)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__plPer)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___8Cpoo)}
                    displayHeight={"35px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"35px"}
                    loading={"lazy"}
                    src={{
                      src: image2YOuiknZ8,
                      fullWidth: 500,
                      fullHeight: 750,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.profileimage
              })}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rPmzc)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ohwyl)}>
              {p.renderPlasmicSlot({
                defaultContents: "PBO",
                value: args.tokensymbol,
                className: classNames(sty.slotTargetTokensymbol)
              })}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__azMsf)}>
              {p.renderPlasmicSlot({
                defaultContents: "Pablo",
                value: args.tokenname,
                className: classNames(sty.slotTargetTokenname)
              })}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__vb4Mm)}
      >
        <button
          data-plasmic-name={"buybutton"}
          data-plasmic-override={overrides.buybutton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.buybutton
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dn8Ws
            )}
          >
            {"BUY"}
          </div>
        </button>

        <button
          data-plasmic-name={"sendbutton"}
          data-plasmic-override={overrides.sendbutton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.sendbutton
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7Ivuy
            )}
          >
            {"SEND"}
          </div>
        </button>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___994Ux)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__so0H4
          )}
        >
          {"BAL"}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__axNV)}>
          {p.renderPlasmicSlot({
            defaultContents: "555550",
            value: args.tokenbalance,
            className: classNames(sty.slotTargetTokenbalance)
          })}
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "buybutton", "sendbutton"],
  buybutton: ["buybutton"],
  sendbutton: ["sendbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMyportfoliocardtwo__ArgProps,
      internalVariantPropNames: PlasmicMyportfoliocardtwo__VariantProps
    });

    return PlasmicMyportfoliocardtwo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyportfoliocardtwo";
  } else {
    func.displayName = `PlasmicMyportfoliocardtwo.${nodeName}`;
  }
  return func;
}

export const PlasmicMyportfoliocardtwo = Object.assign(
  // Top-level PlasmicMyportfoliocardtwo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buybutton: makeNodeComponent("buybutton"),
    sendbutton: makeNodeComponent("sendbutton"),
    // Metadata about props expected for PlasmicMyportfoliocardtwo
    internalVariantProps: PlasmicMyportfoliocardtwo__VariantProps,
    internalArgProps: PlasmicMyportfoliocardtwo__ArgProps
  }
);

export default PlasmicMyportfoliocardtwo;
/* prettier-ignore-end */
