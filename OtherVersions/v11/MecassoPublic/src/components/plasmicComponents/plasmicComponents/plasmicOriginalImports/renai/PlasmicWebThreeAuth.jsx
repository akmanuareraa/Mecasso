// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: hrwtliRbiP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicWebThreeAuth.module.css"; // plasmic-import: hrwtliRbiP/css
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture

export const PlasmicWebThreeAuth__VariantProps = new Array(
  "loggedin",
  "authenticating"
);

export const PlasmicWebThreeAuth__ArgProps = new Array("username");

function PlasmicWebThreeAuth__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootauthenticating]: hasVariant(
              variants,
              "authenticating",
              "authenticating"
            ),

            [sty.rootloggedin]: hasVariant(variants, "loggedin", "loggedin")
          }
        )}
      >
        {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
          <ScreenAlert
            data-plasmic-name={"screenAlert"}
            data-plasmic-override={overrides.screenAlert}
            className={classNames("__wab_instance", sty.screenAlert)}
          />
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yA31Z,
            {
              [sty.textauthenticating__yA31ZISv9E]: hasVariant(
                variants,
                "authenticating",
                "authenticating"
              ),

              [sty.textloggedin__yA31ZfQVvr]: hasVariant(
                variants,
                "loggedin",
                "loggedin"
              )
            }
          )}
        >
          {hasVariant(variants, "authenticating", "authenticating")
            ? "Authenticating"
            : hasVariant(variants, "loggedin", "loggedin")
            ? "Hello,"
            : "Connect with Web3"}
        </div>

        {(hasVariant(variants, "loggedin", "loggedin") ? true : false) ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxloggedin]: hasVariant(
                variants,
                "loggedin",
                "loggedin"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Authenticating",
              value: args.username,
              className: classNames(sty.slotTargetUsername, {
                [sty.slotTargetUsernameloggedin]: hasVariant(
                  variants,
                  "loggedin",
                  "loggedin"
                )
              })
            })}
          </div>
        ) : null}
        {(
          hasVariant(variants, "authenticating", "authenticating")
            ? true
            : hasVariant(variants, "loggedin", "loggedin")
            ? false
            : false
        ) ? (
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgauthenticating]: hasVariant(
                variants,
                "authenticating",
                "authenticating"
              ),

              [sty.imgloggedin]: hasVariant(variants, "loggedin", "loggedin")
            })}
            displayHeight={"344px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"393px"}
            loading={"lazy"}
            src={{
              src: loadingsvg2TDO0NZVmL,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />
        ) : null}
        {(hasVariant(variants, "loggedin", "loggedin") ? true : false) ? (
          <Button
            data-plasmic-name={"logoutbutton"}
            data-plasmic-override={overrides.logoutbutton}
            className={classNames("__wab_instance", sty.logoutbutton, {
              [sty.logoutbuttonloggedin]: hasVariant(
                variants,
                "loggedin",
                "loggedin"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jXk3
              )}
            >
              {"Button"}
            </div>
          </Button>
        ) : null}
        {(
          hasVariant(variants, "authenticating", "authenticating")
            ? false
            : hasVariant(variants, "loggedin", "loggedin")
            ? false
            : true
        ) ? (
          <Button
            data-plasmic-name={"walletconnectbutton"}
            data-plasmic-override={overrides.walletconnectbutton}
            className={classNames("__wab_instance", sty.walletconnectbutton, {
              [sty.walletconnectbuttonauthenticating]: hasVariant(
                variants,
                "authenticating",
                "authenticating"
              ),

              [sty.walletconnectbuttonloggedin]: hasVariant(
                variants,
                "loggedin",
                "loggedin"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ctZ2U
              )}
            >
              {"Button"}
            </div>
          </Button>
        ) : null}
        {(
          hasVariant(variants, "authenticating", "authenticating")
            ? false
            : hasVariant(variants, "loggedin", "loggedin")
            ? false
            : hasVariant(globalVariants, "screen", "desktop")
            ? true
            : false
        ) ? (
          <Button
            data-plasmic-name={"metamaskbutton"}
            data-plasmic-override={overrides.metamaskbutton}
            className={classNames("__wab_instance", sty.metamaskbutton, {
              [sty.metamaskbuttonauthenticating]: hasVariant(
                variants,
                "authenticating",
                "authenticating"
              ),

              [sty.metamaskbuttonloggedin]: hasVariant(
                variants,
                "loggedin",
                "loggedin"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8XHdZ
              )}
            >
              {"Button"}
            </div>
          </Button>
        ) : null}
      </p.Stack>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "screenAlert",
    "freeBox",
    "img",
    "logoutbutton",
    "walletconnectbutton",
    "metamaskbutton"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  freeBox: ["freeBox"],
  img: ["img"],
  logoutbutton: ["logoutbutton"],
  walletconnectbutton: ["walletconnectbutton"],
  metamaskbutton: ["metamaskbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWebThreeAuth__ArgProps,
      internalVariantPropNames: PlasmicWebThreeAuth__VariantProps
    });

    return PlasmicWebThreeAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWebThreeAuth";
  } else {
    func.displayName = `PlasmicWebThreeAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicWebThreeAuth = Object.assign(
  // Top-level PlasmicWebThreeAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    walletconnectbutton: makeNodeComponent("walletconnectbutton"),
    metamaskbutton: makeNodeComponent("metamaskbutton"),
    // Metadata about props expected for PlasmicWebThreeAuth
    internalVariantProps: PlasmicWebThreeAuth__VariantProps,
    internalArgProps: PlasmicWebThreeAuth__ArgProps
  }
);

export default PlasmicWebThreeAuth;
/* prettier-ignore-end */
