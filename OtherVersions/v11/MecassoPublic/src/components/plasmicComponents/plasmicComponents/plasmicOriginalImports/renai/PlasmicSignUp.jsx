// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: D11D2MD8C6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Button1SignUpPage from "../../../Button1SignUpPage"; // plasmic-import: MUJ328zB3I/component
import Button1SignUpPageDisabled from "../../../Button1SignUpPageDisabled"; // plasmic-import: EGeBYu4JO0/component
import Fbplasmicbutton from "../../../Fbplasmicbutton"; // plasmic-import: tOZMt_Mp39/component
import Button2SignUpPage from "../../../Button2SignUpPage"; // plasmic-import: d6xbjF1TjG/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicSignUp.module.css"; // plasmic-import: D11D2MD8C6/css
import Ethereum1Icon from "./icons/PlasmicIcon__Ethereum1"; // plasmic-import: uCAdxxq_BFp/icon
import SocialLogo1Icon from "./icons/PlasmicIcon__SocialLogo1"; // plasmic-import: yAYsIikJDbL/icon
import GoogleLogosvgIcon from "./icons/PlasmicIcon__GoogleLogosvg"; // plasmic-import: Ee4q6b6ruj/icon
import loadingsvg2TDO0NZVmL from "./images/loadingsvg2.svg"; // plasmic-import: t_dO0nZVmL/picture

export const PlasmicSignUp__VariantProps = new Array("loading", "error");

export const PlasmicSignUp__ArgProps = new Array("onClick", "errormessage");

function PlasmicSignUp__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <p.Stack
        as={"div"}
        data-plasmic-name={"signUpPageRoot"}
        data-plasmic-override={overrides.signUpPageRoot}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.signUpPageRoot,
          {
            [sty.signUpPageRooterror]: hasVariant(variants, "error", "error"),
            [sty.signUpPageRootloading]: hasVariant(
              variants,
              "loading",
              "loading"
            )
          }
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"signUpPage"}
          data-plasmic-override={overrides.signUpPage}
          hasGap={true}
          className={classNames(projectcss.all, sty.signUpPage, {
            [sty.signUpPageerror]: hasVariant(variants, "error", "error"),
            [sty.signUpPageloading]: hasVariant(variants, "loading", "loading")
          })}
        >
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <TopNavBar
              data-plasmic-name={"topNavBar"}
              data-plasmic-override={overrides.topNavBar}
              className={classNames("__wab_instance", sty.topNavBar)}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"headingText"}
              data-plasmic-override={overrides.headingText}
              hasGap={true}
              className={classNames(projectcss.all, sty.headingText)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Mecasso"}
              </div>
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"signupbuttonstack"}
              data-plasmic-override={overrides.signupbuttonstack}
              hasGap={true}
              className={classNames(projectcss.all, sty.signupbuttonstack, {
                [sty.signupbuttonstackloading]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            >
              <Button1SignUpPage
                data-plasmic-name={"emailbutton"}
                data-plasmic-override={overrides.emailbutton}
                className={classNames("__wab_instance", sty.emailbutton)}
              />

              <Button1SignUpPage
                data-plasmic-name={"webthreebutton"}
                data-plasmic-override={overrides.webthreebutton}
                className={classNames("__wab_instance", sty.webthreebutton)}
                slot={
                  <Ethereum1Icon
                    className={classNames(projectcss.all, sty.svg__fJjGy)}
                    role={"img"}
                  />
                }
              >
                {"Connect with Web3"}
              </Button1SignUpPage>

              <Button1SignUpPageDisabled
                data-plasmic-name={"button1SignUpPageDisabled"}
                data-plasmic-override={overrides.button1SignUpPageDisabled}
                className={classNames(
                  "__wab_instance",
                  sty.button1SignUpPageDisabled
                )}
                slot={
                  <SocialLogo1Icon
                    className={classNames(projectcss.all, sty.svg__auGua)}
                    role={"img"}
                  />
                }
              >
                {"Sign Up with Social"}
              </Button1SignUpPageDisabled>

              {true ? (
                <Button1SignUpPage
                  data-plasmic-name={"socialmediabutton"}
                  data-plasmic-override={overrides.socialmediabutton}
                  className={classNames(
                    "__wab_instance",
                    sty.socialmediabutton
                  )}
                  slot={
                    <SocialLogo1Icon
                      className={classNames(projectcss.all, sty.svg__ub74N)}
                      role={"img"}
                    />
                  }
                >
                  {"Sign Up with Social Media"}
                </Button1SignUpPage>
              ) : null}
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"socialButtonStack"}
              data-plasmic-override={overrides.socialButtonStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialButtonStack, {
                [sty.socialButtonStackerror]: hasVariant(
                  variants,
                  "error",
                  "error"
                ),

                [sty.socialButtonStackloading]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            >
              {true ? (
                <div
                  data-plasmic-name={"facebookbuttonslot"}
                  data-plasmic-override={overrides.facebookbuttonslot}
                  className={classNames(projectcss.all, sty.facebookbuttonslot)}
                >
                  <Fbplasmicbutton
                    data-plasmic-name={"fbbutton"}
                    data-plasmic-override={overrides.fbbutton}
                    className={classNames("__wab_instance", sty.fbbutton)}
                  />
                </div>
              ) : null}

              <Button2SignUpPage
                data-plasmic-name={"googlebutton"}
                data-plasmic-override={overrides.googlebutton}
                className={classNames("__wab_instance", sty.googlebutton)}
              >
                <GoogleLogosvgIcon
                  className={classNames(projectcss.all, sty.svg__mP8Uz)}
                  role={"img"}
                />
              </Button2SignUpPage>
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgloading]: hasVariant(variants, "loading", "loading")
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"268px"}
              loading={"lazy"}
              src={{
                src: loadingsvg2TDO0NZVmL,
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          ) : null}

          <button
            data-plasmic-name={"signuptologinbutton"}
            data-plasmic-override={overrides.signuptologinbutton}
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.signuptologinbutton
            )}
          >
            {"Already have an account? Sign In"}
          </button>

          {(hasVariant(variants, "error", "error") ? true : false) ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxerror]: hasVariant(variants, "error", "error")
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "An error occured. Please try again",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage, {
                  [sty.slotTargetErrormessageerror]: hasVariant(
                    variants,
                    "error",
                    "error"
                  )
                })
              })}
            </div>
          ) : null}
          {(
            hasVariant(variants, "error", "error")
              ? true
              : hasVariant(variants, "loading", "loading")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : false
          ) ? (
            <Navbartwo
              data-plasmic-name={"navbartwo"}
              data-plasmic-override={overrides.navbartwo}
              className={classNames("__wab_instance", sty.navbartwo, {
                [sty.navbartwoerror]: hasVariant(variants, "error", "error"),
                [sty.navbartwoloading]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                )
              })}
            />
          ) : null}
        </p.Stack>
      </p.Stack>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  signUpPageRoot: [
    "signUpPageRoot",
    "signUpPage",
    "topNavBar",
    "screenAlert",
    "headingText",
    "text",
    "signupbuttonstack",
    "emailbutton",
    "webthreebutton",
    "button1SignUpPageDisabled",
    "socialmediabutton",
    "socialButtonStack",
    "facebookbuttonslot",
    "fbbutton",
    "googlebutton",
    "img",
    "signuptologinbutton",
    "freeBox",
    "navbartwo"
  ],

  signUpPage: [
    "signUpPage",
    "topNavBar",
    "screenAlert",
    "headingText",
    "text",
    "signupbuttonstack",
    "emailbutton",
    "webthreebutton",
    "button1SignUpPageDisabled",
    "socialmediabutton",
    "socialButtonStack",
    "facebookbuttonslot",
    "fbbutton",
    "googlebutton",
    "img",
    "signuptologinbutton",
    "freeBox",
    "navbartwo"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  headingText: ["headingText", "text"],
  text: ["text"],
  signupbuttonstack: [
    "signupbuttonstack",
    "emailbutton",
    "webthreebutton",
    "button1SignUpPageDisabled",
    "socialmediabutton"
  ],

  emailbutton: ["emailbutton"],
  webthreebutton: ["webthreebutton"],
  button1SignUpPageDisabled: ["button1SignUpPageDisabled"],
  socialmediabutton: ["socialmediabutton"],
  socialButtonStack: [
    "socialButtonStack",
    "facebookbuttonslot",
    "fbbutton",
    "googlebutton"
  ],

  facebookbuttonslot: ["facebookbuttonslot", "fbbutton"],
  fbbutton: ["fbbutton"],
  googlebutton: ["googlebutton"],
  img: ["img"],
  signuptologinbutton: ["signuptologinbutton"],
  freeBox: ["freeBox"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignUp__ArgProps,
      internalVariantPropNames: PlasmicSignUp__VariantProps
    });

    return PlasmicSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "signUpPageRoot") {
    func.displayName = "PlasmicSignUp";
  } else {
    func.displayName = `PlasmicSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUp = Object.assign(
  // Top-level PlasmicSignUp renders the root element
  makeNodeComponent("signUpPageRoot"),
  {
    // Helper components rendering sub-elements
    signUpPage: makeNodeComponent("signUpPage"),
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    headingText: makeNodeComponent("headingText"),
    text: makeNodeComponent("text"),
    signupbuttonstack: makeNodeComponent("signupbuttonstack"),
    emailbutton: makeNodeComponent("emailbutton"),
    webthreebutton: makeNodeComponent("webthreebutton"),
    button1SignUpPageDisabled: makeNodeComponent("button1SignUpPageDisabled"),
    socialmediabutton: makeNodeComponent("socialmediabutton"),
    socialButtonStack: makeNodeComponent("socialButtonStack"),
    facebookbuttonslot: makeNodeComponent("facebookbuttonslot"),
    fbbutton: makeNodeComponent("fbbutton"),
    googlebutton: makeNodeComponent("googlebutton"),
    img: makeNodeComponent("img"),
    signuptologinbutton: makeNodeComponent("signuptologinbutton"),
    freeBox: makeNodeComponent("freeBox"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicSignUp
    internalVariantProps: PlasmicSignUp__VariantProps,
    internalArgProps: PlasmicSignUp__ArgProps
  }
);

export default PlasmicSignUp;
/* prettier-ignore-end */
