// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: r2ur7Mu3gzo
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopNavBar from "../../../TopNavBar"; // plasmic-import: 2FmHKYp2yyp/component
import ScreenAlert from "../../../ScreenAlert"; // plasmic-import: laQG7AfxmqV/component
import Myportfoliocardtwo from "../../../Myportfoliocardtwo"; // plasmic-import: G0T9zyt2KDU/component
import Button from "../../../Button"; // plasmic-import: hUmGidH7taW/component
import Navbartwo from "../../../Navbartwo"; // plasmic-import: jF1x-X1nWSN/component
import { useScreenVariants as useScreenVariantsifq4PdpMk2Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IFQ4PdpMK2Y/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicMyPortfolio.module.css"; // plasmic-import: r2ur7Mu3gzo/css
import arrow233Png1Ht3Ij9Y from "./images/arrow233Png.png"; // plasmic-import: 1-HT3Ij9y/picture
import maleUser480Pxpng2EH7EoyOk2 from "./images/maleUser480Pxpng2.png"; // plasmic-import: eH7eoyOK2/picture
import image3X81IJz2XM from "./images/image3.png"; // plasmic-import: x81iJZ2xM/picture
import image10MpIdmHnq from "./images/image10.png"; // plasmic-import: MpIdmHNQ-/picture
import image17NKeetk24K from "./images/image17.png"; // plasmic-import: nKeetk24K/picture

export const PlasmicMyPortfolio__VariantProps = new Array(
  "profileoverlay",
  "authoverlay",
  "norecord"
);

export const PlasmicMyPortfolio__ArgProps = new Array(
  "overlaycreatorname",
  "overlaycategory",
  "overlaycreatortype",
  "errormessage",
  "donutchart",
  "walletslot",
  "overlayuserprofilepic",
  "uploadbuttonslot"
);

function PlasmicMyPortfolio__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsifq4PdpMk2Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootauthoverlay]: hasVariant(
                variants,
                "authoverlay",
                "authoverlay"
              ),

              [sty.rootnorecord]: hasVariant(variants, "norecord", "norecord"),
              [sty.rootprofileoverlay]: hasVariant(
                variants,
                "profileoverlay",
                "profileoverlay"
              )
            }
          )}
        >
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__uzAp1)}>
              {p.renderPlasmicSlot({
                defaultContents: "Please verify your email ID",
                value: args.errormessage,
                className: classNames(sty.slotTargetErrormessage)
              })}
            </div>
          ) : null}

          <TopNavBar
            data-plasmic-name={"topNavBar"}
            data-plasmic-override={overrides.topNavBar}
            className={classNames("__wab_instance", sty.topNavBar)}
          />

          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <ScreenAlert
              data-plasmic-name={"screenAlert"}
              data-plasmic-override={overrides.screenAlert}
              className={classNames("__wab_instance", sty.screenAlert)}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___0QfD)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jlhcQ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c8XVs
                  )}
                >
                  {"My Portfolio"}
                </div>
              </p.Stack>
            ) : null}
          </div>

          {(
            hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__yWkOs, {
                [sty.freeBoxauthoverlay__yWkOsxvkVe]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.freeBoxprofileoverlay__yWkOsthgI]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            >
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__jg2GG, {
                    [sty.freeBoxauthoverlay__jg2GGxvkVe]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__jg2GGthgI]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <button
                      data-plasmic-name={"backbutton"}
                      data-plasmic-override={overrides.backbutton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.backbutton,
                        {
                          [sty.backbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.backbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__k6Iyt, {
                          [sty.imgauthoverlay__k6IytxvkVe]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.imgprofileoverlay__k6IytthgI]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"37px"}
                        loading={"lazy"}
                        src={{
                          src: arrow233Png1Ht3Ij9Y,
                          fullWidth: 640,
                          fullHeight: 640,
                          aspectRatio: undefined
                        }}
                      />
                    </button>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__xhjxe, {
                    [sty.freeBoxauthoverlay__xhjxExvkVe]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__xhjxEthgI]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c4Fe,
                        {
                          [sty.textauthoverlay__c4FexvkVe]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.textprofileoverlay__c4FethgI]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {hasVariant(variants, "authoverlay", "authoverlay")
                        ? "Renai"
                        : "Manu Areraa"}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__wg8Op,
                        {
                          [sty.freeBoxauthoverlay__wg8OpxvkVe]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__wg8OpthgI]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Manu Areraa",
                        value: args.overlaycreatorname,
                        className: classNames(
                          sty.slotTargetOverlaycreatorname,
                          {
                            [sty.slotTargetOverlaycreatornameauthoverlay]:
                              hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                            [sty.slotTargetOverlaycreatornameprofileoverlay]:
                              hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                          }
                        )
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__lUv13,
                        {
                          [sty.freeBoxauthoverlay__lUv13XvkVe]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__lUv13ThgI]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bx1Wb,
                            {
                              [sty.freeBoxauthoverlay__bx1WbxvkVe]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay__bx1WbthgI]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Cooking",
                            value: args.overlaycategory,
                            className: classNames(
                              sty.slotTargetOverlaycategory,
                              {
                                [sty.slotTargetOverlaycategoryauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycategoryprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5AdqG,
                            {
                              [sty.textauthoverlay___5AdqGxvkVe]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.textprofileoverlay___5AdqGthgI]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {" | "}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "authoverlay", "authoverlay")
                          ? false
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eapKs,
                            {
                              [sty.freeBoxauthoverlay__eapKsxvkVe]: hasVariant(
                                variants,
                                "authoverlay",
                                "authoverlay"
                              ),

                              [sty.freeBoxprofileoverlay__eapKsthgI]:
                                hasVariant(
                                  variants,
                                  "profileoverlay",
                                  "profileoverlay"
                                )
                            }
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Influencer",
                            value: args.overlaycreatortype,
                            className: classNames(
                              sty.slotTargetOverlaycreatortype,
                              {
                                [sty.slotTargetOverlaycreatortypeauthoverlay]:
                                  hasVariant(
                                    variants,
                                    "authoverlay",
                                    "authoverlay"
                                  ),

                                [sty.slotTargetOverlaycreatortypeprofileoverlay]:
                                  hasVariant(
                                    variants,
                                    "profileoverlay",
                                    "profileoverlay"
                                  )
                              }
                            )
                          })}
                        </div>
                      ) : null}
                      {(
                        hasVariant(variants, "profileoverlay", "profileoverlay")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i7LX3,
                            {
                              [sty.textprofileoverlay__i7LX3ThgI]: hasVariant(
                                variants,
                                "profileoverlay",
                                "profileoverlay"
                              )
                            }
                          )}
                        >
                          {"|  Young Stars"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <div
                className={classNames(projectcss.all, sty.freeBox__siaH0, {
                  [sty.freeBoxprofileoverlay__siaH0ThgI]: hasVariant(
                    variants,
                    "profileoverlay",
                    "profileoverlay"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__zArL5)}
                      displayHeight={"290px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"290px"}
                      loading={"lazy"}
                      src={{
                        src: maleUser480Pxpng2EH7EoyOk2,
                        fullWidth: 480,
                        fullHeight: 480,
                        aspectRatio: undefined
                      }}
                    />
                  ),

                  value: args.overlayuserprofilepic
                })}
              </div>

              {(
                hasVariant(variants, "authoverlay", "authoverlay")
                  ? true
                  : hasVariant(variants, "profileoverlay", "profileoverlay")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yflY, {
                    [sty.freeBoxauthoverlay__yflYxvkVe]: hasVariant(
                      variants,
                      "authoverlay",
                      "authoverlay"
                    ),

                    [sty.freeBoxprofileoverlay__yflYthgI]: hasVariant(
                      variants,
                      "profileoverlay",
                      "profileoverlay"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"loginbutton"}
                      data-plasmic-override={overrides.loginbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.loginbutton,
                        {
                          [sty.loginbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.loginbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2F8Sv,
                          {
                            [sty.textauthoverlay___2F8SvxvkVe]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay___2F8SvthgI]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "Login"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "profileoverlay", "profileoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"signupbutton"}
                      data-plasmic-override={overrides.signupbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.signupbutton,
                        {
                          [sty.signupbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.signupbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__np0K0,
                          {
                            [sty.textauthoverlay__np0K0XvkVe]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__np0K0ThgI]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {hasVariant(variants, "authoverlay", "authoverlay")
                          ? "SignUp"
                          : "Update Profile"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__juGln,
                        {
                          [sty.freeBoxauthoverlay__juGlNxvkVe]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.freeBoxprofileoverlay__juGlNthgI]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.Stack
                            as={"button"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button___2T29Q
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kpkGv
                              )}
                            >
                              {"Upload Profile Photo"}
                            </div>
                          </p.Stack>
                        ),

                        value: args.uploadbuttonslot
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(variants, "authoverlay", "authoverlay")
                      ? false
                      : true
                  ) ? (
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"logoutbutton"}
                      data-plasmic-override={overrides.logoutbutton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.logoutbutton,
                        {
                          [sty.logoutbuttonauthoverlay]: hasVariant(
                            variants,
                            "authoverlay",
                            "authoverlay"
                          ),

                          [sty.logoutbuttonprofileoverlay]: hasVariant(
                            variants,
                            "profileoverlay",
                            "profileoverlay"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vsvmY,
                          {
                            [sty.textauthoverlay__vsvmYxvkVe]: hasVariant(
                              variants,
                              "authoverlay",
                              "authoverlay"
                            ),

                            [sty.textprofileoverlay__vsvmYthgI]: hasVariant(
                              variants,
                              "profileoverlay",
                              "profileoverlay"
                            )
                          }
                        )}
                      >
                        {"Logout"}
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(hasVariant(variants, "norecord", "norecord") ? false : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__joQ7T, {
                [sty.freeBoxnorecord__joQ7T6ItAl]: hasVariant(
                  variants,
                  "norecord",
                  "norecord"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.donutchart
              })}
            </div>
          ) : null}
          {(hasVariant(variants, "norecord", "norecord") ? false : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aee2K, {
                [sty.freeBoxnorecord__aee2K6ItAl]: hasVariant(
                  variants,
                  "norecord",
                  "norecord"
                )
              })}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o3Crc)}
                >
                  <Myportfoliocardtwo
                    data-plasmic-name={"walletcard"}
                    data-plasmic-override={overrides.walletcard}
                    className={classNames("__wab_instance", sty.walletcard)}
                    tokenbalance={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__stip3
                        )}
                      >
                        {"2255"}
                      </div>
                    }
                    tokenname={"Pablo"}
                  />

                  <Myportfoliocardtwo
                    data-plasmic-name={"walletcardtwo"}
                    data-plasmic-override={overrides.walletcardtwo}
                    className={classNames("__wab_instance", sty.walletcardtwo)}
                    profileimage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__bfjr8)}
                        displayHeight={"35px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"35px"}
                        loading={"lazy"}
                        src={{
                          src: image3X81IJz2XM,
                          fullWidth: 500,
                          fullHeight: 333,
                          aspectRatio: undefined
                        }}
                      />
                    }
                    tokenbalance={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dJzZ5
                        )}
                      >
                        {"541"}
                      </div>
                    }
                    tokenname={"Adam"}
                    tokensymbol={"ADM"}
                  />

                  <Myportfoliocardtwo
                    data-plasmic-name={"walletcardthree"}
                    data-plasmic-override={overrides.walletcardthree}
                    className={classNames(
                      "__wab_instance",
                      sty.walletcardthree
                    )}
                    profileimage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__fhimy)}
                        displayHeight={"35px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"35px"}
                        loading={"lazy"}
                        src={{
                          src: image10MpIdmHnq,
                          fullWidth: 500,
                          fullHeight: 625,
                          aspectRatio: undefined
                        }}
                      />
                    }
                    tokenbalance={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qzcMe
                        )}
                      >
                        {"5543"}
                      </div>
                    }
                    tokenname={"Evan"}
                    tokensymbol={"EVN"}
                  />

                  <Myportfoliocardtwo
                    data-plasmic-name={"walletcardfour"}
                    data-plasmic-override={overrides.walletcardfour}
                    className={classNames("__wab_instance", sty.walletcardfour)}
                    profileimage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__bLbD)}
                        displayHeight={"35px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"35px"}
                        loading={"lazy"}
                        src={{
                          src: image17NKeetk24K,
                          fullWidth: 500,
                          fullHeight: 333,
                          aspectRatio: undefined
                        }}
                      />
                    }
                    tokenbalance={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5VWe
                        )}
                      >
                        {"7411"}
                      </div>
                    }
                    tokenname={"Apsara"}
                    tokensymbol={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j5RaQ
                        )}
                      >
                        {"APSA"}
                      </div>
                    }
                  />
                </p.Stack>
              ) : null}
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.walletslot
              })}
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "norecord", "norecord") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vKuW,
                {
                  [sty.textnorecord__vKuW6ItAl]: hasVariant(
                    variants,
                    "norecord",
                    "norecord"
                  )
                }
              )}
            >
              {"Portfolio is empty"}
            </div>
          ) : null}
          {(hasVariant(variants, "norecord", "norecord") ? true : true) ? (
            <Button
              data-plasmic-name={"discovercreatorsbutton"}
              data-plasmic-override={overrides.discovercreatorsbutton}
              className={classNames(
                "__wab_instance",
                sty.discovercreatorsbutton,
                {
                  [sty.discovercreatorsbuttonnorecord]: hasVariant(
                    variants,
                    "norecord",
                    "norecord"
                  )
                }
              )}
            >
              {"Discover Creators"}
            </Button>
          ) : null}
          {(hasVariant(variants, "norecord", "norecord") ? false : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__z65BK, {
                [sty.freeBoxnorecord__z65BK6ItAl]: hasVariant(
                  variants,
                  "norecord",
                  "norecord"
                )
              })}
            >
              {(hasVariant(variants, "norecord", "norecord") ? false : true) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__urdw9, {
                    [sty.freeBoxnorecord__urdw96ItAl]: hasVariant(
                      variants,
                      "norecord",
                      "norecord"
                    )
                  })}
                />
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(variants, "authoverlay", "authoverlay")
              ? true
              : hasVariant(variants, "profileoverlay", "profileoverlay")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <Navbartwo
              data-plasmic-name={"navbartwo"}
              data-plasmic-override={overrides.navbartwo}
              className={classNames("__wab_instance", sty.navbartwo, {
                [sty.navbartwoauthoverlay]: hasVariant(
                  variants,
                  "authoverlay",
                  "authoverlay"
                ),

                [sty.navbartwoprofileoverlay]: hasVariant(
                  variants,
                  "profileoverlay",
                  "profileoverlay"
                )
              })}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topNavBar",
    "screenAlert",
    "backbutton",
    "loginbutton",
    "signupbutton",
    "logoutbutton",
    "walletcard",
    "walletcardtwo",
    "walletcardthree",
    "walletcardfour",
    "discovercreatorsbutton",
    "navbartwo"
  ],

  topNavBar: ["topNavBar"],
  screenAlert: ["screenAlert"],
  backbutton: ["backbutton"],
  loginbutton: ["loginbutton"],
  signupbutton: ["signupbutton"],
  logoutbutton: ["logoutbutton"],
  walletcard: ["walletcard"],
  walletcardtwo: ["walletcardtwo"],
  walletcardthree: ["walletcardthree"],
  walletcardfour: ["walletcardfour"],
  discovercreatorsbutton: ["discovercreatorsbutton"],
  navbartwo: ["navbartwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMyPortfolio__ArgProps,
      internalVariantPropNames: PlasmicMyPortfolio__VariantProps
    });

    return PlasmicMyPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyPortfolio";
  } else {
    func.displayName = `PlasmicMyPortfolio.${nodeName}`;
  }
  return func;
}

export const PlasmicMyPortfolio = Object.assign(
  // Top-level PlasmicMyPortfolio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topNavBar: makeNodeComponent("topNavBar"),
    screenAlert: makeNodeComponent("screenAlert"),
    backbutton: makeNodeComponent("backbutton"),
    loginbutton: makeNodeComponent("loginbutton"),
    signupbutton: makeNodeComponent("signupbutton"),
    logoutbutton: makeNodeComponent("logoutbutton"),
    walletcard: makeNodeComponent("walletcard"),
    walletcardtwo: makeNodeComponent("walletcardtwo"),
    walletcardthree: makeNodeComponent("walletcardthree"),
    walletcardfour: makeNodeComponent("walletcardfour"),
    discovercreatorsbutton: makeNodeComponent("discovercreatorsbutton"),
    navbartwo: makeNodeComponent("navbartwo"),
    // Metadata about props expected for PlasmicMyPortfolio
    internalVariantProps: PlasmicMyPortfolio__VariantProps,
    internalArgProps: PlasmicMyPortfolio__ArgProps
  }
);

export default PlasmicMyPortfolio;
/* prettier-ignore-end */
