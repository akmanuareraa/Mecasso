// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7hWdoDc5Fm3y1TqrPvEG7
// Component: HFLS4VKFDsZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_renai.module.css"; // plasmic-import: q7hWdoDc5Fm3y1TqrPvEG7/projectcss
import sty from "./PlasmicFigmainspiredfeedcard.module.css"; // plasmic-import: HFLS4VKFDsZ/css
import HeartBlueFilledsvgIcon from "./icons/PlasmicIcon__HeartBlueFilledsvg"; // plasmic-import: a7Z29UWuW/icon
import JewelCharmsvgIcon from "./icons/PlasmicIcon__JewelCharmsvg"; // plasmic-import: gD5MEw887/icon
import ExternalLinksvgIcon from "./icons/PlasmicIcon__ExternalLinksvg"; // plasmic-import: kRZyqswZc/icon
import image19Nu1XjgG0M from "./images/image19.png"; // plasmic-import: Nu1XjgG0m/picture
import image20IYGemhHf2 from "./images/image20.png"; // plasmic-import: iYGemhHF2/picture

export const PlasmicFigmainspiredfeedcard__VariantProps = new Array();

export const PlasmicFigmainspiredfeedcard__ArgProps = new Array();

function PlasmicFigmainspiredfeedcard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__ld7Zb)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2Vq4F
            )}
          >
            {
              "First post for the followers of Renai Community and Trying to setup a fixed space for the heading"
            }
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__pQmiU)}>
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__i41Bu)}
          displayHeight={"auto"}
          displayMaxHeight={"229px"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: image19Nu1XjgG0M,
            fullWidth: 1074,
            fullHeight: 806,
            aspectRatio: undefined
          }}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__c4GJ)}>
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hVAjD)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rbGtU)}
              >
                <HeartBlueFilledsvgIcon
                  className={classNames(projectcss.all, sty.svg__twiPh)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l1Eys
                  )}
                >
                  {"39"}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kbSt7)}
              >
                <JewelCharmsvgIcon
                  className={classNames(projectcss.all, sty.svg__trsqV)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4KkS
                  )}
                >
                  {"57"}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fqoPk)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__naH0K)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qivpU)}
                  displayHeight={"25px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"25px"}
                  loading={"lazy"}
                  src={{
                    src: image20IYGemhHf2,
                    fullWidth: 387,
                    fullHeight: 581,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hTxoz
              )}
            >
              {"Ishan Roy"}
            </div>
          </p.Stack>
        ) : null}
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__nHoMy
        )}
      >
        {
          "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. "
        }
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__xyPyX)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tjsAr
          )}
        >
          {"Dec 12 2021 21:59"}
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hoI4S)}
          >
            <ExternalLinksvgIcon
              className={classNames(projectcss.all, sty.svg__inINm)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u7ZWm
              )}
            >
              {"External Link"}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFigmainspiredfeedcard__ArgProps,
      internalVariantPropNames: PlasmicFigmainspiredfeedcard__VariantProps
    });

    return PlasmicFigmainspiredfeedcard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFigmainspiredfeedcard";
  } else {
    func.displayName = `PlasmicFigmainspiredfeedcard.${nodeName}`;
  }
  return func;
}

export const PlasmicFigmainspiredfeedcard = Object.assign(
  // Top-level PlasmicFigmainspiredfeedcard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFigmainspiredfeedcard
    internalVariantProps: PlasmicFigmainspiredfeedcard__VariantProps,
    internalArgProps: PlasmicFigmainspiredfeedcard__ArgProps
  }
);

export default PlasmicFigmainspiredfeedcard;
/* prettier-ignore-end */
